I, [2015-07-12T00:49:59.389558 #17448]  INFO -- : Started GET "/" for 192.168.33.1 at 2015-07-12 00:49:59 +0000
I, [2015-07-12T00:49:59.527486 #17448]  INFO -- : Processing by LoginsController#new as HTML
I, [2015-07-12T00:49:59.607923 #17448]  INFO -- :   Rendered logins/new.html.erb within layouts/login (1.7ms)
I, [2015-07-12T00:49:59.609233 #17448]  INFO -- : Completed 200 OK in 81ms (Views: 63.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T00:55:31.813932 #17448]  INFO -- : Started GET "/" for 192.168.33.1 at 2015-07-12 00:55:31 +0000
I, [2015-07-12T00:55:31.922320 #17448]  INFO -- : Processing by LoginsController#new as HTML
I, [2015-07-12T00:55:31.974814 #17448]  INFO -- :   Rendered logins/new.html.erb within layouts/login (0.7ms)
I, [2015-07-12T00:55:31.975626 #17448]  INFO -- : Completed 200 OK in 53ms (Views: 52.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T00:55:35.534262 #17448]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%0A++&_=1436662522223" for 192.168.33.1 at 2015-07-12 00:55:35 +0000
I, [2015-07-12T00:55:35.645613 #17448]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T00:55:35.645759 #17448]  INFO -- :   Parameters: {"action_name"=>"\n    ログイン\n  ", "_"=>"1436662522223"}
I, [2015-07-12T00:55:35.916005 #17448]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.3ms)
I, [2015-07-12T00:55:35.916940 #17448]  INFO -- : Completed 200 OK in 271ms (Views: 270.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T00:55:36.032341 #17448]  INFO -- : Started POST "/logins/log" for 192.168.33.1 at 2015-07-12 00:55:36 +0000
I, [2015-07-12T00:55:36.127091 #17448]  INFO -- : Processing by LoginsController#log as HTML
I, [2015-07-12T00:55:36.127837 #17448]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"iYpRaGxEfSaNn1i3ex/PdbGT4rvjg9ls6NHfiir/GIy1lT0uKdp4MfKmO7EKqEhhvqiN6hXreRTHzrFwO51ZjQ==", "login_id"=>"system", "login_pass"=>"master", "button"=>""}
D, [2015-07-12T00:55:36.146980 #17448] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T00:55:36.158993 #17448] DEBUG -- :   [1m[35mSQL (0.6ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", ""], ["url", "/logins/log"], ["action", "\n    ログイン\n  "], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"iYpRaGxEfSaNn1i3ex/PdbGT4rvjg9ls6NHfiir/GIy1lT0uKdp4MfKmO7EKqEhhvqiN6hXreRTHzrFwO51ZjQ==\", \"login_id\"=>\"system\", \"login_pass\"=>\"master\", \"button\"=>\"\", \"controller\"=>\"logins\", \"action\"=>\"log\"}"], ["created_at", "2015-07-12 00:55:36.147329"], ["updated_at", "2015-07-12 00:55:36.147329"]]
D, [2015-07-12T00:55:36.162366 #17448] DEBUG -- :   [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T00:55:36.180943 #17448] DEBUG -- :   [1m[35mUser Exists (0.1ms)[0m  SELECT  1 AS one FROM "users" WHERE "users"."user_id" = $1 AND "users"."user_password" = $2 AND "users"."delete_flag" = $3 LIMIT 1  [["user_id", "system"], ["user_password", "master"], ["delete_flag", "0"]]
D, [2015-07-12T00:55:36.182722 #17448] DEBUG -- :   [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."user_id" = $1 AND "users"."user_password" = $2 AND "users"."delete_flag" = $3  ORDER BY "users"."id" ASC LIMIT 1[0m  [["user_id", "system"], ["user_password", "master"], ["delete_flag", "0"]]
I, [2015-07-12T00:55:36.190887 #17448]  INFO -- : Redirected to http://192.168.33.10/sales
I, [2015-07-12T00:55:36.191089 #17448]  INFO -- : Completed 302 Found in 63ms (ActiveRecord: 8.7ms)
I, [2015-07-12T00:55:36.202958 #17448]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 00:55:36 +0000
I, [2015-07-12T00:55:36.301818 #17448]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T00:55:36.308483 #17448] DEBUG -- :   [1m[35mPlan Load (5.4ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T00:55:36.314248 #17448] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T00:55:36.475641 #17448]  INFO -- :   Rendered sales/index.html.erb within layouts/application (86.0ms)
I, [2015-07-12T00:55:36.478644 #17448]  INFO -- : Completed 200 OK in 177ms (Views: 163.9ms | ActiveRecord: 7.2ms)
I, [2015-07-12T00:55:43.426204 #17448]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%0A%09&_=1436662526661" for 192.168.33.1 at 2015-07-12 00:55:43 +0000
I, [2015-07-12T00:55:43.523256 #17448]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T00:55:43.523503 #17448]  INFO -- :   Parameters: {"action_name"=>"\n          Aグループ\n\t", "_"=>"1436662526661"}
I, [2015-07-12T00:55:43.792561 #17448]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T00:55:43.793216 #17448]  INFO -- : Completed 200 OK in 270ms (Views: 269.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T00:55:44.516804 #17448]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%0A%09&_=1436662526662" for 192.168.33.1 at 2015-07-12 00:55:44 +0000
I, [2015-07-12T00:55:44.615027 #17448]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T00:55:44.615932 #17448]  INFO -- :   Parameters: {"action_name"=>"\n          Bグループ\n\t", "_"=>"1436662526662"}
I, [2015-07-12T00:55:44.888242 #17448]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T00:55:44.889067 #17448]  INFO -- : Completed 200 OK in 273ms (Views: 272.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T00:55:45.686361 #17448]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1436662526663" for 192.168.33.1 at 2015-07-12 00:55:45 +0000
I, [2015-07-12T00:55:45.795865 #17448]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T00:55:45.796093 #17448]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1436662526663"}
I, [2015-07-12T00:55:46.087659 #17448]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T00:55:46.088572 #17448]  INFO -- : Completed 200 OK in 292ms (Views: 291.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T00:55:48.244609 #17448]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1436662526664" for 192.168.33.1 at 2015-07-12 00:55:48 +0000
I, [2015-07-12T00:55:48.359872 #17448]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T00:55:48.360115 #17448]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1436662526664"}
I, [2015-07-12T00:55:48.621492 #17448]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T00:55:48.622138 #17448]  INFO -- : Completed 200 OK in 262ms (Views: 261.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T00:56:24.992937 #17448]  INFO -- : Started GET "/logins/set_action_name?action_name=%E8%A8%88%E7%94%BB%EF%BC%8F%E5%AE%9F%E7%B8%BE%E7%99%BB%E9%8C%B2+&_=1436662526665" for 192.168.33.1 at 2015-07-12 00:56:24 +0000
I, [2015-07-12T00:56:25.096871 #17448]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T00:56:25.097112 #17448]  INFO -- :   Parameters: {"action_name"=>"計画／実績登録 ", "_"=>"1436662526665"}
I, [2015-07-12T00:56:25.366972 #17448]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T00:56:25.367517 #17448]  INFO -- : Completed 200 OK in 270ms (Views: 269.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T00:56:29.152632 #17448]  INFO -- : Started GET "/logins/set_action_name?action_name=%E8%A8%88%E7%94%BB&_=1436662526666" for 192.168.33.1 at 2015-07-12 00:56:29 +0000
I, [2015-07-12T00:56:29.250100 #17448]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T00:56:29.250306 #17448]  INFO -- :   Parameters: {"action_name"=>"計画", "_"=>"1436662526666"}
I, [2015-07-12T00:56:29.528417 #17448]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T00:56:29.529112 #17448]  INFO -- : Completed 200 OK in 279ms (Views: 278.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T00:56:29.583963 #17448]  INFO -- : Started GET "/plans" for 192.168.33.1 at 2015-07-12 00:56:29 +0000
I, [2015-07-12T00:56:29.693215 #17448]  INFO -- : Processing by PlansController#index as HTML
D, [2015-07-12T00:56:29.695115 #17448] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T00:56:29.702213 #17448] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/plans"], ["action", "計画"], ["parameters", "{\"controller\"=>\"plans\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 00:56:29.695401"], ["updated_at", "2015-07-12 00:56:29.695401"]]
D, [2015-07-12T00:56:29.703789 #17448] DEBUG -- :   [1m[35m (0.9ms)[0m  COMMIT
D, [2015-07-12T00:56:29.798098 #17448] DEBUG -- :   [1m[36mUser Load (0.3ms)[0m  [1mSELECT "users".* FROM "users" WHERE "users"."job" = $1 AND "users"."delete_flag" = $2  ORDER BY display_order asc, user_id asc[0m  [["job", "1"], ["delete_flag", "0"]]
D, [2015-07-12T00:56:29.822335 #17448] DEBUG -- :   [1m[35mPlan Load (1.0ms)[0m  SELECT "plans".* FROM "plans" INNER JOIN "users" ON "users"."user_id" = "plans"."user_id" WHERE (plan_ym >= '201507' and plan_ym <= '201507')  ORDER BY users.display_order, plan_ym asc, user_id asc
I, [2015-07-12T00:56:29.822865 #17448]  INFO -- :   Rendered plans/index.html.erb within layouts/application (28.5ms)
I, [2015-07-12T00:56:29.824812 #17448]  INFO -- : Completed 200 OK in 131ms (Views: 118.7ms | ActiveRecord: 2.6ms)
I, [2015-07-12T00:58:40.750406 #17448]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436662579398" for 192.168.33.1 at 2015-07-12 00:58:40 +0000
I, [2015-07-12T00:58:40.880315 #17448]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T00:58:40.880548 #17448]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436662579398"}
I, [2015-07-12T00:58:41.165141 #17448]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T00:58:41.166145 #17448]  INFO -- : Completed 200 OK in 285ms (Views: 284.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T00:58:41.229959 #17448]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 00:58:41 +0000
I, [2015-07-12T00:58:41.322935 #17448]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T00:58:41.325032 #17448] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T00:58:41.325973 #17448] DEBUG -- :   [1m[35mSQL (0.1ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 00:58:41.325067"], ["updated_at", "2015-07-12 00:58:41.325067"]]
D, [2015-07-12T00:58:41.329975 #17448] DEBUG -- :   [1m[36m (3.4ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T00:58:41.334301 #17448] DEBUG -- :   [1m[35mPlan Load (3.6ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T00:58:41.336477 #17448] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T00:58:41.437889 #17448]  INFO -- :   Rendered sales/index.html.erb within layouts/application (22.3ms)
I, [2015-07-12T00:58:41.439831 #17448]  INFO -- : Completed 200 OK in 117ms (Views: 102.8ms | ActiveRecord: 7.6ms)
I, [2015-07-12T00:59:44.491777 #17448]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 00:59:44 +0000
I, [2015-07-12T00:59:44.604563 #17448]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T00:59:44.609716 #17448] DEBUG -- :   [1m[35mPlan Load (3.9ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T00:59:44.611854 #17448] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T00:59:44.770298 #17448]  INFO -- :   Rendered sales/index.html.erb within layouts/application (62.0ms)
I, [2015-07-12T00:59:44.771673 #17448]  INFO -- : Completed 200 OK in 167ms (Views: 159.5ms | ActiveRecord: 4.4ms)
I, [2015-07-12T01:01:45.467695 #17448]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 01:01:45 +0000
I, [2015-07-12T01:01:45.563302 #17448]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T01:01:45.568111 #17448] DEBUG -- :   [1m[35mPlan Load (3.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T01:01:45.569967 #17448] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T01:01:45.708908 #17448]  INFO -- :   Rendered sales/index.html.erb within layouts/application (63.3ms)
I, [2015-07-12T01:01:45.709924 #17448]  INFO -- : Completed 200 OK in 146ms (Views: 138.6ms | ActiveRecord: 3.6ms)
I, [2015-07-12T01:01:50.739905 #17448]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436662891637" for 192.168.33.1 at 2015-07-12 01:01:50 +0000
I, [2015-07-12T01:01:50.833222 #17448]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T01:01:50.833271 #17448]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436662891637"}
I, [2015-07-12T01:01:51.116450 #17448]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T01:01:51.117106 #17448]  INFO -- : Completed 200 OK in 284ms (Views: 283.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T01:01:51.155904 #17448]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 01:01:51 +0000
I, [2015-07-12T01:01:51.244375 #17448]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T01:01:51.247113 #17448] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T01:01:51.248612 #17448] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", " Aグループ"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 01:01:51.247470"], ["updated_at", "2015-07-12 01:01:51.247470"]]
D, [2015-07-12T01:01:51.251718 #17448] DEBUG -- :   [1m[35m (2.5ms)[0m  COMMIT
D, [2015-07-12T01:01:51.255380 #17448] DEBUG -- :   [1m[36mPlan Load (3.0ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T01:01:51.257178 #17448] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T01:01:51.358404 #17448]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.8ms)
I, [2015-07-12T01:01:51.360129 #17448]  INFO -- : Completed 200 OK in 115ms (Views: 102.8ms | ActiveRecord: 6.2ms)
I, [2015-07-12T01:02:21.224141 #17448]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 01:02:21 +0000
I, [2015-07-12T01:02:21.318877 #17448]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T01:02:21.323647 #17448] DEBUG -- :   [1m[36mPlan Load (3.8ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T01:02:21.325450 #17448] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T01:02:21.465420 #17448]  INFO -- :   Rendered sales/index.html.erb within layouts/application (58.4ms)
I, [2015-07-12T01:02:21.466966 #17448]  INFO -- : Completed 200 OK in 148ms (Views: 141.0ms | ActiveRecord: 4.3ms)
I, [2015-07-12T01:03:42.226299 #17448]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 01:03:42 +0000
I, [2015-07-12T01:03:42.322173 #17448]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T01:03:42.326945 #17448] DEBUG -- :   [1m[36mPlan Load (3.1ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T01:03:42.328616 #17448] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T01:03:42.466715 #17448]  INFO -- :   Rendered sales/index.html.erb within layouts/application (65.5ms)
I, [2015-07-12T01:03:42.467921 #17448]  INFO -- : Completed 200 OK in 146ms (Views: 138.6ms | ActiveRecord: 3.6ms)
I, [2015-07-12T01:08:34.086877 #18064]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 01:08:34 +0000
I, [2015-07-12T01:08:34.206293 #18064]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T01:08:34.230321 #18064] DEBUG -- :   [1m[36mPlan Load (6.1ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T01:08:34.239155 #18064] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T01:08:34.410064 #18064]  INFO -- :   Rendered sales/index.html.erb within layouts/application (90.1ms)
I, [2015-07-12T01:08:34.413082 #18064]  INFO -- : Completed 200 OK in 206ms (Views: 173.1ms | ActiveRecord: 9.0ms)
I, [2015-07-12T01:09:01.194608 #18064]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86%E8%80%85&_=1436663295645" for 192.168.33.1 at 2015-07-12 01:09:01 +0000
I, [2015-07-12T01:09:01.303739 #18064]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T01:09:01.303934 #18064]  INFO -- :   Parameters: {"action_name"=>"システム管理者", "_"=>"1436663295645"}
I, [2015-07-12T01:09:01.578064 #18064]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.4ms)
I, [2015-07-12T01:09:01.579592 #18064]  INFO -- : Completed 200 OK in 275ms (Views: 274.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T01:09:02.440519 #18064]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%83%AD%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88&_=1436663295646" for 192.168.33.1 at 2015-07-12 01:09:02 +0000
I, [2015-07-12T01:09:02.547402 #18064]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T01:09:02.547668 #18064]  INFO -- :   Parameters: {"action_name"=>"ログアウト", "_"=>"1436663295646"}
I, [2015-07-12T01:09:02.873613 #18064]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T01:09:02.874799 #18064]  INFO -- : Completed 200 OK in 327ms (Views: 326.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T01:09:03.035701 #18064]  INFO -- : Started DELETE "/logins/0" for 192.168.33.1 at 2015-07-12 01:09:03 +0000
I, [2015-07-12T01:09:03.143662 #18064]  INFO -- : Processing by LoginsController#destroy as HTML
I, [2015-07-12T01:09:03.143919 #18064]  INFO -- :   Parameters: {"authenticity_token"=>"N79A2AmXlQGzl+AD6X87JCvDxN9nuajJLiFQnsldxMALoCyeTAmQFsyugwWYyLwwJPirjpHRCLEBPj5k2D+FwQ==", "id"=>"0"}
D, [2015-07-12T01:09:03.163062 #18064] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T01:09:03.174844 #18064] DEBUG -- :   [1m[35mSQL (0.5ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/logins/0"], ["action", "ログアウト"], ["parameters", "{\"_method\"=>\"delete\", \"authenticity_token\"=>\"N79A2AmXlQGzl+AD6X87JCvDxN9nuajJLiFQnsldxMALoCyeTAmQFsyugwWYyLwwJPirjpHRCLEBPj5k2D+FwQ==\", \"controller\"=>\"logins\", \"action\"=>\"destroy\", \"id\"=>\"0\"}"], ["created_at", "2015-07-12 01:09:03.163480"], ["updated_at", "2015-07-12 01:09:03.163480"]]
D, [2015-07-12T01:09:03.179371 #18064] DEBUG -- :   [1m[36m (3.2ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T01:09:03.180042 #18064]  INFO -- : Redirected to http://192.168.33.10/
I, [2015-07-12T01:09:03.180437 #18064]  INFO -- : Completed 302 Found in 36ms (ActiveRecord: 6.6ms)
I, [2015-07-12T01:09:03.191071 #18064]  INFO -- : Started GET "/" for 192.168.33.1 at 2015-07-12 01:09:03 +0000
I, [2015-07-12T01:09:03.293731 #18064]  INFO -- : Processing by LoginsController#new as HTML
I, [2015-07-12T01:09:03.347963 #18064]  INFO -- :   Rendered logins/new.html.erb within layouts/login (2.1ms)
I, [2015-07-12T01:09:03.348621 #18064]  INFO -- : Completed 200 OK in 54ms (Views: 52.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T02:40:07.346232 #18775]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 02:40:07 +0000
I, [2015-07-12T02:40:07.471158 #18775]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T02:40:07.495084 #18775] DEBUG -- :   [1m[36mPlan Load (5.4ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T02:40:07.503798 #18775] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T02:40:07.672884 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (92.5ms)
I, [2015-07-12T02:40:07.676042 #18775]  INFO -- : Completed 200 OK in 204ms (Views: 171.0ms | ActiveRecord: 8.7ms)
I, [2015-07-12T02:40:45.696646 #18775]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 02:40:45 +0000
I, [2015-07-12T02:40:45.793610 #18775]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T02:40:45.798032 #18775] DEBUG -- :   [1m[36mPlan Load (2.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T02:40:45.800372 #18775] DEBUG -- :   [1m[35m (0.9ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T02:40:45.940940 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (65.1ms)
I, [2015-07-12T02:40:45.942137 #18775]  INFO -- : Completed 200 OK in 148ms (Views: 141.2ms | ActiveRecord: 3.8ms)
I, [2015-07-12T02:40:49.212872 #18775]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436668831323" for 192.168.33.1 at 2015-07-12 02:40:49 +0000
I, [2015-07-12T02:40:49.303245 #18775]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T02:40:49.303514 #18775]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436668831323"}
I, [2015-07-12T02:40:49.576946 #18775]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.4ms)
I, [2015-07-12T02:40:49.579132 #18775]  INFO -- : Completed 200 OK in 275ms (Views: 274.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T02:40:49.660982 #18775]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=0&button=" for 192.168.33.1 at 2015-07-12 02:40:49 +0000
I, [2015-07-12T02:40:49.758842 #18775]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T02:40:49.758917 #18775]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "a_group"=>"0", "button"=>""}
D, [2015-07-12T02:40:49.778398 #18775] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T02:40:49.789366 #18775] DEBUG -- :   [1m[35mSQL (0.5ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=0&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"0\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 02:40:49.778797"], ["updated_at", "2015-07-12 02:40:49.778797"]]
D, [2015-07-12T02:40:49.793539 #18775] DEBUG -- :   [1m[36m (3.4ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T02:40:49.796567 #18775] DEBUG -- :   [1m[35mPlan Load (2.3ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T02:40:49.798272 #18775] DEBUG -- :   [1m[36m (0.3ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T02:40:49.898373 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (26.2ms)
I, [2015-07-12T02:40:49.900079 #18775]  INFO -- : Completed 200 OK in 141ms (Views: 101.3ms | ActiveRecord: 9.2ms)
I, [2015-07-12T02:41:05.702889 #18775]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436668835227" for 192.168.33.1 at 2015-07-12 02:41:05 +0000
I, [2015-07-12T02:41:05.809198 #18775]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T02:41:05.809445 #18775]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436668835227"}
I, [2015-07-12T02:41:06.078658 #18775]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T02:41:06.079708 #18775]  INFO -- : Completed 200 OK in 270ms (Views: 269.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T02:41:06.169719 #18775]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=0&b_group=0&button=" for 192.168.33.1 at 2015-07-12 02:41:06 +0000
I, [2015-07-12T02:41:06.280093 #18775]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T02:41:06.280505 #18775]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "a_group"=>"0", "b_group"=>"0", "button"=>""}
D, [2015-07-12T02:41:06.284049 #18775] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T02:41:06.285995 #18775] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=0&b_group=0&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"0\", \"b_group\"=>\"0\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 02:41:06.284451"], ["updated_at", "2015-07-12 02:41:06.284451"]]
D, [2015-07-12T02:41:06.287775 #18775] DEBUG -- :   [1m[35m (0.7ms)[0m  COMMIT
D, [2015-07-12T02:41:06.292383 #18775] DEBUG -- :   [1m[36mPlan Load (3.6ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T02:41:06.294333 #18775] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T02:41:06.400796 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.4ms)
I, [2015-07-12T02:41:06.402509 #18775]  INFO -- : Completed 200 OK in 122ms (Views: 107.7ms | ActiveRecord: 5.2ms)
I, [2015-07-12T02:42:20.239968 #18775]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=0&b_group=0&button=" for 192.168.33.1 at 2015-07-12 02:42:20 +0000
I, [2015-07-12T02:42:20.335769 #18775]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T02:42:20.335908 #18775]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "a_group"=>"0", "b_group"=>"0", "button"=>""}
D, [2015-07-12T02:42:20.340246 #18775] DEBUG -- :   [1m[36mPlan Load (3.3ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T02:42:20.342033 #18775] DEBUG -- :   [1m[35m (0.3ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T02:42:20.477838 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (58.6ms)
I, [2015-07-12T02:42:20.479557 #18775]  INFO -- : Completed 200 OK in 143ms (Views: 137.3ms | ActiveRecord: 3.6ms)
I, [2015-07-12T02:42:22.857281 #18775]  INFO -- : Started GET "/logins/set_action_name?action_name=&_=1436668924770" for 192.168.33.1 at 2015-07-12 02:42:22 +0000
I, [2015-07-12T02:42:22.950092 #18775]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T02:42:22.950118 #18775]  INFO -- :   Parameters: {"action_name"=>"", "_"=>"1436668924770"}
I, [2015-07-12T02:42:23.216052 #18775]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T02:42:23.217007 #18775]  INFO -- : Completed 200 OK in 267ms (Views: 266.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T02:42:30.908030 #18775]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436668924771" for 192.168.33.1 at 2015-07-12 02:42:30 +0000
I, [2015-07-12T02:42:31.001469 #18775]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T02:42:31.001682 #18775]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436668924771"}
I, [2015-07-12T02:42:31.269449 #18775]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T02:42:31.270168 #18775]  INFO -- : Completed 200 OK in 268ms (Views: 267.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T02:42:31.338135 #18775]  INFO -- : Started GET "/sales?utf8=&sale_ym_from=201503&sale_ym_to=201503&a_group=on&button=" for 192.168.33.1 at 2015-07-12 02:42:31 +0000
I, [2015-07-12T02:42:31.426181 #18775]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T02:42:31.426300 #18775]  INFO -- :   Parameters: {"utf8"=>"", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"on", "button"=>""}
D, [2015-07-12T02:42:31.427871 #18775] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T02:42:31.430013 #18775] DEBUG -- :   [1m[35mSQL (1.1ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=&sale_ym_from=201503&sale_ym_to=201503&a_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 02:42:31.427973"], ["updated_at", "2015-07-12 02:42:31.427973"]]
D, [2015-07-12T02:42:31.432474 #18775] DEBUG -- :   [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T02:42:31.437533 #18775] DEBUG -- :   [1m[35mPlan Load (4.5ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T02:42:31.451247 #18775] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T02:42:31.883026 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (359.2ms)
I, [2015-07-12T02:42:31.884498 #18775]  INFO -- : Completed 200 OK in 458ms (Views: 432.5ms | ActiveRecord: 8.9ms)
I, [2015-07-12T02:43:27.560016 #18775]  INFO -- : Started GET "/logins/set_action_name?action_name=&_=1436668936037" for 192.168.33.1 at 2015-07-12 02:43:27 +0000
I, [2015-07-12T02:43:27.651471 #18775]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T02:43:27.651726 #18775]  INFO -- :   Parameters: {"action_name"=>"", "_"=>"1436668936037"}
I, [2015-07-12T02:43:27.923043 #18775]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T02:43:27.924011 #18775]  INFO -- : Completed 200 OK in 272ms (Views: 271.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T02:43:31.973047 #18775]  INFO -- : Started GET "/logins/set_action_name?action_name=&_=1436668936038" for 192.168.33.1 at 2015-07-12 02:43:31 +0000
I, [2015-07-12T02:43:32.074486 #18775]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T02:43:32.074682 #18775]  INFO -- :   Parameters: {"action_name"=>"", "_"=>"1436668936038"}
I, [2015-07-12T02:43:32.350931 #18775]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T02:43:32.351926 #18775]  INFO -- : Completed 200 OK in 277ms (Views: 276.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T02:56:24.734398 #18775]  INFO -- : Started GET "/sales?utf8=&sale_ym_from=201503&sale_ym_to=201503&a_group=on&button=" for 192.168.33.1 at 2015-07-12 02:56:24 +0000
I, [2015-07-12T02:56:24.835424 #18775]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T02:56:24.835676 #18775]  INFO -- :   Parameters: {"utf8"=>"", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"on", "button"=>""}
D, [2015-07-12T02:56:24.837780 #18775] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T02:56:24.839086 #18775] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=&sale_ym_from=201503&sale_ym_to=201503&a_group=on&button="], ["action", ""], ["parameters", "{\"utf8\"=>\"\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 02:56:24.837971"], ["updated_at", "2015-07-12 02:56:24.837971"]]
D, [2015-07-12T02:56:24.841158 #18775] DEBUG -- :   [1m[35m (1.5ms)[0m  COMMIT
D, [2015-07-12T02:56:24.846093 #18775] DEBUG -- :   [1m[36mPlan Load (4.1ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T02:56:24.848865 #18775] DEBUG -- :   [1m[35m (1.2ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T02:56:24.996057 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (66.4ms)
I, [2015-07-12T02:56:24.996406 #18775]  INFO -- : Completed 500 Internal Server Error in 160ms
F, [2015-07-12T02:56:24.998337 #18775] FATAL -- : 
ActionView::Template::Error (undefined method `stringify_keys' for false:FalseClass):
    31:     <%= text_field_tag(:sale_ym_from, @sale_ym_from ,{ :class => "input-mini datepicker"} ) %>
    32:     ～
    33:     <%= text_field_tag(:sale_ym_to, @sale_ym_to ,{ :class => "input-mini datepicker"} ) %>
    34:     <%= check_box_tag :a_group,  @a_group, true, false %>Aグループのみ
    35:     <%= check_box_tag :b_group,  @b_group %>Bグループのみ
    36:     <%= button_tag(type: 'submit', class: "btn btn-default") do %>
    37:     <span class="glyphicon glyphicon-search"></span> 
  app/views/sales/index.html.erb:34:in `block in _app_views_sales_index_html_erb___1735802705241097665_70176700346600'
  app/views/sales/index.html.erb:28:in `_app_views_sales_index_html_erb___1735802705241097665_70176700346600'


I, [2015-07-12T02:57:57.706837 #18775]  INFO -- : Started GET "/sales?utf8=&sale_ym_from=201503&sale_ym_to=201503&a_group=on&button=" for 192.168.33.1 at 2015-07-12 02:57:57 +0000
I, [2015-07-12T02:57:57.830467 #18775]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T02:57:57.830658 #18775]  INFO -- :   Parameters: {"utf8"=>"", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"on", "button"=>""}
D, [2015-07-12T02:57:57.832179 #18775] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T02:57:57.833913 #18775] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=&sale_ym_from=201503&sale_ym_to=201503&a_group=on&button="], ["action", ""], ["parameters", "{\"utf8\"=>\"\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 02:57:57.832442"], ["updated_at", "2015-07-12 02:57:57.832442"]]
D, [2015-07-12T02:57:57.837111 #18775] DEBUG -- :   [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T02:57:57.842146 #18775] DEBUG -- :   [1m[35mPlan Load (4.3ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T02:57:57.844746 #18775] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T02:57:58.415350 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (487.8ms)
I, [2015-07-12T02:57:58.416884 #18775]  INFO -- : Completed 200 OK in 586ms (Views: 571.6ms | ActiveRecord: 7.8ms)
I, [2015-07-12T02:58:03.706938 #18775]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436669847649" for 192.168.33.1 at 2015-07-12 02:58:03 +0000
I, [2015-07-12T02:58:03.801927 #18775]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T02:58:03.801977 #18775]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436669847649"}
I, [2015-07-12T02:58:04.072160 #18775]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T02:58:04.073104 #18775]  INFO -- : Completed 200 OK in 271ms (Views: 270.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T02:58:04.165122 #18775]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 02:58:04 +0000
I, [2015-07-12T02:58:04.272838 #18775]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T02:58:04.273084 #18775]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T02:58:04.274647 #18775] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T02:58:04.275974 #18775] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 02:58:04.274818"], ["updated_at", "2015-07-12 02:58:04.274818"]]
D, [2015-07-12T02:58:04.278621 #18775] DEBUG -- :   [1m[35m (2.1ms)[0m  COMMIT
D, [2015-07-12T02:58:04.283717 #18775] DEBUG -- :   [1m[36mPlan Load (4.3ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T02:58:04.285922 #18775] DEBUG -- :   [1m[35m (0.3ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T02:58:04.704872 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (345.8ms)
I, [2015-07-12T02:58:04.706192 #18775]  INFO -- : Completed 200 OK in 433ms (Views: 419.6ms | ActiveRecord: 7.1ms)
I, [2015-07-12T02:59:50.688657 #18775]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436669853846" for 192.168.33.1 at 2015-07-12 02:59:50 +0000
I, [2015-07-12T02:59:50.791261 #18775]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T02:59:50.791642 #18775]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436669853846"}
I, [2015-07-12T02:59:51.089075 #18775]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T02:59:51.089940 #18775]  INFO -- : Completed 200 OK in 298ms (Views: 297.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T02:59:51.143015 #18775]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 02:59:51 +0000
I, [2015-07-12T02:59:51.247962 #18775]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T02:59:51.248187 #18775]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T02:59:51.249337 #18775] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T02:59:51.251121 #18775] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 02:59:51.249628"], ["updated_at", "2015-07-12 02:59:51.249628"]]
D, [2015-07-12T02:59:51.254623 #18775] DEBUG -- :   [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T02:59:51.259750 #18775] DEBUG -- :   [1m[35mPlan Load (4.4ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T02:59:51.263246 #18775] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T02:59:51.695150 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (355.0ms)
I, [2015-07-12T02:59:51.696450 #18775]  INFO -- : Completed 200 OK in 448ms (Views: 432.6ms | ActiveRecord: 8.1ms)
I, [2015-07-12T03:02:23.313298 #18775]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436669959622" for 192.168.33.1 at 2015-07-12 03:02:23 +0000
I, [2015-07-12T03:02:23.412629 #18775]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:02:23.412847 #18775]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436669959622"}
I, [2015-07-12T03:02:23.681227 #18775]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:02:23.682123 #18775]  INFO -- : Completed 200 OK in 269ms (Views: 268.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:02:23.777001 #18775]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=on&button=" for 192.168.33.1 at 2015-07-12 03:02:23 +0000
I, [2015-07-12T03:02:23.883864 #18775]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:02:23.884158 #18775]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"on", "button"=>""}
D, [2015-07-12T03:02:23.885945 #18775] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T03:02:23.887605 #18775] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:02:23.886262"], ["updated_at", "2015-07-12 03:02:23.886262"]]
D, [2015-07-12T03:02:23.890419 #18775] DEBUG -- :   [1m[35m (1.9ms)[0m  COMMIT
D, [2015-07-12T03:02:23.896155 #18775] DEBUG -- :   [1m[36mPlan Load (4.5ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:02:23.898931 #18775] DEBUG -- :   [1m[35m (0.6ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T03:02:24.456310 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (470.5ms)
I, [2015-07-12T03:02:24.458333 #18775]  INFO -- : Completed 200 OK in 574ms (Views: 558.7ms | ActiveRecord: 7.3ms)
I, [2015-07-12T03:03:58.131960 #18775]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436670110610" for 192.168.33.1 at 2015-07-12 03:03:58 +0000
I, [2015-07-12T03:03:58.229052 #18775]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:03:58.229296 #18775]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436670110610"}
I, [2015-07-12T03:03:58.500881 #18775]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:03:58.501713 #18775]  INFO -- : Completed 200 OK in 272ms (Views: 271.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:03:58.593255 #18775]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:03:58 +0000
I, [2015-07-12T03:03:58.687846 #18775]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:03:58.688080 #18775]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"on", "button"=>""}
D, [2015-07-12T03:03:58.689705 #18775] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:03:58.691098 #18775] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"b_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:03:58.689952"], ["updated_at", "2015-07-12 03:03:58.689952"]]
D, [2015-07-12T03:03:58.694298 #18775] DEBUG -- :   [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:03:58.699219 #18775] DEBUG -- :   [1m[35mPlan Load (4.2ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:03:58.702290 #18775] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T03:03:59.182376 #18775]  INFO -- :   Rendered sales/index.html.erb within layouts/application (403.7ms)
I, [2015-07-12T03:03:59.183599 #18775]  INFO -- : Completed 200 OK in 495ms (Views: 480.6ms | ActiveRecord: 7.5ms)
I, [2015-07-12T03:10:14.294996 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:10:14 +0000
I, [2015-07-12T03:10:14.432053 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:10:14.432327 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"on", "button"=>""}
I, [2015-07-12T03:10:14.452360 #19751]  INFO -- : Completed 500 Internal Server Error in 20ms
F, [2015-07-12T03:10:14.454090 #19751] FATAL -- : 
ActiveRecord::PreparedStatementInvalid (wrong number of bind variables (3 for 2) in: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= ? and usplrepr.plan_ym <= ? group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid):
  app/controllers/sales_controller.rb:149:in `index'


I, [2015-07-12T03:14:57.838988 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:14:57 +0000
I, [2015-07-12T03:14:58.197739 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:14:58.197926 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"on", "button"=>""}
I, [2015-07-12T03:14:58.202192 #19751]  INFO -- : Completed 500 Internal Server Error in 4ms
F, [2015-07-12T03:14:58.206570 #19751] FATAL -- : 
NameError (undefined local variable or method `strsqql' for #<SalesController:0x007f9e78f17750>):
  app/controllers/sales_controller.rb:110:in `index'


I, [2015-07-12T03:15:13.805351 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:15:13 +0000
I, [2015-07-12T03:15:14.143594 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:15:14.143930 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"on", "button"=>""}
D, [2015-07-12T03:15:14.175987 #19751] DEBUG -- :   [1m[36mPlan Load (7.0ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:15:14.225463 #19751] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T03:15:14.718993 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (413.3ms)
I, [2015-07-12T03:15:14.722880 #19751]  INFO -- : Completed 200 OK in 579ms (Views: 495.9ms | ActiveRecord: 11.5ms)
I, [2015-07-12T03:18:54.905534 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:18:54 +0000
I, [2015-07-12T03:18:55.265931 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:18:55.266216 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"on", "button"=>""}
I, [2015-07-12T03:18:55.270228 #19751]  INFO -- : Completed 500 Internal Server Error in 4ms
F, [2015-07-12T03:18:55.273729 #19751] FATAL -- : 
NameError (undefined local variable or method `params_group' for #<SalesController:0x007f9e794a0910>):
  app/controllers/sales_controller.rb:111:in `index'


I, [2015-07-12T03:19:22.462183 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:19:22 +0000
I, [2015-07-12T03:19:22.814438 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:19:22.815055 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"on", "button"=>""}
D, [2015-07-12T03:19:22.845467 #19751] DEBUG -- :   [1m[36mPlan Load (2.0ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group == 'A'group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
E, [2015-07-12T03:19:22.845826 #19751] ERROR -- : PG::UndefinedFunction: ERROR:  operator does not exist: character varying == unknown
LINE 57: ...d usplrepr.plan_ym <= '201503' and usplrepr.group == 'A'grou...
                                                              ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group == 'A'group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
I, [2015-07-12T03:19:22.846401 #19751]  INFO -- : Completed 500 Internal Server Error in 31ms
F, [2015-07-12T03:19:22.847868 #19751] FATAL -- : 
ActiveRecord::StatementInvalid (PG::UndefinedFunction: ERROR:  operator does not exist: character varying == unknown
LINE 57: ...d usplrepr.plan_ym <= '201503' and usplrepr.group == 'A'grou...
                                                              ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group == 'A'group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid):
  app/controllers/sales_controller.rb:155:in `index'


I, [2015-07-12T03:19:35.651018 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:19:35 +0000
I, [2015-07-12T03:19:36.001412 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:19:36.001977 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"on", "button"=>""}
D, [2015-07-12T03:19:36.028951 #19751] DEBUG -- :   [1m[35mPlan Load (1.7ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group == 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
E, [2015-07-12T03:19:36.029314 #19751] ERROR -- : PG::UndefinedFunction: ERROR:  operator does not exist: character varying == unknown
LINE 57: ...d usplrepr.plan_ym <= '201503' and usplrepr.group == 'A' gro...
                                                              ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group == 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
I, [2015-07-12T03:19:36.029662 #19751]  INFO -- : Completed 500 Internal Server Error in 27ms
F, [2015-07-12T03:19:36.030956 #19751] FATAL -- : 
ActiveRecord::StatementInvalid (PG::UndefinedFunction: ERROR:  operator does not exist: character varying == unknown
LINE 57: ...d usplrepr.plan_ym <= '201503' and usplrepr.group == 'A' gro...
                                                              ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group == 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid):
  app/controllers/sales_controller.rb:155:in `index'


I, [2015-07-12T03:20:03.913102 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:20:03 +0000
I, [2015-07-12T03:20:04.283906 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:20:04.283967 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"on", "button"=>""}
D, [2015-07-12T03:20:04.316008 #19751] DEBUG -- :   [1m[36mPlan Load (5.0ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:20:04.346153 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T03:20:04.458876 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.3ms)
I, [2015-07-12T03:20:04.461758 #19751]  INFO -- : Completed 200 OK in 178ms (Views: 114.9ms | ActiveRecord: 6.3ms)
I, [2015-07-12T03:20:12.821907 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671158388" for 192.168.33.1 at 2015-07-12 03:20:12 +0000
I, [2015-07-12T03:20:12.924324 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:20:12.924645 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671158388"}
I, [2015-07-12T03:20:13.202034 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.3ms)
I, [2015-07-12T03:20:13.203968 #19751]  INFO -- : Completed 200 OK in 279ms (Views: 278.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:20:13.287203 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=on&button=" for 192.168.33.1 at 2015-07-12 03:20:13 +0000
I, [2015-07-12T03:20:13.391647 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:20:13.391924 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "a_group"=>"on", "button"=>""}
D, [2015-07-12T03:20:13.424294 #19751] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:20:13.437372 #19751] DEBUG -- :   [1m[35mSQL (0.4ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:20:13.424790"], ["updated_at", "2015-07-12 03:20:13.424790"]]
D, [2015-07-12T03:20:13.440958 #19751] DEBUG -- :   [1m[36m (2.8ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:20:13.445165 #19751] DEBUG -- :   [1m[35mPlan Load (3.4ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:20:13.448477 #19751] DEBUG -- :   [1m[36m (0.6ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T03:20:13.584427 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (35.9ms)
I, [2015-07-12T03:20:13.585958 #19751]  INFO -- : Completed 200 OK in 194ms (Views: 136.8ms | ActiveRecord: 9.7ms)
I, [2015-07-12T03:20:28.267117 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671167404" for 192.168.33.1 at 2015-07-12 03:20:28 +0000
I, [2015-07-12T03:20:28.360010 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:20:28.360250 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671167404"}
I, [2015-07-12T03:20:28.625965 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:20:28.626681 #19751]  INFO -- : Completed 200 OK in 266ms (Views: 265.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:20:28.711825 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=on&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:20:28 +0000
I, [2015-07-12T03:20:28.801532 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:20:28.801691 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "a_group"=>"on", "b_group"=>"on", "button"=>""}
D, [2015-07-12T03:20:28.804084 #19751] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T03:20:28.805695 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=on&b_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"on\", \"b_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:20:28.804394"], ["updated_at", "2015-07-12 03:20:28.804394"]]
D, [2015-07-12T03:20:28.807362 #19751] DEBUG -- :   [1m[35m (1.0ms)[0m  COMMIT
D, [2015-07-12T03:20:28.812344 #19751] DEBUG -- :   [1m[36mPlan Load (4.3ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'A or B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:20:28.814597 #19751] DEBUG -- :   [1m[35m (0.7ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')
I, [2015-07-12T03:20:28.913627 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (27.7ms)
I, [2015-07-12T03:20:28.915228 #19751]  INFO -- : Completed 200 OK in 113ms (Views: 100.0ms | ActiveRecord: 6.5ms)
I, [2015-07-12T03:20:31.351909 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671182550" for 192.168.33.1 at 2015-07-12 03:20:31 +0000
I, [2015-07-12T03:20:31.459367 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:20:31.459637 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671182550"}
I, [2015-07-12T03:20:31.760607 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:20:31.761727 #19751]  INFO -- : Completed 200 OK in 302ms (Views: 301.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:20:31.888909 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=on&button=" for 192.168.33.1 at 2015-07-12 03:20:31 +0000
I, [2015-07-12T03:20:31.983286 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:20:31.983573 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "a_group"=>"on", "button"=>""}
D, [2015-07-12T03:20:31.986157 #19751] DEBUG -- :   [1m[36m (0.8ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:20:31.988192 #19751] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:20:31.986963"], ["updated_at", "2015-07-12 03:20:31.986963"]]
D, [2015-07-12T03:20:31.991984 #19751] DEBUG -- :   [1m[36m (3.1ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:20:31.995437 #19751] DEBUG -- :   [1m[35mPlan Load (2.8ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:20:32.016331 #19751] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')[0m
I, [2015-07-12T03:20:32.174405 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (81.4ms)
I, [2015-07-12T03:20:32.175934 #19751]  INFO -- : Completed 200 OK in 192ms (Views: 159.1ms | ActiveRecord: 8.1ms)
I, [2015-07-12T03:20:37.299714 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671185772" for 192.168.33.1 at 2015-07-12 03:20:37 +0000
I, [2015-07-12T03:20:37.398634 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:20:37.398836 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671185772"}
I, [2015-07-12T03:20:37.663950 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:20:37.664633 #19751]  INFO -- : Completed 200 OK in 266ms (Views: 265.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:20:37.824306 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&button=" for 192.168.33.1 at 2015-07-12 03:20:37 +0000
I, [2015-07-12T03:20:37.929209 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:20:37.929404 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "button"=>""}
D, [2015-07-12T03:20:37.931276 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T03:20:37.932339 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:20:37.931543"], ["updated_at", "2015-07-12 03:20:37.931543"]]
D, [2015-07-12T03:20:37.934535 #19751] DEBUG -- :   [1m[35m (1.6ms)[0m  COMMIT
I, [2015-07-12T03:20:37.935993 #19751]  INFO -- : Completed 500 Internal Server Error in 6ms
F, [2015-07-12T03:20:37.936779 #19751] FATAL -- : 
ActiveRecord::PreparedStatementInvalid (wrong number of bind variables (3 for 2) in: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= ? and usplrepr.plan_ym <= ? group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid):
  app/controllers/sales_controller.rb:155:in `index'


I, [2015-07-12T03:21:55.166113 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671185773" for 192.168.33.1 at 2015-07-12 03:21:55 +0000
I, [2015-07-12T03:21:55.525085 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:21:55.525378 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671185773"}
I, [2015-07-12T03:21:55.796664 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:21:55.797768 #19751]  INFO -- : Completed 200 OK in 272ms (Views: 271.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:21:55.822718 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=on&button=" for 192.168.33.1 at 2015-07-12 03:21:55 +0000
I, [2015-07-12T03:21:55.930971 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:21:55.931264 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "a_group"=>"on", "button"=>""}
D, [2015-07-12T03:21:55.957612 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:21:55.959098 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:21:55.957981"], ["updated_at", "2015-07-12 03:21:55.957981"]]
D, [2015-07-12T03:21:55.962829 #19751] DEBUG -- :   [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:21:55.989491 #19751] DEBUG -- :   [1m[35mPlan Load (4.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:21:56.026148 #19751] DEBUG -- :   [1m[36m (0.3ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')[0m
I, [2015-07-12T03:21:56.154049 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (53.6ms)
I, [2015-07-12T03:21:56.155850 #19751]  INFO -- : Completed 200 OK in 224ms (Views: 129.0ms | ActiveRecord: 11.2ms)
I, [2015-07-12T03:23:02.106147 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671268800" for 192.168.33.1 at 2015-07-12 03:23:02 +0000
I, [2015-07-12T03:23:02.475073 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:23:02.475339 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671268800"}
I, [2015-07-12T03:23:02.738056 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:23:02.739028 #19751]  INFO -- : Completed 200 OK in 263ms (Views: 262.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:23:02.790159 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=on&button=" for 192.168.33.1 at 2015-07-12 03:23:02 +0000
I, [2015-07-12T03:23:02.903294 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:23:02.903589 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "a_group"=>"on", "button"=>""}
D, [2015-07-12T03:23:02.931500 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T03:23:02.933638 #19751] DEBUG -- :   [1m[36mSQL (0.9ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:23:02.931885"], ["updated_at", "2015-07-12 03:23:02.931885"]]
D, [2015-07-12T03:23:02.937051 #19751] DEBUG -- :   [1m[35m (2.8ms)[0m  COMMIT
D, [2015-07-12T03:23:02.962409 #19751] DEBUG -- :   [1m[36mPlan Load (2.7ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:23:02.988912 #19751] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')
I, [2015-07-12T03:23:03.096896 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.5ms)
I, [2015-07-12T03:23:03.098518 #19751]  INFO -- : Completed 200 OK in 195ms (Views: 108.9ms | ActiveRecord: 9.8ms)
I, [2015-07-12T03:23:06.153029 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671334971" for 192.168.33.1 at 2015-07-12 03:23:06 +0000
I, [2015-07-12T03:23:06.245157 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:23:06.245402 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671334971"}
I, [2015-07-12T03:23:06.509277 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:23:06.510185 #19751]  INFO -- : Completed 200 OK in 265ms (Views: 263.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:23:06.561976 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=on&button=" for 192.168.33.1 at 2015-07-12 03:23:06 +0000
I, [2015-07-12T03:23:06.662389 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:23:06.662499 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "a_group"=>"on", "button"=>""}
D, [2015-07-12T03:23:06.664455 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:23:06.667197 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:23:06.664551"], ["updated_at", "2015-07-12 03:23:06.664551"]]
D, [2015-07-12T03:23:06.669728 #19751] DEBUG -- :   [1m[36m (1.9ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:23:06.673559 #19751] DEBUG -- :   [1m[35mPlan Load (3.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:23:06.675455 #19751] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')[0m
I, [2015-07-12T03:23:06.774143 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (26.1ms)
I, [2015-07-12T03:23:06.775773 #19751]  INFO -- : Completed 200 OK in 113ms (Views: 99.6ms | ActiveRecord: 5.8ms)
I, [2015-07-12T03:23:08.570990 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671338604" for 192.168.33.1 at 2015-07-12 03:23:08 +0000
I, [2015-07-12T03:23:08.663556 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:23:08.663761 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671338604"}
I, [2015-07-12T03:23:08.927948 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:23:08.929158 #19751]  INFO -- : Completed 200 OK in 265ms (Views: 264.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:23:09.021916 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&b_group=true&button=" for 192.168.33.1 at 2015-07-12 03:23:09 +0000
I, [2015-07-12T03:23:09.111917 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:23:09.112263 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "b_group"=>"true", "button"=>""}
D, [2015-07-12T03:23:09.119617 #19751] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T03:23:09.121284 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&b_group=true&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"b_group\"=>\"true\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:23:09.119966"], ["updated_at", "2015-07-12 03:23:09.119966"]]
D, [2015-07-12T03:23:09.123834 #19751] DEBUG -- :   [1m[35m (1.9ms)[0m  COMMIT
D, [2015-07-12T03:23:09.129107 #19751] DEBUG -- :   [1m[36mPlan Load (4.7ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:23:09.139533 #19751] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')
I, [2015-07-12T03:23:09.266868 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (53.1ms)
I, [2015-07-12T03:23:09.268641 #19751]  INFO -- : Completed 200 OK in 156ms (Views: 128.6ms | ActiveRecord: 8.1ms)
I, [2015-07-12T03:25:38.588852 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&b_group=true&button=" for 192.168.33.1 at 2015-07-12 03:25:38 +0000
I, [2015-07-12T03:25:38.927242 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:25:38.927504 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "b_group"=>"true", "button"=>""}
D, [2015-07-12T03:25:38.957368 #19751] DEBUG -- :   [1m[36mPlan Load (3.4ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:25:39.000964 #19751] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')
I, [2015-07-12T03:25:39.127620 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (50.9ms)
I, [2015-07-12T03:25:39.130474 #19751]  INFO -- : Completed 200 OK in 203ms (Views: 128.8ms | ActiveRecord: 6.6ms)
I, [2015-07-12T03:25:42.094150 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671489190" for 192.168.33.1 at 2015-07-12 03:25:42 +0000
I, [2015-07-12T03:25:42.211247 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:25:42.211515 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671489190"}
I, [2015-07-12T03:25:42.477702 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:25:42.478784 #19751]  INFO -- : Completed 200 OK in 267ms (Views: 266.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:25:42.569008 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=&button=" for 192.168.33.1 at 2015-07-12 03:25:42 +0000
I, [2015-07-12T03:25:42.667615 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:25:42.667847 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "a_group"=>"", "button"=>""}
D, [2015-07-12T03:25:42.694452 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:25:42.696139 #19751] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:25:42.694845"], ["updated_at", "2015-07-12 03:25:42.694845"]]
D, [2015-07-12T03:25:42.699198 #19751] DEBUG -- :   [1m[36m (2.3ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T03:25:42.700668 #19751]  INFO -- : Completed 500 Internal Server Error in 32ms
F, [2015-07-12T03:25:42.701860 #19751] FATAL -- : 
ActiveRecord::PreparedStatementInvalid (wrong number of bind variables (3 for 2) in: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= ? and usplrepr.plan_ym <= ? group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid):
  app/controllers/sales_controller.rb:160:in `index'


I, [2015-07-12T03:25:47.835426 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671489191" for 192.168.33.1 at 2015-07-12 03:25:47 +0000
I, [2015-07-12T03:25:47.934372 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:25:47.934609 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671489191"}
I, [2015-07-12T03:25:48.198915 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:25:48.199683 #19751]  INFO -- : Completed 200 OK in 265ms (Views: 264.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:25:48.260056 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:25:48 +0000
I, [2015-07-12T03:25:48.363556 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:25:48.363744 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "b_group"=>"on", "button"=>""}
D, [2015-07-12T03:25:48.365223 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T03:25:48.366652 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&b_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"b_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:25:48.365513"], ["updated_at", "2015-07-12 03:25:48.365513"]]
D, [2015-07-12T03:25:48.369845 #19751] DEBUG -- :   [1m[35m (2.5ms)[0m  COMMIT
D, [2015-07-12T03:25:48.374318 #19751] DEBUG -- :   [1m[36mPlan Load (3.7ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:25:48.375873 #19751] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')
I, [2015-07-12T03:25:48.499102 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (50.6ms)
I, [2015-07-12T03:25:48.500575 #19751]  INFO -- : Completed 200 OK in 137ms (Views: 124.0ms | ActiveRecord: 6.9ms)
I, [2015-07-12T03:26:05.221393 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671498444" for 192.168.33.1 at 2015-07-12 03:26:05 +0000
I, [2015-07-12T03:26:05.561861 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:26:05.562133 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671498444"}
I, [2015-07-12T03:26:05.825161 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:26:05.826106 #19751]  INFO -- : Completed 200 OK in 264ms (Views: 263.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:26:05.917402 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=&button=" for 192.168.33.1 at 2015-07-12 03:26:05 +0000
I, [2015-07-12T03:26:06.028101 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:26:06.028422 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "a_group"=>"", "button"=>""}
D, [2015-07-12T03:26:06.059690 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:26:06.062203 #19751] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:26:06.060009"], ["updated_at", "2015-07-12 03:26:06.060009"]]
D, [2015-07-12T03:26:06.064482 #19751] DEBUG -- :   [1m[36m (1.5ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T03:26:06.093255 #19751]  INFO -- : Completed 500 Internal Server Error in 64ms
F, [2015-07-12T03:26:06.095219 #19751] FATAL -- : 
ActiveRecord::PreparedStatementInvalid (wrong number of bind variables (3 for 2) in: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= ? and usplrepr.plan_ym <= ? group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid):
  app/controllers/sales_controller.rb:160:in `index'


I, [2015-07-12T03:48:56.405207 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436671498445" for 192.168.33.1 at 2015-07-12 03:48:56 +0000
I, [2015-07-12T03:48:56.499444 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:48:56.499540 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436671498445"}
I, [2015-07-12T03:48:56.777754 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:48:56.779071 #19751]  INFO -- : Completed 200 OK in 279ms (Views: 277.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:48:56.845314 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:48:56 +0000
I, [2015-07-12T03:48:56.942189 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:48:56.942464 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "a_group"=>"", "b_group"=>"on", "button"=>""}
D, [2015-07-12T03:48:56.945029 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T03:48:56.946824 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=&b_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"\", \"b_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:48:56.945316"], ["updated_at", "2015-07-12 03:48:56.945316"]]
D, [2015-07-12T03:48:56.949819 #19751] DEBUG -- :   [1m[35m (2.4ms)[0m  COMMIT
D, [2015-07-12T03:48:56.954897 #19751] DEBUG -- :   [1m[36mPlan Load (4.2ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:48:56.994886 #19751] DEBUG -- :   [1m[35m (0.3ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')
I, [2015-07-12T03:48:57.147443 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (77.4ms)
I, [2015-07-12T03:48:57.149609 #19751]  INFO -- : Completed 200 OK in 207ms (Views: 154.0ms | ActiveRecord: 9.0ms)
I, [2015-07-12T03:49:04.428726 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436672871074" for 192.168.33.1 at 2015-07-12 03:49:04 +0000
I, [2015-07-12T03:49:04.522606 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:49:04.522858 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436672871074"}
I, [2015-07-12T03:49:04.786092 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:49:04.787090 #19751]  INFO -- : Completed 200 OK in 264ms (Views: 263.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:49:04.875965 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=&button=" for 192.168.33.1 at 2015-07-12 03:49:04 +0000
I, [2015-07-12T03:49:04.967063 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:49:04.967271 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "a_group"=>"", "button"=>""}
D, [2015-07-12T03:49:04.969457 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:49:04.970565 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:49:04.969714"], ["updated_at", "2015-07-12 03:49:04.969714"]]
D, [2015-07-12T03:49:04.974216 #19751] DEBUG -- :   [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T03:49:04.974929 #19751]  INFO -- : Completed 500 Internal Server Error in 8ms
F, [2015-07-12T03:49:04.975776 #19751] FATAL -- : 
ActiveRecord::PreparedStatementInvalid (wrong number of bind variables (3 for 2) in: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= ? and usplrepr.plan_ym <= ? group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid):
  app/controllers/sales_controller.rb:160:in `index'


I, [2015-07-12T03:49:09.341014 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436672871075" for 192.168.33.1 at 2015-07-12 03:49:09 +0000
I, [2015-07-12T03:49:09.438169 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:49:09.438197 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436672871075"}
I, [2015-07-12T03:49:09.700919 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T03:49:09.701645 #19751]  INFO -- : Completed 200 OK in 263ms (Views: 262.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:49:09.765036 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:49:09 +0000
I, [2015-07-12T03:49:09.859468 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:49:09.859717 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "b_group"=>"on", "button"=>""}
D, [2015-07-12T03:49:09.861258 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T03:49:09.863196 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&b_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"b_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:49:09.861526"], ["updated_at", "2015-07-12 03:49:09.861526"]]
D, [2015-07-12T03:49:09.866928 #19751] DEBUG -- :   [1m[35m (2.5ms)[0m  COMMIT
D, [2015-07-12T03:49:09.871864 #19751] DEBUG -- :   [1m[36mPlan Load (4.1ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:49:09.873993 #19751] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')
I, [2015-07-12T03:49:09.999199 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (51.6ms)
I, [2015-07-12T03:49:10.001446 #19751]  INFO -- : Completed 200 OK in 142ms (Views: 127.0ms | ActiveRecord: 7.4ms)
I, [2015-07-12T03:50:34.369459 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436672883779" for 192.168.33.1 at 2015-07-12 03:50:34 +0000
I, [2015-07-12T03:50:34.462631 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:50:34.462802 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436672883779"}
I, [2015-07-12T03:50:34.763626 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:50:34.764610 #19751]  INFO -- : Completed 200 OK in 302ms (Views: 301.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:50:34.854926 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&button=" for 192.168.33.1 at 2015-07-12 03:50:34 +0000
I, [2015-07-12T03:50:34.947354 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:50:34.947562 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "button"=>""}
D, [2015-07-12T03:50:34.949416 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:50:34.951632 #19751] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:50:34.950412"], ["updated_at", "2015-07-12 03:50:34.950412"]]
D, [2015-07-12T03:50:34.954857 #19751] DEBUG -- :   [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T03:50:34.955459 #19751]  INFO -- : Completed 500 Internal Server Error in 8ms
F, [2015-07-12T03:50:34.956940 #19751] FATAL -- : 
ActiveRecord::PreparedStatementInvalid (wrong number of bind variables (3 for 2) in: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= ? and usplrepr.plan_ym <= ? group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid):
  app/controllers/sales_controller.rb:160:in `index'


I, [2015-07-12T03:50:40.492214 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436672883780" for 192.168.33.1 at 2015-07-12 03:50:40 +0000
I, [2015-07-12T03:50:40.592105 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:50:40.592154 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436672883780"}
I, [2015-07-12T03:50:40.865329 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T03:50:40.866114 #19751]  INFO -- : Completed 200 OK in 274ms (Views: 273.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:50:40.937027 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=&b_group=on&button=" for 192.168.33.1 at 2015-07-12 03:50:40 +0000
I, [2015-07-12T03:50:41.042462 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:50:41.042669 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201507", "a_group"=>"", "b_group"=>"on", "button"=>""}
D, [2015-07-12T03:50:41.044953 #19751] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T03:50:41.046158 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201507&a_group=&b_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"\", \"b_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:50:41.045020"], ["updated_at", "2015-07-12 03:50:41.045020"]]
D, [2015-07-12T03:50:41.049275 #19751] DEBUG -- :   [1m[35m (2.4ms)[0m  COMMIT
D, [2015-07-12T03:50:41.053874 #19751] DEBUG -- :   [1m[36mPlan Load (3.8ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:50:41.056026 #19751] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201507')
I, [2015-07-12T03:50:41.178677 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (51.7ms)
I, [2015-07-12T03:50:41.180852 #19751]  INFO -- : Completed 200 OK in 138ms (Views: 124.2ms | ActiveRecord: 7.1ms)
I, [2015-07-12T03:50:43.871685 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=&_=1436672973908" for 192.168.33.1 at 2015-07-12 03:50:43 +0000
I, [2015-07-12T03:50:43.966239 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:50:43.966470 #19751]  INFO -- :   Parameters: {"action_name"=>"", "_"=>"1436672973908"}
I, [2015-07-12T03:50:44.268695 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:50:44.269649 #19751]  INFO -- : Completed 200 OK in 303ms (Views: 299.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:50:45.221167 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436672973909" for 192.168.33.1 at 2015-07-12 03:50:45 +0000
I, [2015-07-12T03:50:45.314932 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:50:45.314980 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436672973909"}
I, [2015-07-12T03:50:45.581915 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T03:50:45.582827 #19751]  INFO -- : Completed 200 OK in 268ms (Views: 267.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:50:45.700184 #19751]  INFO -- : Started GET "/sales?utf8=&sale_ym_from=&sale_ym_to=&button=" for 192.168.33.1 at 2015-07-12 03:50:45 +0000
I, [2015-07-12T03:50:45.804051 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:50:45.804160 #19751]  INFO -- :   Parameters: {"utf8"=>"", "sale_ym_from"=>"", "sale_ym_to"=>"", "button"=>""}
D, [2015-07-12T03:50:45.805748 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:50:45.807258 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=&sale_ym_from=&sale_ym_to=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"\", \"sale_ym_from\"=>\"\", \"sale_ym_to\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:50:45.806047"], ["updated_at", "2015-07-12 03:50:45.806047"]]
D, [2015-07-12T03:50:45.810544 #19751] DEBUG -- :   [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T03:50:45.811291 #19751]  INFO -- : Completed 500 Internal Server Error in 7ms
F, [2015-07-12T03:50:45.812185 #19751] FATAL -- : 
ActiveRecord::PreparedStatementInvalid (wrong number of bind variables (3 for 2) in: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= ? and usplrepr.plan_ym <= ? group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid):
  app/controllers/sales_controller.rb:160:in `index'


I, [2015-07-12T03:52:04.918566 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436672973910" for 192.168.33.1 at 2015-07-12 03:52:04 +0000
I, [2015-07-12T03:52:05.316366 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:52:05.317665 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436672973910"}
I, [2015-07-12T03:52:05.595733 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:52:05.596732 #19751]  INFO -- : Completed 200 OK in 279ms (Views: 277.8ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:52:05.660817 #19751]  INFO -- : Started GET "/sales?utf8=&sale_ym_from=&sale_ym_to=&button=" for 192.168.33.1 at 2015-07-12 03:52:05 +0000
I, [2015-07-12T03:52:05.772692 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:52:05.772862 #19751]  INFO -- :   Parameters: {"utf8"=>"", "sale_ym_from"=>"", "sale_ym_to"=>"", "button"=>""}
D, [2015-07-12T03:52:05.804310 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T03:52:05.805693 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=&sale_ym_from=&sale_ym_to=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"\", \"sale_ym_from\"=>\"\", \"sale_ym_to\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:52:05.804695"], ["updated_at", "2015-07-12 03:52:05.804695"]]
D, [2015-07-12T03:52:05.810013 #19751] DEBUG -- :   [1m[35m (3.2ms)[0m  COMMIT
I, [2015-07-12T03:52:05.814127 #19751]  INFO -- : Completed 500 Internal Server Error in 41ms
F, [2015-07-12T03:52:05.818412 #19751] FATAL -- : 
NameError (undefined local variable or method `params_group' for #<SalesController:0x007f9e78f7d0f0>):
  app/controllers/sales_controller.rb:161:in `index'


I, [2015-07-12T03:52:30.613827 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436672973911" for 192.168.33.1 at 2015-07-12 03:52:30 +0000
I, [2015-07-12T03:52:30.947483 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:52:30.948045 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436672973911"}
I, [2015-07-12T03:52:31.216809 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:52:31.217847 #19751]  INFO -- : Completed 200 OK in 269ms (Views: 269.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:52:31.281457 #19751]  INFO -- : Started GET "/sales?utf8=&sale_ym_from=&sale_ym_to=&button=" for 192.168.33.1 at 2015-07-12 03:52:31 +0000
I, [2015-07-12T03:52:31.401147 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:52:31.401479 #19751]  INFO -- :   Parameters: {"utf8"=>"", "sale_ym_from"=>"", "sale_ym_to"=>"", "button"=>""}
D, [2015-07-12T03:52:31.435723 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:52:31.437561 #19751] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=&sale_ym_from=&sale_ym_to=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"\", \"sale_ym_from\"=>\"\", \"sale_ym_to\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:52:31.436167"], ["updated_at", "2015-07-12 03:52:31.436167"]]
D, [2015-07-12T03:52:31.440928 #19751] DEBUG -- :   [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:52:31.471355 #19751] DEBUG -- :   [1m[35mPlan Load (6.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '000000' and usplrepr.plan_ym <= '999999' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:52:31.510280 #19751] DEBUG -- :   [1m[36m (0.3ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '000000' and profit_ym <= '999999')[0m
I, [2015-07-12T03:52:31.972881 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (386.4ms)
I, [2015-07-12T03:52:31.974503 #19751]  INFO -- : Completed 200 OK in 573ms (Views: 463.5ms | ActiveRecord: 13.2ms)
I, [2015-07-12T03:52:36.509944 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673083423" for 192.168.33.1 at 2015-07-12 03:52:36 +0000
I, [2015-07-12T03:52:36.611847 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:52:36.612098 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673083423"}
I, [2015-07-12T03:52:36.875109 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:52:36.875933 #19751]  INFO -- : Completed 200 OK in 264ms (Views: 262.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:52:37.009334 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=&sale_ym_to=&a_group=&button=" for 192.168.33.1 at 2015-07-12 03:52:37 +0000
I, [2015-07-12T03:52:37.116596 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:52:37.116651 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"", "sale_ym_to"=>"", "a_group"=>"", "button"=>""}
D, [2015-07-12T03:52:37.119332 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T03:52:37.121739 #19751] DEBUG -- :   [1m[36mSQL (0.8ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=&sale_ym_to=&a_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"\", \"sale_ym_to\"=>\"\", \"a_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:52:37.119675"], ["updated_at", "2015-07-12 03:52:37.119675"]]
D, [2015-07-12T03:52:37.124658 #19751] DEBUG -- :   [1m[35m (2.1ms)[0m  COMMIT
D, [2015-07-12T03:52:37.132038 #19751] DEBUG -- :   [1m[36mPlan Load (6.6ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '000000' and usplrepr.plan_ym <= '999999' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:52:37.135599 #19751] DEBUG -- :   [1m[35m (0.7ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '000000' and profit_ym <= '999999')
I, [2015-07-12T03:52:37.621896 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (400.3ms)
I, [2015-07-12T03:52:37.623653 #19751]  INFO -- : Completed 200 OK in 507ms (Views: 487.2ms | ActiveRecord: 10.2ms)
I, [2015-07-12T03:52:41.442836 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673089008" for 192.168.33.1 at 2015-07-12 03:52:41 +0000
I, [2015-07-12T03:52:41.536211 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:52:41.536212 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673089008"}
I, [2015-07-12T03:52:41.801990 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:52:41.802731 #19751]  INFO -- : Completed 200 OK in 266ms (Views: 265.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:52:41.936043 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=&sale_ym_to=&b_group=&button=" for 192.168.33.1 at 2015-07-12 03:52:41 +0000
I, [2015-07-12T03:52:42.026186 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:52:42.026259 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"", "sale_ym_to"=>"", "b_group"=>"", "button"=>""}
D, [2015-07-12T03:52:42.027807 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:52:42.030121 #19751] DEBUG -- :   [1m[35mSQL (1.1ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=&sale_ym_to=&b_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"\", \"sale_ym_to\"=>\"\", \"b_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:52:42.028003"], ["updated_at", "2015-07-12 03:52:42.028003"]]
D, [2015-07-12T03:52:42.031761 #19751] DEBUG -- :   [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:52:42.038667 #19751] DEBUG -- :   [1m[35mPlan Load (6.2ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '000000' and usplrepr.plan_ym <= '999999' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:52:42.041341 #19751] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '000000' and profit_ym <= '999999')[0m
I, [2015-07-12T03:52:42.514637 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (402.3ms)
I, [2015-07-12T03:52:42.517173 #19751]  INFO -- : Completed 200 OK in 491ms (Views: 475.2ms | ActiveRecord: 8.8ms)
I, [2015-07-12T03:52:46.416693 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673093847" for 192.168.33.1 at 2015-07-12 03:52:46 +0000
I, [2015-07-12T03:52:46.512815 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:52:46.513046 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673093847"}
I, [2015-07-12T03:52:46.790846 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:52:46.791791 #19751]  INFO -- : Completed 200 OK in 279ms (Views: 277.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:52:46.931349 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=&sale_ym_to=&a_group=&b_group=&button=" for 192.168.33.1 at 2015-07-12 03:52:46 +0000
I, [2015-07-12T03:52:47.055205 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:52:47.055454 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"", "sale_ym_to"=>"", "a_group"=>"", "b_group"=>"", "button"=>""}
D, [2015-07-12T03:52:47.057047 #19751] DEBUG -- :   [1m[35m (0.0ms)[0m  BEGIN
D, [2015-07-12T03:52:47.059764 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=&sale_ym_to=&a_group=&b_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"\", \"sale_ym_to\"=>\"\", \"a_group\"=>\"\", \"b_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:52:47.057330"], ["updated_at", "2015-07-12 03:52:47.057330"]]
D, [2015-07-12T03:52:47.063448 #19751] DEBUG -- :   [1m[35m (2.5ms)[0m  COMMIT
D, [2015-07-12T03:52:47.069488 #19751] DEBUG -- :   [1m[36mPlan Load (5.3ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '000000' and usplrepr.plan_ym <= '999999' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:52:47.074514 #19751] DEBUG -- :   [1m[35m (0.7ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '000000' and profit_ym <= '999999')
I, [2015-07-12T03:52:47.567323 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (420.8ms)
I, [2015-07-12T03:52:47.568476 #19751]  INFO -- : Completed 200 OK in 513ms (Views: 493.1ms | ActiveRecord: 8.9ms)
I, [2015-07-12T03:52:55.351737 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673098838" for 192.168.33.1 at 2015-07-12 03:52:55 +0000
I, [2015-07-12T03:52:55.467711 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:52:55.467899 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673098838"}
I, [2015-07-12T03:52:55.747908 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:52:55.748749 #19751]  INFO -- : Completed 200 OK in 281ms (Views: 280.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:52:55.839192 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 03:52:55 +0000
I, [2015-07-12T03:52:55.939587 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:52:55.939758 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T03:52:55.942724 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:52:55.944227 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:52:55.942983"], ["updated_at", "2015-07-12 03:52:55.942983"]]
D, [2015-07-12T03:52:55.947387 #19751] DEBUG -- :   [1m[36m (2.5ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:52:55.952418 #19751] DEBUG -- :   [1m[35mPlan Load (4.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:52:55.956034 #19751] DEBUG -- :   [1m[36m (0.6ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T03:52:56.411425 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (367.5ms)
I, [2015-07-12T03:52:56.412868 #19751]  INFO -- : Completed 200 OK in 473ms (Views: 456.2ms | ActiveRecord: 7.6ms)
I, [2015-07-12T03:52:58.660832 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673107584" for 192.168.33.1 at 2015-07-12 03:52:58 +0000
I, [2015-07-12T03:52:58.754657 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:52:58.754892 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673107584"}
I, [2015-07-12T03:52:59.014596 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:52:59.015649 #19751]  INFO -- : Completed 200 OK in 260ms (Views: 259.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:52:59.147964 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=&button=" for 192.168.33.1 at 2015-07-12 03:52:59 +0000
I, [2015-07-12T03:52:59.244156 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:52:59.244189 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"", "button"=>""}
D, [2015-07-12T03:52:59.245804 #19751] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T03:52:59.247599 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:52:59.246791"], ["updated_at", "2015-07-12 03:52:59.246791"]]
D, [2015-07-12T03:52:59.250649 #19751] DEBUG -- :   [1m[35m (2.0ms)[0m  COMMIT
D, [2015-07-12T03:52:59.255564 #19751] DEBUG -- :   [1m[36mPlan Load (4.2ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:52:59.258219 #19751] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T03:52:59.691711 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (356.6ms)
I, [2015-07-12T03:52:59.693174 #19751]  INFO -- : Completed 200 OK in 449ms (Views: 434.4ms | ActiveRecord: 7.0ms)
I, [2015-07-12T03:53:02.491805 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673110826" for 192.168.33.1 at 2015-07-12 03:53:02 +0000
I, [2015-07-12T03:53:02.586099 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:53:02.586216 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673110826"}
I, [2015-07-12T03:53:02.859755 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:53:02.860758 #19751]  INFO -- : Completed 200 OK in 274ms (Views: 273.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:53:02.994923 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=&button=" for 192.168.33.1 at 2015-07-12 03:53:02 +0000
I, [2015-07-12T03:53:03.091400 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:53:03.091641 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"", "button"=>""}
D, [2015-07-12T03:53:03.093995 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:53:03.094817 #19751] DEBUG -- :   [1m[35mSQL (0.0ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"b_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:53:03.094029"], ["updated_at", "2015-07-12 03:53:03.094029"]]
D, [2015-07-12T03:53:03.096386 #19751] DEBUG -- :   [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:53:03.102551 #19751] DEBUG -- :   [1m[35mPlan Load (5.5ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:53:03.106561 #19751] DEBUG -- :   [1m[36m (0.6ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T03:53:03.530100 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (350.1ms)
I, [2015-07-12T03:53:03.531954 #19751]  INFO -- : Completed 200 OK in 440ms (Views: 424.7ms | ActiveRecord: 7.1ms)
I, [2015-07-12T03:53:07.527076 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673114623" for 192.168.33.1 at 2015-07-12 03:53:07 +0000
I, [2015-07-12T03:53:07.620944 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:53:07.621194 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673114623"}
I, [2015-07-12T03:53:07.893129 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:53:07.893954 #19751]  INFO -- : Completed 200 OK in 272ms (Views: 271.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:53:08.029387 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=&b_group=&button=" for 192.168.33.1 at 2015-07-12 03:53:08 +0000
I, [2015-07-12T03:53:08.123353 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:53:08.123583 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"", "b_group"=>"", "button"=>""}
D, [2015-07-12T03:53:08.125434 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T03:53:08.126982 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=&b_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"\", \"b_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:53:08.125703"], ["updated_at", "2015-07-12 03:53:08.125703"]]
D, [2015-07-12T03:53:08.129712 #19751] DEBUG -- :   [1m[35m (2.1ms)[0m  COMMIT
D, [2015-07-12T03:53:08.135575 #19751] DEBUG -- :   [1m[36mPlan Load (5.0ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:53:08.138387 #19751] DEBUG -- :   [1m[35m (0.6ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T03:53:08.617866 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (405.5ms)
I, [2015-07-12T03:53:08.619409 #19751]  INFO -- : Completed 200 OK in 496ms (Views: 479.7ms | ActiveRecord: 8.1ms)
I, [2015-07-12T03:54:38.764229 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673119651" for 192.168.33.1 at 2015-07-12 03:54:38 +0000
I, [2015-07-12T03:54:38.862234 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:54:38.862483 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673119651"}
I, [2015-07-12T03:54:39.122374 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:54:39.123406 #19751]  INFO -- : Completed 200 OK in 261ms (Views: 260.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:54:39.229494 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=&button=" for 192.168.33.1 at 2015-07-12 03:54:39 +0000
I, [2015-07-12T03:54:39.335488 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:54:39.335610 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"", "button"=>""}
D, [2015-07-12T03:54:39.337910 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:54:39.338950 #19751] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:54:39.337949"], ["updated_at", "2015-07-12 03:54:39.337949"]]
D, [2015-07-12T03:54:39.341249 #19751] DEBUG -- :   [1m[36m (2.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:54:39.347347 #19751] DEBUG -- :   [1m[35mPlan Load (5.3ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:54:39.350324 #19751] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T03:54:39.775427 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (353.5ms)
I, [2015-07-12T03:54:39.776934 #19751]  INFO -- : Completed 200 OK in 441ms (Views: 425.9ms | ActiveRecord: 8.1ms)
I, [2015-07-12T03:56:16.701175 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673209752" for 192.168.33.1 at 2015-07-12 03:56:16 +0000
I, [2015-07-12T03:56:17.026699 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:56:17.026896 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673209752"}
I, [2015-07-12T03:56:17.293067 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:56:17.294148 #19751]  INFO -- : Completed 200 OK in 267ms (Views: 266.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:56:17.396725 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 03:56:17 +0000
I, [2015-07-12T03:56:17.505528 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:56:17.505815 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T03:56:17.534522 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T03:56:17.536160 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:56:17.534905"], ["updated_at", "2015-07-12 03:56:17.534905"]]
D, [2015-07-12T03:56:17.539116 #19751] DEBUG -- :   [1m[35m (2.2ms)[0m  COMMIT
D, [2015-07-12T03:56:17.568149 #19751] DEBUG -- :   [1m[36mPlan Load (4.2ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:56:17.607011 #19751] DEBUG -- :   [1m[35m (0.3ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T03:56:18.042513 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (350.2ms)
I, [2015-07-12T03:56:18.044927 #19751]  INFO -- : Completed 200 OK in 539ms (Views: 437.3ms | ActiveRecord: 10.6ms)
I, [2015-07-12T03:56:21.256865 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673306889" for 192.168.33.1 at 2015-07-12 03:56:21 +0000
I, [2015-07-12T03:56:21.375714 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:56:21.375969 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673306889"}
I, [2015-07-12T03:56:21.642784 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:56:21.643694 #19751]  INFO -- : Completed 200 OK in 267ms (Views: 266.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:56:21.865048 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=&button=" for 192.168.33.1 at 2015-07-12 03:56:21 +0000
I, [2015-07-12T03:56:21.957545 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:56:21.957800 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"", "button"=>""}
D, [2015-07-12T03:56:21.958985 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:56:21.960081 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:56:21.959282"], ["updated_at", "2015-07-12 03:56:21.959282"]]
D, [2015-07-12T03:56:21.963436 #19751] DEBUG -- :   [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:56:21.968543 #19751] DEBUG -- :   [1m[35mPlan Load (4.2ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:56:21.971303 #19751] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T03:56:22.404624 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (361.0ms)
I, [2015-07-12T03:56:22.405953 #19751]  INFO -- : Completed 200 OK in 448ms (Views: 434.0ms | ActiveRecord: 7.8ms)
I, [2015-07-12T03:57:46.423582 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673311199" for 192.168.33.1 at 2015-07-12 03:57:46 +0000
I, [2015-07-12T03:57:46.778689 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:57:46.778923 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673311199"}
I, [2015-07-12T03:57:47.044065 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:57:47.045220 #19751]  INFO -- : Completed 200 OK in 266ms (Views: 265.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:57:47.156565 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 03:57:47 +0000
I, [2015-07-12T03:57:47.277223 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:57:47.277224 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T03:57:47.313998 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T03:57:47.315388 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:57:47.314350"], ["updated_at", "2015-07-12 03:57:47.314350"]]
D, [2015-07-12T03:57:47.319127 #19751] DEBUG -- :   [1m[35m (3.1ms)[0m  COMMIT
D, [2015-07-12T03:57:47.346660 #19751] DEBUG -- :   [1m[36mPlan Load (4.4ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:57:47.381119 #19751] DEBUG -- :   [1m[35m (0.3ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T03:57:47.815876 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (360.4ms)
I, [2015-07-12T03:57:47.817388 #19751]  INFO -- : Completed 200 OK in 540ms (Views: 435.5ms | ActiveRecord: 11.1ms)
I, [2015-07-12T03:57:49.942743 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673395620" for 192.168.33.1 at 2015-07-12 03:57:49 +0000
I, [2015-07-12T03:57:50.043440 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:57:50.043690 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673395620"}
I, [2015-07-12T03:57:50.323840 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:57:50.324632 #19751]  INFO -- : Completed 200 OK in 281ms (Views: 280.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:57:50.457983 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=&button=" for 192.168.33.1 at 2015-07-12 03:57:50 +0000
I, [2015-07-12T03:57:50.550775 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:57:50.550926 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"", "button"=>""}
D, [2015-07-12T03:57:50.552559 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:57:50.554135 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:57:50.552865"], ["updated_at", "2015-07-12 03:57:50.552865"]]
D, [2015-07-12T03:57:50.557646 #19751] DEBUG -- :   [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:57:50.563463 #19751] DEBUG -- :   [1m[35mPlan Load (5.0ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:57:50.566421 #19751] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T03:57:50.993505 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (356.1ms)
I, [2015-07-12T03:57:50.995156 #19751]  INFO -- : Completed 200 OK in 444ms (Views: 428.1ms | ActiveRecord: 8.7ms)
I, [2015-07-12T03:59:55.514422 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673398764" for 192.168.33.1 at 2015-07-12 03:59:55 +0000
I, [2015-07-12T03:59:55.623953 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:59:55.624197 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673398764"}
I, [2015-07-12T03:59:55.896322 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:59:55.897117 #19751]  INFO -- : Completed 200 OK in 273ms (Views: 272.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:59:55.999024 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 03:59:55 +0000
I, [2015-07-12T03:59:56.099465 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T03:59:56.099809 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T03:59:56.101598 #19751] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T03:59:56.103259 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:59:56.101960"], ["updated_at", "2015-07-12 03:59:56.101960"]]
D, [2015-07-12T03:59:56.105034 #19751] DEBUG -- :   [1m[35m (1.0ms)[0m  COMMIT
D, [2015-07-12T03:59:56.111405 #19751] DEBUG -- :   [1m[36mPlan Load (5.6ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T03:59:56.119183 #19751] DEBUG -- :   [1m[35m (0.6ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T03:59:56.597271 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (400.7ms)
I, [2015-07-12T03:59:56.598532 #19751]  INFO -- : Completed 200 OK in 498ms (Views: 478.7ms | ActiveRecord: 7.8ms)
I, [2015-07-12T03:59:58.773054 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436673522969" for 192.168.33.1 at 2015-07-12 03:59:58 +0000
I, [2015-07-12T03:59:58.884582 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T03:59:58.884742 #19751]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436673522969"}
I, [2015-07-12T03:59:59.151612 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T03:59:59.152507 #19751]  INFO -- : Completed 200 OK in 268ms (Views: 267.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T03:59:59.300483 #19751]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 03:59:59 +0000
I, [2015-07-12T03:59:59.397439 #19751]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T03:59:59.399488 #19751] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T03:59:59.400999 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 03:59:59.399849"], ["updated_at", "2015-07-12 03:59:59.399849"]]
D, [2015-07-12T03:59:59.404487 #19751] DEBUG -- :   [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T03:59:59.408814 #19751] DEBUG -- :   [1m[35mPlan Load (3.2ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T03:59:59.410630 #19751] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T03:59:59.516881 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.3ms)
I, [2015-07-12T03:59:59.518507 #19751]  INFO -- : Completed 200 OK in 121ms (Views: 107.5ms | ActiveRecord: 6.9ms)
I, [2015-07-12T04:00:09.322390 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673525806" for 192.168.33.1 at 2015-07-12 04:00:09 +0000
I, [2015-07-12T04:00:09.414075 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:00:09.414308 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673525806"}
I, [2015-07-12T04:00:09.682885 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:00:09.683707 #19751]  INFO -- : Completed 200 OK in 269ms (Views: 268.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:00:09.771045 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=0&b_group=0&button=" for 192.168.33.1 at 2015-07-12 04:00:09 +0000
I, [2015-07-12T04:00:09.866517 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:00:09.866753 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"0", "b_group"=>"0", "button"=>""}
D, [2015-07-12T04:00:09.868191 #19751] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T04:00:09.870342 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=0&b_group=0&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"0\", \"b_group\"=>\"0\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:00:09.868456"], ["updated_at", "2015-07-12 04:00:09.868456"]]
D, [2015-07-12T04:00:09.874199 #19751] DEBUG -- :   [1m[35m (3.3ms)[0m  COMMIT
D, [2015-07-12T04:00:09.878587 #19751] DEBUG -- :   [1m[36mPlan Load (3.5ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A or B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T04:00:09.880526 #19751] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T04:00:09.977083 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.6ms)
I, [2015-07-12T04:00:09.978510 #19751]  INFO -- : Completed 200 OK in 112ms (Views: 97.4ms | ActiveRecord: 7.6ms)
I, [2015-07-12T04:00:14.448971 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673536146" for 192.168.33.1 at 2015-07-12 04:00:14 +0000
I, [2015-07-12T04:00:14.542958 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:00:14.543182 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673536146"}
I, [2015-07-12T04:00:14.807394 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:00:14.808454 #19751]  INFO -- : Completed 200 OK in 265ms (Views: 264.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:00:14.940839 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=0&button=" for 192.168.33.1 at 2015-07-12 04:00:14 +0000
I, [2015-07-12T04:00:15.037849 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:00:15.038086 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"0", "button"=>""}
D, [2015-07-12T04:00:15.040370 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T04:00:15.041574 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=0&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"0\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:00:15.040647"], ["updated_at", "2015-07-12 04:00:15.040647"]]
D, [2015-07-12T04:00:15.044839 #19751] DEBUG -- :   [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T04:00:15.048505 #19751] DEBUG -- :   [1m[35mPlan Load (3.0ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:00:15.050318 #19751] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T04:00:15.144448 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.6ms)
I, [2015-07-12T04:00:15.146019 #19751]  INFO -- : Completed 200 OK in 108ms (Views: 95.1ms | ActiveRecord: 6.7ms)
I, [2015-07-12T04:00:18.617725 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673541251" for 192.168.33.1 at 2015-07-12 04:00:18 +0000
I, [2015-07-12T04:00:18.711124 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:00:18.711369 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673541251"}
I, [2015-07-12T04:00:18.976811 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:00:18.978195 #19751]  INFO -- : Completed 200 OK in 267ms (Views: 266.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:00:19.032440 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=0&button=" for 192.168.33.1 at 2015-07-12 04:00:19 +0000
I, [2015-07-12T04:00:19.139683 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:00:19.139897 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"0", "button"=>""}
D, [2015-07-12T04:00:19.141181 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T04:00:19.142911 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=0&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"0\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:00:19.141490"], ["updated_at", "2015-07-12 04:00:19.141490"]]
D, [2015-07-12T04:00:19.145464 #19751] DEBUG -- :   [1m[35m (1.8ms)[0m  COMMIT
D, [2015-07-12T04:00:19.149745 #19751] DEBUG -- :   [1m[36mPlan Load (3.1ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T04:00:19.152043 #19751] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T04:00:19.258473 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.7ms)
I, [2015-07-12T04:00:19.260076 #19751]  INFO -- : Completed 200 OK in 120ms (Views: 107.4ms | ActiveRecord: 5.8ms)
I, [2015-07-12T04:00:21.160909 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673545340" for 192.168.33.1 at 2015-07-12 04:00:21 +0000
I, [2015-07-12T04:00:21.268539 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:00:21.268748 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673545340"}
I, [2015-07-12T04:00:21.538771 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:00:21.539827 #19751]  INFO -- : Completed 200 OK in 271ms (Views: 270.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:00:21.680700 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=0&button=" for 192.168.33.1 at 2015-07-12 04:00:21 +0000
I, [2015-07-12T04:00:21.778314 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:00:21.778548 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"0", "button"=>""}
D, [2015-07-12T04:00:21.779523 #19751] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T04:00:21.781442 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=0&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"b_group\"=>\"0\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:00:21.779807"], ["updated_at", "2015-07-12 04:00:21.779807"]]
D, [2015-07-12T04:00:21.785502 #19751] DEBUG -- :   [1m[36m (3.4ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T04:00:21.789879 #19751] DEBUG -- :   [1m[35mPlan Load (3.5ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:00:21.792002 #19751] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T04:00:21.922903 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (55.5ms)
I, [2015-07-12T04:00:21.924422 #19751]  INFO -- : Completed 200 OK in 146ms (Views: 131.8ms | ActiveRecord: 7.8ms)
I, [2015-07-12T04:01:17.417432 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673547953" for 192.168.33.1 at 2015-07-12 04:01:17 +0000
I, [2015-07-12T04:01:17.524673 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:01:17.525559 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673547953"}
I, [2015-07-12T04:01:17.793979 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:01:17.794578 #19751]  INFO -- : Completed 200 OK in 269ms (Views: 268.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:01:17.922261 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=0&b_group=0&button=" for 192.168.33.1 at 2015-07-12 04:01:17 +0000
I, [2015-07-12T04:01:18.033524 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:01:18.033573 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"0", "b_group"=>"0", "button"=>""}
D, [2015-07-12T04:01:18.035931 #19751] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T04:01:18.037088 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=0&b_group=0&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"0\", \"b_group\"=>\"0\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:01:18.036273"], ["updated_at", "2015-07-12 04:01:18.036273"]]
D, [2015-07-12T04:01:18.039965 #19751] DEBUG -- :   [1m[35m (2.2ms)[0m  COMMIT
D, [2015-07-12T04:01:18.044002 #19751] DEBUG -- :   [1m[36mPlan Load (3.4ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A or B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T04:01:18.045638 #19751] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T04:01:18.163542 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (35.1ms)
I, [2015-07-12T04:01:18.164019 #19751]  INFO -- : Completed 500 Internal Server Error in 130ms
F, [2015-07-12T04:01:18.165388 #19751] FATAL -- : 
SyntaxError (/vagrant/sales/app/views/sales/index.html.erb:34: syntax error, unexpected ','
...pend=( check_box_tag :a_group,, @a_group );@output_buffer.sa...
...                               ^
/vagrant/sales/app/views/sales/index.html.erb:35: syntax error, unexpected ','
...pend=( check_box_tag :b_group,, @b_group );@output_buffer.sa...
...                               ^
/vagrant/sales/app/views/sales/index.html.erb:36: syntax error, unexpected keyword_do_block, expecting keyword_end
...', class: "btn btn-default") do @output_buffer.safe_append='
...                               ^
/vagrant/sales/app/views/sales/index.html.erb:952: syntax error, unexpected keyword_ensure, expecting end-of-input):
  app/views/sales/index.html.erb:34: syntax error, unexpected ','
  app/views/sales/index.html.erb:35: syntax error, unexpected ','
  app/views/sales/index.html.erb:36: syntax error, unexpected keyword_do_block, expecting keyword_end
  app/views/sales/index.html.erb:952: syntax error, unexpected keyword_ensure, expecting end-of-input


I, [2015-07-12T04:01:27.453861 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=0&b_group=0&button=" for 192.168.33.1 at 2015-07-12 04:01:27 +0000
I, [2015-07-12T04:01:27.558540 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:01:27.558591 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"0", "b_group"=>"0", "button"=>""}
D, [2015-07-12T04:01:27.560951 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T04:01:27.562348 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=0&b_group=0&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"0\", \"b_group\"=>\"0\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:01:27.561242"], ["updated_at", "2015-07-12 04:01:27.561242"]]
D, [2015-07-12T04:01:27.564153 #19751] DEBUG -- :   [1m[36m (1.1ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T04:01:27.567583 #19751] DEBUG -- :   [1m[35mPlan Load (2.6ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A or B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:01:27.569991 #19751] DEBUG -- :   [1m[36m (1.2ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T04:01:27.717948 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (66.3ms)
I, [2015-07-12T04:01:27.719534 #19751]  INFO -- : Completed 200 OK in 161ms (Views: 148.9ms | ActiveRecord: 5.2ms)
I, [2015-07-12T04:01:31.598196 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673612994" for 192.168.33.1 at 2015-07-12 04:01:31 +0000
I, [2015-07-12T04:01:31.687734 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:01:31.687935 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673612994"}
I, [2015-07-12T04:01:31.955259 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:01:31.956299 #19751]  INFO -- : Completed 200 OK in 268ms (Views: 267.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:01:32.054885 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=on&button=" for 192.168.33.1 at 2015-07-12 04:01:32 +0000
I, [2015-07-12T04:01:32.144426 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:01:32.144557 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "a_group"=>"on", "button"=>""}
D, [2015-07-12T04:01:32.146949 #19751] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T04:01:32.148323 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&a_group=on&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"a_group\"=>\"on\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:01:32.147222"], ["updated_at", "2015-07-12 04:01:32.147222"]]
D, [2015-07-12T04:01:32.151242 #19751] DEBUG -- :   [1m[35m (2.3ms)[0m  COMMIT
D, [2015-07-12T04:01:32.154495 #19751] DEBUG -- :   [1m[36mPlan Load (2.6ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T04:01:32.156655 #19751] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T04:01:32.253387 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.0ms)
I, [2015-07-12T04:01:32.255000 #19751]  INFO -- : Completed 200 OK in 110ms (Views: 97.7ms | ActiveRecord: 5.8ms)
I, [2015-07-12T04:01:36.005129 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673617470" for 192.168.33.1 at 2015-07-12 04:01:36 +0000
I, [2015-07-12T04:01:36.099599 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:01:36.100342 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673617470"}
I, [2015-07-12T04:01:36.370396 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:01:36.371116 #19751]  INFO -- : Completed 200 OK in 271ms (Views: 270.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:01:36.509851 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=&button=" for 192.168.33.1 at 2015-07-12 04:01:36 +0000
I, [2015-07-12T04:01:36.606048 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:01:36.606352 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"", "button"=>""}
D, [2015-07-12T04:01:36.607674 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T04:01:36.609612 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"b_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:01:36.607798"], ["updated_at", "2015-07-12 04:01:36.607798"]]
D, [2015-07-12T04:01:36.612232 #19751] DEBUG -- :   [1m[36m (2.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T04:01:36.618129 #19751] DEBUG -- :   [1m[35mPlan Load (4.7ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:01:36.620961 #19751] DEBUG -- :   [1m[36m (0.9ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T04:01:37.083626 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (388.9ms)
I, [2015-07-12T04:01:37.085770 #19751]  INFO -- : Completed 200 OK in 479ms (Views: 464.1ms | ActiveRecord: 8.0ms)
I, [2015-07-12T04:01:56.206299 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86&_=1436673622248" for 192.168.33.1 at 2015-07-12 04:01:56 +0000
I, [2015-07-12T04:01:56.311201 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:01:56.311455 #19751]  INFO -- :   Parameters: {"action_name"=>"システム管理", "_"=>"1436673622248"}
I, [2015-07-12T04:01:56.582656 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:01:56.583937 #19751]  INFO -- : Completed 200 OK in 272ms (Views: 271.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:01:56.665727 #19751]  INFO -- : Started GET "/users" for 192.168.33.1 at 2015-07-12 04:01:56 +0000
I, [2015-07-12T04:01:56.782808 #19751]  INFO -- : Processing by UsersController#index as HTML
D, [2015-07-12T04:01:56.784776 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T04:01:56.786230 #19751] DEBUG -- :   [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users"], ["action", "システム管理"], ["parameters", "{\"controller\"=>\"users\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:01:56.785084"], ["updated_at", "2015-07-12 04:01:56.785084"]]
D, [2015-07-12T04:01:56.789602 #19751] DEBUG -- :   [1m[35m (2.6ms)[0m  COMMIT
D, [2015-07-12T04:01:56.891461 #19751] DEBUG -- :   [1m[36mUser Load (0.4ms)[0m  [1mSELECT "users".* FROM "users"  ORDER BY display_order asc, user_id asc[0m
I, [2015-07-12T04:01:56.905640 #19751]  INFO -- :   Rendered users/index.html.erb within layouts/application (17.2ms)
I, [2015-07-12T04:01:56.907005 #19751]  INFO -- : Completed 200 OK in 124ms (Views: 93.3ms | ActiveRecord: 4.7ms)
I, [2015-07-12T04:02:02.411373 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436673641844" for 192.168.33.1 at 2015-07-12 04:02:02 +0000
I, [2015-07-12T04:02:02.513230 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:02:02.513499 #19751]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436673641844"}
I, [2015-07-12T04:02:02.790795 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:02:02.791776 #19751]  INFO -- : Completed 200 OK in 278ms (Views: 276.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:02:02.897090 #19751]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 04:02:02 +0000
I, [2015-07-12T04:02:02.986295 #19751]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T04:02:02.987553 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T04:02:02.989648 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:02:02.988560"], ["updated_at", "2015-07-12 04:02:02.988560"]]
D, [2015-07-12T04:02:02.993041 #19751] DEBUG -- :   [1m[35m (2.9ms)[0m  COMMIT
D, [2015-07-12T04:02:02.997538 #19751] DEBUG -- :   [1m[36mPlan Load (3.0ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T04:02:02.999472 #19751] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T04:02:03.097558 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.4ms)
I, [2015-07-12T04:02:03.099058 #19751]  INFO -- : Completed 200 OK in 112ms (Views: 99.1ms | ActiveRecord: 6.7ms)
I, [2015-07-12T04:02:04.903002 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673647958" for 192.168.33.1 at 2015-07-12 04:02:04 +0000
I, [2015-07-12T04:02:05.000747 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:02:05.001129 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673647958"}
I, [2015-07-12T04:02:05.290571 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:02:05.291189 #19751]  INFO -- : Completed 200 OK in 287ms (Views: 286.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:02:05.462906 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&button=" for 192.168.33.1 at 2015-07-12 04:02:05 +0000
I, [2015-07-12T04:02:05.559139 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:02:05.559427 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "button"=>""}
D, [2015-07-12T04:02:05.560705 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T04:02:05.562101 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:02:05.561012"], ["updated_at", "2015-07-12 04:02:05.561012"]]
D, [2015-07-12T04:02:05.564827 #19751] DEBUG -- :   [1m[36m (2.1ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T04:02:05.568916 #19751] DEBUG -- :   [1m[35mPlan Load (2.7ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:02:05.570764 #19751] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T04:02:05.672873 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.9ms)
I, [2015-07-12T04:02:05.675346 #19751]  INFO -- : Completed 200 OK in 116ms (Views: 103.6ms | ActiveRecord: 5.6ms)
I, [2015-07-12T04:02:12.407960 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673650509" for 192.168.33.1 at 2015-07-12 04:02:12 +0000
I, [2015-07-12T04:02:12.506762 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:02:12.506827 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673650509"}
I, [2015-07-12T04:02:12.775860 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:02:12.776721 #19751]  INFO -- : Completed 200 OK in 270ms (Views: 269.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:02:12.873706 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 04:02:12 +0000
I, [2015-07-12T04:02:12.964534 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:02:12.964689 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T04:02:12.965987 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T04:02:12.967597 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:02:12.966323"], ["updated_at", "2015-07-12 04:02:12.966323"]]
D, [2015-07-12T04:02:12.969150 #19751] DEBUG -- :   [1m[35m (0.9ms)[0m  COMMIT
D, [2015-07-12T04:02:12.975115 #19751] DEBUG -- :   [1m[36mPlan Load (5.2ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T04:02:12.977320 #19751] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T04:02:13.412859 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (359.2ms)
I, [2015-07-12T04:02:13.415004 #19751]  INFO -- : Completed 200 OK in 450ms (Views: 437.1ms | ActiveRecord: 7.0ms)
I, [2015-07-12T04:02:16.768897 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673658161" for 192.168.33.1 at 2015-07-12 04:02:16 +0000
I, [2015-07-12T04:02:16.870993 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:02:16.871245 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673658161"}
I, [2015-07-12T04:02:17.141138 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:02:17.141934 #19751]  INFO -- : Completed 200 OK in 270ms (Views: 269.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:02:17.294194 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=&button=" for 192.168.33.1 at 2015-07-12 04:02:17 +0000
I, [2015-07-12T04:02:17.385435 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:02:17.385698 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"", "button"=>""}
D, [2015-07-12T04:02:17.388071 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T04:02:17.388857 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"b_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:02:17.388108"], ["updated_at", "2015-07-12 04:02:17.388108"]]
D, [2015-07-12T04:02:17.391337 #19751] DEBUG -- :   [1m[36m (2.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T04:02:17.397177 #19751] DEBUG -- :   [1m[35mPlan Load (5.0ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:02:17.400071 #19751] DEBUG -- :   [1m[36m (0.6ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T04:02:17.822358 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (350.7ms)
I, [2015-07-12T04:02:17.823977 #19751]  INFO -- : Completed 200 OK in 438ms (Views: 423.3ms | ActiveRecord: 8.0ms)
I, [2015-07-12T04:02:41.440652 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=&button=" for 192.168.33.1 at 2015-07-12 04:02:41 +0000
I, [2015-07-12T04:02:41.542009 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:02:41.542132 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"", "button"=>""}
D, [2015-07-12T04:02:41.547473 #19751] DEBUG -- :   [1m[35mPlan Load (4.3ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:02:41.550013 #19751] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T04:02:42.022549 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (395.5ms)
I, [2015-07-12T04:02:42.024244 #19751]  INFO -- : Completed 200 OK in 482ms (Views: 473.6ms | ActiveRecord: 4.8ms)
I, [2015-07-12T04:03:01.996443 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&b_group=&button=" for 192.168.33.1 at 2015-07-12 04:03:01 +0000
I, [2015-07-12T04:03:02.097200 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:03:02.097430 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "b_group"=>"", "button"=>""}
D, [2015-07-12T04:03:02.102212 #19751] DEBUG -- :   [1m[35mPlan Load (3.7ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:03:02.105424 #19751] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T04:03:02.565659 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (381.2ms)
I, [2015-07-12T04:03:02.567184 #19751]  INFO -- : Completed 200 OK in 470ms (Views: 461.2ms | ActiveRecord: 4.2ms)
I, [2015-07-12T04:03:09.488199 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673706747" for 192.168.33.1 at 2015-07-12 04:03:09 +0000
I, [2015-07-12T04:03:09.591366 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:03:09.591626 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673706747"}
I, [2015-07-12T04:03:09.854285 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:03:09.855200 #19751]  INFO -- : Completed 200 OK in 263ms (Views: 262.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:03:09.964140 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 04:03:09 +0000
I, [2015-07-12T04:03:10.068074 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:03:10.068172 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T04:03:10.069827 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T04:03:10.071322 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:03:10.070103"], ["updated_at", "2015-07-12 04:03:10.070103"]]
D, [2015-07-12T04:03:10.075209 #19751] DEBUG -- :   [1m[35m (3.2ms)[0m  COMMIT
D, [2015-07-12T04:03:10.080008 #19751] DEBUG -- :   [1m[36mPlan Load (3.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T04:03:10.082665 #19751] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T04:03:10.566838 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (395.5ms)
I, [2015-07-12T04:03:10.568431 #19751]  INFO -- : Completed 200 OK in 500ms (Views: 485.1ms | ActiveRecord: 7.9ms)
I, [2015-07-12T04:03:17.000633 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436673714652" for 192.168.33.1 at 2015-07-12 04:03:17 +0000
I, [2015-07-12T04:03:17.096633 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:03:17.096883 #19751]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436673714652"}
I, [2015-07-12T04:03:17.360145 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:03:17.360941 #19751]  INFO -- : Completed 200 OK in 264ms (Views: 263.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:03:17.477931 #19751]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 04:03:17 +0000
I, [2015-07-12T04:03:17.568919 #19751]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T04:03:17.570146 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T04:03:17.571599 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:03:17.570441"], ["updated_at", "2015-07-12 04:03:17.570441"]]
D, [2015-07-12T04:03:17.575074 #19751] DEBUG -- :   [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T04:03:17.579506 #19751] DEBUG -- :   [1m[35mPlan Load (3.7ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:03:17.581174 #19751] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T04:03:17.685692 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.4ms)
I, [2015-07-12T04:03:17.687346 #19751]  INFO -- : Completed 200 OK in 118ms (Views: 105.6ms | ActiveRecord: 7.1ms)
I, [2015-07-12T04:03:30.647941 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86%E8%80%85&_=1436673721689" for 192.168.33.1 at 2015-07-12 04:03:30 +0000
I, [2015-07-12T04:03:30.737637 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:03:30.737835 #19751]  INFO -- :   Parameters: {"action_name"=>"システム管理者", "_"=>"1436673721689"}
I, [2015-07-12T04:03:31.004778 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:03:31.005631 #19751]  INFO -- : Completed 200 OK in 268ms (Views: 267.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:03:31.814508 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%83%AD%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88&_=1436673721690" for 192.168.33.1 at 2015-07-12 04:03:31 +0000
I, [2015-07-12T04:03:31.911337 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:03:31.911525 #19751]  INFO -- :   Parameters: {"action_name"=>"ログアウト", "_"=>"1436673721690"}
I, [2015-07-12T04:03:32.183418 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:03:32.184238 #19751]  INFO -- : Completed 200 OK in 272ms (Views: 271.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:03:32.345953 #19751]  INFO -- : Started DELETE "/logins/0" for 192.168.33.1 at 2015-07-12 04:03:32 +0000
I, [2015-07-12T04:03:32.442137 #19751]  INFO -- : Processing by LoginsController#destroy as HTML
I, [2015-07-12T04:03:32.442351 #19751]  INFO -- :   Parameters: {"authenticity_token"=>"n0x3yVeIG/o61B1xvXiIVcoyQGQYSck4Bk0o2cRfmhLRURskiSlyGdJ78j8+8rweEXfGkW+BC3e8mARobpB4Ww==", "id"=>"0"}
D, [2015-07-12T04:03:32.444931 #19751] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T04:03:32.446377 #19751] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/logins/0"], ["action", "ログアウト"], ["parameters", "{\"_method\"=>\"delete\", \"authenticity_token\"=>\"n0x3yVeIG/o61B1xvXiIVcoyQGQYSck4Bk0o2cRfmhLRURskiSlyGdJ78j8+8rweEXfGkW+BC3e8mARobpB4Ww==\", \"controller\"=>\"logins\", \"action\"=>\"destroy\", \"id\"=>\"0\"}"], ["created_at", "2015-07-12 04:03:32.445208"], ["updated_at", "2015-07-12 04:03:32.445208"]]
D, [2015-07-12T04:03:32.449853 #19751] DEBUG -- :   [1m[35m (2.7ms)[0m  COMMIT
I, [2015-07-12T04:03:32.450414 #19751]  INFO -- : Redirected to http://192.168.33.10/
I, [2015-07-12T04:03:32.450775 #19751]  INFO -- : Completed 302 Found in 8ms (ActiveRecord: 3.1ms)
I, [2015-07-12T04:03:32.459955 #19751]  INFO -- : Started GET "/" for 192.168.33.1 at 2015-07-12 04:03:32 +0000
I, [2015-07-12T04:03:32.560069 #19751]  INFO -- : Processing by LoginsController#new as HTML
I, [2015-07-12T04:03:32.618210 #19751]  INFO -- :   Rendered logins/new.html.erb within layouts/login (1.7ms)
I, [2015-07-12T04:03:32.619037 #19751]  INFO -- : Completed 200 OK in 59ms (Views: 58.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:03:36.477058 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%0A++&_=1436673736452" for 192.168.33.1 at 2015-07-12 04:03:36 +0000
I, [2015-07-12T04:03:36.574659 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:03:36.574845 #19751]  INFO -- :   Parameters: {"action_name"=>"\n    ログイン\n  ", "_"=>"1436673736452"}
I, [2015-07-12T04:03:36.837936 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:03:36.838633 #19751]  INFO -- : Completed 200 OK in 264ms (Views: 262.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:03:36.984507 #19751]  INFO -- : Started POST "/logins/log" for 192.168.33.1 at 2015-07-12 04:03:36 +0000
I, [2015-07-12T04:03:37.076523 #19751]  INFO -- : Processing by LoginsController#log as HTML
I, [2015-07-12T04:03:37.076764 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"+Dqysj0KbSPSNwGnwmXiXhyg1WaktAVy1zIBbQLkUTuV+KL89ieE6dyrIhYeWn0NgvigGB6AWgEjQ2IWNQrNmg==", "login_id"=>"system", "login_pass"=>"master", "button"=>""}
D, [2015-07-12T04:03:37.078846 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T04:03:37.079961 #19751] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", ""], ["url", "/logins/log"], ["action", "\n    ログイン\n  "], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"+Dqysj0KbSPSNwGnwmXiXhyg1WaktAVy1zIBbQLkUTuV+KL89ieE6dyrIhYeWn0NgvigGB6AWgEjQ2IWNQrNmg==\", \"login_id\"=>\"system\", \"login_pass\"=>\"master\", \"button\"=>\"\", \"controller\"=>\"logins\", \"action\"=>\"log\"}"], ["created_at", "2015-07-12 04:03:37.078974"], ["updated_at", "2015-07-12 04:03:37.078974"]]
D, [2015-07-12T04:03:37.081668 #19751] DEBUG -- :   [1m[36m (1.1ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T04:03:37.099620 #19751] DEBUG -- :   [1m[35mUser Exists (0.1ms)[0m  SELECT  1 AS one FROM "users" WHERE "users"."user_id" = $1 AND "users"."user_password" = $2 AND "users"."delete_flag" = $3 LIMIT 1  [["user_id", "system"], ["user_password", "master"], ["delete_flag", "0"]]
D, [2015-07-12T04:03:37.101096 #19751] DEBUG -- :   [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."user_id" = $1 AND "users"."user_password" = $2 AND "users"."delete_flag" = $3  ORDER BY "users"."id" ASC LIMIT 1[0m  [["user_id", "system"], ["user_password", "master"], ["delete_flag", "0"]]
I, [2015-07-12T04:03:37.101921 #19751]  INFO -- : Redirected to http://192.168.33.10/sales
I, [2015-07-12T04:03:37.102256 #19751]  INFO -- : Completed 302 Found in 25ms (ActiveRecord: 1.7ms)
I, [2015-07-12T04:03:37.115085 #19751]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 04:03:37 +0000
I, [2015-07-12T04:03:37.210860 #19751]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T04:03:37.215211 #19751] DEBUG -- :   [1m[35mPlan Load (3.4ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:03:37.216990 #19751] DEBUG -- :   [1m[36m (0.3ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T04:03:37.319353 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (29.5ms)
I, [2015-07-12T04:03:37.321006 #19751]  INFO -- : Completed 200 OK in 110ms (Views: 103.6ms | ActiveRecord: 3.6ms)
I, [2015-07-12T04:03:41.381239 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673741099" for 192.168.33.1 at 2015-07-12 04:03:41 +0000
I, [2015-07-12T04:03:41.474615 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:03:41.475456 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673741099"}
I, [2015-07-12T04:03:41.744774 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:03:41.745624 #19751]  INFO -- : Completed 200 OK in 270ms (Views: 269.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:03:41.917535 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=&button=" for 192.168.33.1 at 2015-07-12 04:03:41 +0000
I, [2015-07-12T04:03:42.011255 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:03:42.011506 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "a_group"=>"", "button"=>""}
D, [2015-07-12T04:03:42.012966 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T04:03:42.014994 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:03:42.013267"], ["updated_at", "2015-07-12 04:03:42.013267"]]
D, [2015-07-12T04:03:42.018094 #19751] DEBUG -- :   [1m[35m (2.5ms)[0m  COMMIT
D, [2015-07-12T04:03:42.022687 #19751] DEBUG -- :   [1m[36mPlan Load (3.6ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T04:03:42.024211 #19751] DEBUG -- :   [1m[35m (0.2ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T04:03:42.125256 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.6ms)
I, [2015-07-12T04:03:42.126746 #19751]  INFO -- : Completed 200 OK in 115ms (Views: 102.2ms | ActiveRecord: 6.7ms)
I, [2015-07-12T04:03:45.102408 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673745849" for 192.168.33.1 at 2015-07-12 04:03:45 +0000
I, [2015-07-12T04:03:45.201097 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:03:45.201367 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673745849"}
I, [2015-07-12T04:03:45.467043 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:03:45.467987 #19751]  INFO -- : Completed 200 OK in 266ms (Views: 265.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:03:45.616405 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&button=" for 192.168.33.1 at 2015-07-12 04:03:45 +0000
I, [2015-07-12T04:03:45.708644 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:03:45.708883 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "button"=>""}
D, [2015-07-12T04:03:45.710475 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T04:03:45.712042 #19751] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:03:45.710777"], ["updated_at", "2015-07-12 04:03:45.710777"]]
D, [2015-07-12T04:03:45.715451 #19751] DEBUG -- :   [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T04:03:45.719483 #19751] DEBUG -- :   [1m[35mPlan Load (3.3ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T04:03:45.721138 #19751] DEBUG -- :   [1m[36m (0.3ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T04:03:45.827394 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.0ms)
I, [2015-07-12T04:03:45.829491 #19751]  INFO -- : Completed 200 OK in 120ms (Views: 107.9ms | ActiveRecord: 6.7ms)
I, [2015-07-12T04:03:52.910827 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436673749507" for 192.168.33.1 at 2015-07-12 04:03:52 +0000
I, [2015-07-12T04:03:53.015162 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:03:53.015209 #19751]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436673749507"}
I, [2015-07-12T04:03:53.277842 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:03:53.278585 #19751]  INFO -- : Completed 200 OK in 263ms (Views: 261.8ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:03:53.414045 #19751]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=&button=" for 192.168.33.1 at 2015-07-12 04:03:53 +0000
I, [2015-07-12T04:03:53.512546 #19751]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T04:03:53.513423 #19751]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "a_group"=>"", "button"=>""}
D, [2015-07-12T04:03:53.514748 #19751] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T04:03:53.516313 #19751] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&a_group=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"a_group\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 04:03:53.515014"], ["updated_at", "2015-07-12 04:03:53.515014"]]
D, [2015-07-12T04:03:53.519949 #19751] DEBUG -- :   [1m[35m (2.9ms)[0m  COMMIT
D, [2015-07-12T04:03:53.524092 #19751] DEBUG -- :   [1m[36mPlan Load (3.3ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T04:03:53.526108 #19751] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T04:03:53.670548 #19751]  INFO -- :   Rendered sales/index.html.erb within layouts/application (65.2ms)
I, [2015-07-12T04:03:53.673054 #19751]  INFO -- : Completed 200 OK in 159ms (Views: 146.4ms | ActiveRecord: 7.2ms)
I, [2015-07-12T04:04:00.098864 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86%E8%80%85&_=1436673757262" for 192.168.33.1 at 2015-07-12 04:04:00 +0000
I, [2015-07-12T04:04:00.233913 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:04:00.234250 #19751]  INFO -- :   Parameters: {"action_name"=>"システム管理者", "_"=>"1436673757262"}
I, [2015-07-12T04:04:00.575617 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:04:00.576859 #19751]  INFO -- : Completed 200 OK in 342ms (Views: 341.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:04:01.250410 #19751]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%83%AD%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88&_=1436673757263" for 192.168.33.1 at 2015-07-12 04:04:01 +0000
I, [2015-07-12T04:04:01.355187 #19751]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T04:04:01.355409 #19751]  INFO -- :   Parameters: {"action_name"=>"ログアウト", "_"=>"1436673757263"}
I, [2015-07-12T04:04:01.626249 #19751]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T04:04:01.627135 #19751]  INFO -- : Completed 200 OK in 271ms (Views: 271.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T04:04:01.792851 #19751]  INFO -- : Started DELETE "/logins/0" for 192.168.33.1 at 2015-07-12 04:04:01 +0000
I, [2015-07-12T04:04:01.919437 #19751]  INFO -- : Processing by LoginsController#destroy as HTML
I, [2015-07-12T04:04:01.919659 #19751]  INFO -- :   Parameters: {"authenticity_token"=>"G5OpU6zUOZhKSrPAKMEeEeFCfQ1Qoui8dofctwuqxCl2UbkdZ/nQUkTWkHH0/oFCfxoIc+qWt8+C9r/MPERYiA==", "id"=>"0"}
D, [2015-07-12T04:04:01.922068 #19751] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T04:04:01.922956 #19751] DEBUG -- :   [1m[35mSQL (0.1ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/logins/0"], ["action", "ログアウト"], ["parameters", "{\"_method\"=>\"delete\", \"authenticity_token\"=>\"G5OpU6zUOZhKSrPAKMEeEeFCfQ1Qoui8dofctwuqxCl2UbkdZ/nQUkTWkHH0/oFCfxoIc+qWt8+C9r/MPERYiA==\", \"controller\"=>\"logins\", \"action\"=>\"destroy\", \"id\"=>\"0\"}"], ["created_at", "2015-07-12 04:04:01.922114"], ["updated_at", "2015-07-12 04:04:01.922114"]]
D, [2015-07-12T04:04:01.924406 #19751] DEBUG -- :   [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T04:04:01.924990 #19751]  INFO -- : Redirected to http://192.168.33.10/
I, [2015-07-12T04:04:01.925262 #19751]  INFO -- : Completed 302 Found in 5ms (ActiveRecord: 1.0ms)
I, [2015-07-12T04:04:01.935169 #19751]  INFO -- : Started GET "/" for 192.168.33.1 at 2015-07-12 04:04:01 +0000
I, [2015-07-12T04:04:02.023079 #19751]  INFO -- : Processing by LoginsController#new as HTML
I, [2015-07-12T04:04:02.072214 #19751]  INFO -- :   Rendered logins/new.html.erb within layouts/login (0.6ms)
I, [2015-07-12T04:04:02.072933 #19751]  INFO -- : Completed 200 OK in 50ms (Views: 49.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T06:23:13.818254 #21324]  INFO -- : Started GET "/" for 192.168.33.1 at 2015-07-12 06:23:13 +0000
I, [2015-07-12T06:23:13.969024 #21324]  INFO -- : Processing by LoginsController#new as HTML
I, [2015-07-12T06:23:14.074405 #21324]  INFO -- :   Rendered logins/new.html.erb within layouts/login (3.3ms)
I, [2015-07-12T06:23:14.076826 #21324]  INFO -- : Completed 200 OK in 107ms (Views: 83.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T06:23:18.306088 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%0A++&_=1436682193325" for 192.168.33.1 at 2015-07-12 06:23:18 +0000
I, [2015-07-12T06:23:18.425371 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T06:23:18.425589 #21324]  INFO -- :   Parameters: {"action_name"=>"\n    ログイン\n  ", "_"=>"1436682193325"}
I, [2015-07-12T06:23:18.749599 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.4ms)
I, [2015-07-12T06:23:18.750481 #21324]  INFO -- : Completed 200 OK in 325ms (Views: 323.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T06:23:18.926122 #21324]  INFO -- : Started POST "/logins/log" for 192.168.33.1 at 2015-07-12 06:23:18 +0000
I, [2015-07-12T06:23:19.036441 #21324]  INFO -- : Processing by LoginsController#log as HTML
I, [2015-07-12T06:23:19.036703 #21324]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"CQSAbFqLW8L2xSJq5hWZ40QOGH5yBmknS3yMmvtS5N8I3/o3wFG5DzaEut5RMYwrEnAKL3a2d+MUrQl6yF9c3g==", "login_id"=>"system", "login_pass"=>"master", "button"=>""}
D, [2015-07-12T06:23:19.061448 #21324] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T06:23:19.073893 #21324] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", ""], ["url", "/logins/log"], ["action", "\n    ログイン\n  "], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"CQSAbFqLW8L2xSJq5hWZ40QOGH5yBmknS3yMmvtS5N8I3/o3wFG5DzaEut5RMYwrEnAKL3a2d+MUrQl6yF9c3g==\", \"login_id\"=>\"system\", \"login_pass\"=>\"master\", \"button\"=>\"\", \"controller\"=>\"logins\", \"action\"=>\"log\"}"], ["created_at", "2015-07-12 06:23:19.061904"], ["updated_at", "2015-07-12 06:23:19.061904"]]
D, [2015-07-12T06:23:19.076529 #21324] DEBUG -- :   [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T06:23:19.099264 #21324] DEBUG -- :   [1m[35mUser Exists (0.2ms)[0m  SELECT  1 AS one FROM "users" WHERE "users"."user_id" = $1 AND "users"."user_password" = $2 AND "users"."delete_flag" = $3 LIMIT 1  [["user_id", "system"], ["user_password", "master"], ["delete_flag", "0"]]
D, [2015-07-12T06:23:19.101742 #21324] DEBUG -- :   [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."user_id" = $1 AND "users"."user_password" = $2 AND "users"."delete_flag" = $3  ORDER BY "users"."id" ASC LIMIT 1[0m  [["user_id", "system"], ["user_password", "master"], ["delete_flag", "0"]]
I, [2015-07-12T06:23:19.110978 #21324]  INFO -- : Redirected to http://192.168.33.10/sales
I, [2015-07-12T06:23:19.111394 #21324]  INFO -- : Completed 302 Found in 74ms (ActiveRecord: 7.8ms)
I, [2015-07-12T06:23:19.125967 #21324]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 06:23:19 +0000
I, [2015-07-12T06:23:19.260521 #21324]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T06:23:19.268573 #21324] DEBUG -- :   [1m[35mPlan Load (6.0ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T06:23:19.275672 #21324] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T06:23:19.480887 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (114.8ms)
I, [2015-07-12T06:23:19.484399 #21324]  INFO -- : Completed 200 OK in 224ms (Views: 208.2ms | ActiveRecord: 7.9ms)
I, [2015-07-12T06:23:21.579444 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436682198618" for 192.168.33.1 at 2015-07-12 06:23:21 +0000
I, [2015-07-12T06:23:21.718913 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T06:23:21.719209 #21324]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436682198618"}
I, [2015-07-12T06:23:22.114734 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T06:23:22.116793 #21324]  INFO -- : Completed 200 OK in 397ms (Views: 396.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T06:23:22.238269 #21324]  INFO -- : Started GET "/sales?param_group=a-group" for 192.168.33.1 at 2015-07-12 06:23:22 +0000
I, [2015-07-12T06:23:22.372157 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T06:23:22.372496 #21324]  INFO -- :   Parameters: {"param_group"=>"a-group"}
D, [2015-07-12T06:23:22.375503 #21324] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T06:23:22.379902 #21324] DEBUG -- :   [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?param_group=a-group"], ["action", " Aグループ"], ["parameters", "{\"param_group\"=>\"a-group\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 06:23:22.376000"], ["updated_at", "2015-07-12 06:23:22.376000"]]
D, [2015-07-12T06:23:22.382302 #21324] DEBUG -- :   [1m[35m (1.2ms)[0m  COMMIT
D, [2015-07-12T06:23:22.388640 #21324] DEBUG -- :   [1m[36mPlan Load (5.1ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T06:23:22.392055 #21324] DEBUG -- :   [1m[35m (0.7ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T06:23:22.542549 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (48.4ms)
I, [2015-07-12T06:23:22.543923 #21324]  INFO -- : Completed 200 OK in 171ms (Views: 151.2ms | ActiveRecord: 7.8ms)
I, [2015-07-12T06:24:27.991499 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436682201651" for 192.168.33.1 at 2015-07-12 06:24:27 +0000
I, [2015-07-12T06:24:28.096571 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T06:24:28.096796 #21324]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436682201651"}
I, [2015-07-12T06:24:28.370747 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T06:24:28.371595 #21324]  INFO -- : Completed 200 OK in 275ms (Views: 274.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T06:24:28.467525 #21324]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 06:24:28 +0000
I, [2015-07-12T06:24:28.559187 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T06:24:28.559433 #21324]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T06:24:28.560673 #21324] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T06:24:28.562688 #21324] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 06:24:28.560936"], ["updated_at", "2015-07-12 06:24:28.560936"]]
D, [2015-07-12T06:24:28.565660 #21324] DEBUG -- :   [1m[36m (2.3ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T06:24:28.570834 #21324] DEBUG -- :   [1m[35mPlan Load (4.3ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T06:24:28.582657 #21324] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T06:24:29.023756 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (365.7ms)
I, [2015-07-12T06:24:29.025636 #21324]  INFO -- : Completed 200 OK in 466ms (Views: 442.6ms | ActiveRecord: 8.5ms)
I, [2015-07-12T06:25:39.856501 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436682267342" for 192.168.33.1 at 2015-07-12 06:25:39 +0000
I, [2015-07-12T06:25:39.962834 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T06:25:39.963080 #21324]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436682267342"}
I, [2015-07-12T06:25:40.238503 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T06:25:40.239391 #21324]  INFO -- : Completed 200 OK in 276ms (Views: 275.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T06:25:40.330855 #21324]  INFO -- : Started GET "/sales?param_group=a-group" for 192.168.33.1 at 2015-07-12 06:25:40 +0000
I, [2015-07-12T06:25:40.428171 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T06:25:40.428322 #21324]  INFO -- :   Parameters: {"param_group"=>"a-group"}
D, [2015-07-12T06:25:40.430478 #21324] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T06:25:40.431715 #21324] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?param_group=a-group"], ["action", " Aグループ"], ["parameters", "{\"param_group\"=>\"a-group\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 06:25:40.430637"], ["updated_at", "2015-07-12 06:25:40.430637"]]
D, [2015-07-12T06:25:40.434841 #21324] DEBUG -- :   [1m[35m (2.6ms)[0m  COMMIT
D, [2015-07-12T06:25:40.439110 #21324] DEBUG -- :   [1m[36mPlan Load (3.5ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T06:25:40.440771 #21324] DEBUG -- :   [1m[35m (0.3ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T06:25:40.538781 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.7ms)
I, [2015-07-12T06:25:40.540172 #21324]  INFO -- : Completed 200 OK in 112ms (Views: 99.0ms | ActiveRecord: 6.8ms)
I, [2015-07-12T06:25:47.762377 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=&_=1436682338034" for 192.168.33.1 at 2015-07-12 06:25:47 +0000
I, [2015-07-12T06:25:47.853419 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T06:25:47.853556 #21324]  INFO -- :   Parameters: {"action_name"=>"", "_"=>"1436682338034"}
I, [2015-07-12T06:25:48.135306 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T06:25:48.136224 #21324]  INFO -- : Completed 200 OK in 282ms (Views: 281.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T06:25:48.207744 #21324]  INFO -- : Started GET "/sales?sale_ym_from=201507&sale_ym_to=201507&sortkey=progress_newcar+desc" for 192.168.33.1 at 2015-07-12 06:25:48 +0000
I, [2015-07-12T06:25:48.303618 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T06:25:48.303856 #21324]  INFO -- :   Parameters: {"sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "sortkey"=>"progress_newcar desc"}
D, [2015-07-12T06:25:48.305508 #21324] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T06:25:48.307517 #21324] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?sale_ym_from=201507&sale_ym_to=201507&sortkey=progress_newcar+desc"], ["action", ""], ["parameters", "{\"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"sortkey\"=>\"progress_newcar desc\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 06:25:48.305785"], ["updated_at", "2015-07-12 06:25:48.305785"]]
D, [2015-07-12T06:25:48.309418 #21324] DEBUG -- :   [1m[36m (1.3ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T06:25:48.313878 #21324] DEBUG -- :   [1m[35mPlan Load (3.9ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by progress_newcar desc, usplrepr.display_order, usplrepr.uid
D, [2015-07-12T06:25:48.316396 #21324] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T06:25:48.442779 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (30.9ms)
I, [2015-07-12T06:25:48.452474 #21324]  INFO -- : Completed 200 OK in 148ms (Views: 135.5ms | ActiveRecord: 5.9ms)
I, [2015-07-12T06:32:38.382516 #21324]  INFO -- : Started GET "/sales?sale_ym_from=201507&sale_ym_to=201507&sortkey=progress_newcar+desc" for 192.168.33.1 at 2015-07-12 06:32:38 +0000
I, [2015-07-12T06:32:38.498130 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T06:32:38.498425 #21324]  INFO -- :   Parameters: {"sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "sortkey"=>"progress_newcar desc"}
D, [2015-07-12T06:32:38.503695 #21324] DEBUG -- :   [1m[35mPlan Load (4.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by progress_newcar desc, usplrepr.display_order, usplrepr.uid
D, [2015-07-12T06:32:38.505638 #21324] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T06:32:38.672218 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (73.4ms)
I, [2015-07-12T06:32:38.674344 #21324]  INFO -- : Completed 200 OK in 176ms (Views: 168.1ms | ActiveRecord: 4.6ms)
I, [2015-07-12T06:32:41.965854 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436682751359" for 192.168.33.1 at 2015-07-12 06:32:41 +0000
I, [2015-07-12T06:32:42.073977 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T06:32:42.074289 #21324]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436682751359"}
I, [2015-07-12T06:32:42.399575 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T06:32:42.400361 #21324]  INFO -- : Completed 200 OK in 326ms (Views: 325.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T06:32:42.503966 #21324]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 06:32:42 +0000
I, [2015-07-12T06:32:42.616056 #21324]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T06:32:42.617562 #21324] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T06:32:42.619677 #21324] DEBUG -- :   [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 06:32:42.617661"], ["updated_at", "2015-07-12 06:32:42.617661"]]
D, [2015-07-12T06:32:42.622305 #21324] DEBUG -- :   [1m[35m (1.9ms)[0m  COMMIT
D, [2015-07-12T06:32:42.628841 #21324] DEBUG -- :   [1m[36mPlan Load (5.5ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T06:32:42.630942 #21324] DEBUG -- :   [1m[35m (0.6ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T06:32:42.758492 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (35.8ms)
I, [2015-07-12T06:32:42.760753 #21324]  INFO -- : Completed 200 OK in 144ms (Views: 129.1ms | ActiveRecord: 8.5ms)
I, [2015-07-12T06:32:44.915986 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436682755392" for 192.168.33.1 at 2015-07-12 06:32:44 +0000
I, [2015-07-12T06:32:45.027411 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T06:32:45.028216 #21324]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436682755392"}
I, [2015-07-12T06:32:45.353836 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T06:32:45.354787 #21324]  INFO -- : Completed 200 OK in 326ms (Views: 325.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T06:32:45.494117 #21324]  INFO -- : Started GET "/sales?param_group=a-group&sale_ym_from=201507&sale_ym_to=201507" for 192.168.33.1 at 2015-07-12 06:32:45 +0000
I, [2015-07-12T06:32:45.603369 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T06:32:45.603599 #21324]  INFO -- :   Parameters: {"param_group"=>"a-group", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507"}
D, [2015-07-12T06:32:45.605318 #21324] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T06:32:45.607421 #21324] DEBUG -- :   [1m[35mSQL (0.7ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?param_group=a-group&sale_ym_from=201507&sale_ym_to=201507"], ["action", " Aグループ"], ["parameters", "{\"param_group\"=>\"a-group\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 06:32:45.605690"], ["updated_at", "2015-07-12 06:32:45.605690"]]
D, [2015-07-12T06:32:45.609055 #21324] DEBUG -- :   [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T06:32:45.613537 #21324] DEBUG -- :   [1m[35mPlan Load (3.8ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T06:32:45.615801 #21324] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T06:32:45.733409 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (30.0ms)
I, [2015-07-12T06:32:45.734846 #21324]  INFO -- : Completed 200 OK in 131ms (Views: 118.6ms | ActiveRecord: 6.0ms)
I, [2015-07-12T07:53:00.924695 #21324]  INFO -- : Started GET "/sales?param_group=a-group&sale_ym_from=201507&sale_ym_to=201507" for 192.168.33.1 at 2015-07-12 07:53:00 +0000
I, [2015-07-12T07:53:01.275480 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T07:53:01.275754 #21324]  INFO -- :   Parameters: {"param_group"=>"a-group", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507"}
D, [2015-07-12T07:53:01.302771 #21324] DEBUG -- :   [1m[35mPlan Load (3.6ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T07:53:01.328989 #21324] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T07:53:01.464258 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (61.9ms)
I, [2015-07-12T07:53:01.465876 #21324]  INFO -- : Completed 200 OK in 190ms (Views: 136.4ms | ActiveRecord: 4.9ms)
I, [2015-07-12T07:53:04.979765 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436687518506" for 192.168.33.1 at 2015-07-12 07:53:04 +0000
I, [2015-07-12T07:53:05.089058 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T07:53:05.089382 #21324]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436687518506"}
I, [2015-07-12T07:53:05.366368 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T07:53:05.367363 #21324]  INFO -- : Completed 200 OK in 278ms (Views: 277.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T07:53:05.435021 #21324]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 07:53:05 +0000
I, [2015-07-12T07:53:05.531512 #21324]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T07:53:05.558398 #21324] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T07:53:05.560028 #21324] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 07:53:05.558744"], ["updated_at", "2015-07-12 07:53:05.558744"]]
D, [2015-07-12T07:53:05.561610 #21324] DEBUG -- :   [1m[35m (1.0ms)[0m  COMMIT
D, [2015-07-12T07:53:05.566824 #21324] DEBUG -- :   [1m[36mPlan Load (4.5ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T07:53:05.568780 #21324] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T07:53:05.675959 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (30.6ms)
I, [2015-07-12T07:53:05.681647 #21324]  INFO -- : Completed 200 OK in 150ms (Views: 112.3ms | ActiveRecord: 8.3ms)
I, [2015-07-12T07:53:14.630707 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436687522666" for 192.168.33.1 at 2015-07-12 07:53:14 +0000
I, [2015-07-12T07:53:14.734491 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T07:53:14.734727 #21324]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436687522666"}
I, [2015-07-12T07:53:15.008111 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T07:53:15.008781 #21324]  INFO -- : Completed 200 OK in 274ms (Views: 273.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T07:53:15.089376 #21324]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 07:53:15 +0000
I, [2015-07-12T07:53:15.182090 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T07:53:15.182354 #21324]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T07:53:15.184949 #21324] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T07:53:15.186155 #21324] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 07:53:15.185295"], ["updated_at", "2015-07-12 07:53:15.185295"]]
D, [2015-07-12T07:53:15.188995 #21324] DEBUG -- :   [1m[36m (2.3ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T07:53:15.194466 #21324] DEBUG -- :   [1m[35mPlan Load (4.8ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T07:53:15.205725 #21324] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T07:53:15.635381 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (356.8ms)
I, [2015-07-12T07:53:15.637003 #21324]  INFO -- : Completed 200 OK in 454ms (Views: 430.5ms | ActiveRecord: 8.5ms)
I, [2015-07-12T07:53:17.086523 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436687532503" for 192.168.33.1 at 2015-07-12 07:53:17 +0000
I, [2015-07-12T07:53:17.191340 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T07:53:17.191542 #21324]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436687532503"}
I, [2015-07-12T07:53:17.462962 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T07:53:17.463790 #21324]  INFO -- : Completed 200 OK in 272ms (Views: 271.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T07:53:17.587728 #21324]  INFO -- : Started GET "/sales?group=&group_btn=a&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 07:53:17 +0000
I, [2015-07-12T07:53:17.693614 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T07:53:17.693849 #21324]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"a", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T07:53:17.695438 #21324] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T07:53:17.696923 #21324] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group=&group_btn=a&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group\"=>\"\", \"group_btn\"=>\"a\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 07:53:17.695730"], ["updated_at", "2015-07-12 07:53:17.695730"]]
D, [2015-07-12T07:53:17.700418 #21324] DEBUG -- :   [1m[35m (2.9ms)[0m  COMMIT
D, [2015-07-12T07:53:17.704030 #21324] DEBUG -- :   [1m[36mPlan Load (2.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T07:53:17.705960 #21324] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T07:53:17.806276 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (23.1ms)
I, [2015-07-12T07:53:17.807739 #21324]  INFO -- : Completed 200 OK in 114ms (Views: 101.2ms | ActiveRecord: 6.6ms)
I, [2015-07-12T07:53:20.998366 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436687534654" for 192.168.33.1 at 2015-07-12 07:53:20 +0000
I, [2015-07-12T07:53:21.087981 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T07:53:21.088131 #21324]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436687534654"}
I, [2015-07-12T07:53:21.353104 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T07:53:21.353829 #21324]  INFO -- : Completed 200 OK in 266ms (Views: 264.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T07:53:21.481107 #21324]  INFO -- : Started GET "/sales?group=a&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 07:53:21 +0000
I, [2015-07-12T07:53:21.579780 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T07:53:21.580026 #21324]  INFO -- :   Parameters: {"group"=>"a", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T07:53:21.581718 #21324] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T07:53:21.584505 #21324] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group=a&group_btn=b&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group\"=>\"a\", \"group_btn\"=>\"b\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 07:53:21.583130"], ["updated_at", "2015-07-12 07:53:21.583130"]]
D, [2015-07-12T07:53:21.586357 #21324] DEBUG -- :   [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T07:53:21.590542 #21324] DEBUG -- :   [1m[35mPlan Load (3.4ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T07:53:21.595922 #21324] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T07:53:21.699464 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.0ms)
I, [2015-07-12T07:53:21.700832 #21324]  INFO -- : Completed 200 OK in 121ms (Views: 104.4ms | ActiveRecord: 5.4ms)
I, [2015-07-12T07:53:47.004774 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436687538499" for 192.168.33.1 at 2015-07-12 07:53:47 +0000
I, [2015-07-12T07:53:47.098434 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T07:53:47.098463 #21324]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436687538499"}
I, [2015-07-12T07:53:47.364898 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T07:53:47.365693 #21324]  INFO -- : Completed 200 OK in 267ms (Views: 266.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T07:53:47.457741 #21324]  INFO -- : Started GET "/sales?group=a&group_btn=a&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 07:53:47 +0000
I, [2015-07-12T07:53:47.556515 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T07:53:47.556769 #21324]  INFO -- :   Parameters: {"group"=>"a", "group_btn"=>"a", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T07:53:47.558352 #21324] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T07:53:47.559778 #21324] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group=a&group_btn=a&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group\"=>\"a\", \"group_btn\"=>\"a\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 07:53:47.558641"], ["updated_at", "2015-07-12 07:53:47.558641"]]
D, [2015-07-12T07:53:47.562766 #21324] DEBUG -- :   [1m[35m (2.3ms)[0m  COMMIT
D, [2015-07-12T07:53:47.567034 #21324] DEBUG -- :   [1m[36mPlan Load (3.0ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T07:53:47.568461 #21324] DEBUG -- :   [1m[35m (0.3ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T07:53:47.674265 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.3ms)
I, [2015-07-12T07:53:47.675772 #21324]  INFO -- : Completed 200 OK in 119ms (Views: 106.7ms | ActiveRecord: 5.9ms)
I, [2015-07-12T07:54:11.246653 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436687564174" for 192.168.33.1 at 2015-07-12 07:54:11 +0000
I, [2015-07-12T07:54:11.342755 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T07:54:11.343000 #21324]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436687564174"}
I, [2015-07-12T07:54:11.614669 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T07:54:11.615657 #21324]  INFO -- : Completed 200 OK in 272ms (Views: 272.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T07:54:11.723669 #21324]  INFO -- : Started GET "/sales?group=a&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 07:54:11 +0000
I, [2015-07-12T07:54:11.821111 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T07:54:11.821206 #21324]  INFO -- :   Parameters: {"group"=>"a", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T07:54:11.823283 #21324] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T07:54:11.824660 #21324] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group=a&group_btn=b&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group\"=>\"a\", \"group_btn\"=>\"b\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 07:54:11.823559"], ["updated_at", "2015-07-12 07:54:11.823559"]]
D, [2015-07-12T07:54:11.827395 #21324] DEBUG -- :   [1m[36m (2.2ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T07:54:11.831013 #21324] DEBUG -- :   [1m[35mPlan Load (3.0ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T07:54:11.833750 #21324] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T07:54:11.930631 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.2ms)
I, [2015-07-12T07:54:11.932222 #21324]  INFO -- : Completed 200 OK in 111ms (Views: 97.8ms | ActiveRecord: 6.0ms)
I, [2015-07-12T07:55:58.707741 #21324]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436687588155" for 192.168.33.1 at 2015-07-12 07:55:58 +0000
I, [2015-07-12T07:55:58.807976 #21324]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T07:55:58.808236 #21324]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436687588155"}
I, [2015-07-12T07:55:59.081032 #21324]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T07:55:59.081737 #21324]  INFO -- : Completed 200 OK in 273ms (Views: 272.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T07:55:59.114487 #21324]  INFO -- : Started GET "/sales?group=a&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 07:55:59 +0000
I, [2015-07-12T07:55:59.208777 #21324]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T07:55:59.209011 #21324]  INFO -- :   Parameters: {"group"=>"a", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T07:55:59.211268 #21324] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T07:55:59.212570 #21324] DEBUG -- :   [1m[36mSQL (0.0ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group=a&group_btn=b&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group\"=>\"a\", \"group_btn\"=>\"b\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 07:55:59.211592"], ["updated_at", "2015-07-12 07:55:59.211592"]]
D, [2015-07-12T07:55:59.215167 #21324] DEBUG -- :   [1m[35m (2.0ms)[0m  COMMIT
D, [2015-07-12T07:55:59.218720 #21324] DEBUG -- :   [1m[36mPlan Load (2.8ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T07:55:59.220732 #21324] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T07:55:59.316212 #21324]  INFO -- :   Rendered sales/index.html.erb within layouts/application (23.3ms)
I, [2015-07-12T07:55:59.323677 #21324]  INFO -- : Completed 200 OK in 114ms (Views: 102.3ms | ActiveRecord: 5.5ms)
I, [2015-07-12T07:58:15.792716 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436687694321" for 192.168.33.1 at 2015-07-12 07:58:15 +0000
I, [2015-07-12T07:58:15.918555 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T07:58:15.918901 #23934]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436687694321"}
I, [2015-07-12T07:58:16.204516 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.6ms)
I, [2015-07-12T07:58:16.206484 #23934]  INFO -- : Completed 200 OK in 287ms (Views: 268.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T07:58:16.292336 #23934]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 07:58:16 +0000
I, [2015-07-12T07:58:16.386503 #23934]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T07:58:16.408708 #23934] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T07:58:16.419358 #23934] DEBUG -- :   [1m[35mSQL (0.4ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 07:58:16.408983"], ["updated_at", "2015-07-12 07:58:16.408983"]]
D, [2015-07-12T07:58:16.423253 #23934] DEBUG -- :   [1m[36m (3.1ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T07:58:16.430222 #23934] DEBUG -- :   [1m[35mPlan Load (5.8ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T07:58:16.435643 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T07:58:16.613544 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (98.7ms)
I, [2015-07-12T07:58:16.616491 #23934]  INFO -- : Completed 200 OK in 230ms (Views: 180.5ms | ActiveRecord: 16.0ms)
I, [2015-07-12T07:58:23.102409 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436687830013" for 192.168.33.1 at 2015-07-12 07:58:23 +0000
I, [2015-07-12T07:58:23.197397 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T07:58:23.197656 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436687830013"}
I, [2015-07-12T07:58:23.466553 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T07:58:23.467521 #23934]  INFO -- : Completed 200 OK in 270ms (Views: 269.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T07:58:23.552269 #23934]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 07:58:23 +0000
I, [2015-07-12T07:58:23.655838 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T07:58:23.656090 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T07:58:23.658451 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T07:58:23.659908 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 07:58:23.658787"], ["updated_at", "2015-07-12 07:58:23.658787"]]
D, [2015-07-12T07:58:23.662165 #23934] DEBUG -- :   [1m[35m (1.5ms)[0m  COMMIT
D, [2015-07-12T07:58:23.666842 #23934] DEBUG -- :   [1m[36mPlan Load (3.8ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T07:58:23.681142 #23934] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T07:58:24.112770 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (358.3ms)
I, [2015-07-12T07:58:24.114195 #23934]  INFO -- : Completed 200 OK in 458ms (Views: 432.3ms | ActiveRecord: 7.3ms)
I, [2015-07-12T07:58:32.640072 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436687837422" for 192.168.33.1 at 2015-07-12 07:58:32 +0000
I, [2015-07-12T07:58:32.735955 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T07:58:32.736165 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436687837422"}
I, [2015-07-12T07:58:33.002571 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T07:58:33.003250 #23934]  INFO -- : Completed 200 OK in 267ms (Views: 264.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T07:58:33.073168 #23934]  INFO -- : Started GET "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 07:58:33 +0000
I, [2015-07-12T07:58:33.164141 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T07:58:33.164371 #23934]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T07:58:33.165769 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T07:58:33.167617 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group\"=>\"\", \"group_btn\"=>\"b\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 07:58:33.166045"], ["updated_at", "2015-07-12 07:58:33.166045"]]
D, [2015-07-12T07:58:33.170325 #23934] DEBUG -- :   [1m[36m (2.4ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T07:58:33.174084 #23934] DEBUG -- :   [1m[35mPlan Load (3.0ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T07:58:33.175946 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T07:58:33.278001 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.3ms)
I, [2015-07-12T07:58:33.279533 #23934]  INFO -- : Completed 200 OK in 115ms (Views: 102.9ms | ActiveRecord: 6.1ms)
I, [2015-07-12T08:00:02.189086 #23934]  INFO -- : Started GET "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:00:02 +0000
I, [2015-07-12T08:00:02.555157 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:00:02.555404 #23934]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
I, [2015-07-12T08:00:02.556610 #23934]  INFO -- : Completed 500 Internal Server Error in 1ms
F, [2015-07-12T08:00:02.558580 #23934] FATAL -- : 
NoMethodError (undefined method `debug=' for #<ActiveSupport::Logger:0x007f4c32dab788>):
  app/controllers/sales_controller.rb:152:in `index'


I, [2015-07-12T08:00:11.489685 #23934]  INFO -- : Started GET "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:00:11 +0000
I, [2015-07-12T08:00:11.846814 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:00:11.846933 #23934]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
I, [2015-07-12T08:00:11.851653 #23934]  INFO -- : Completed 500 Internal Server Error in 4ms
F, [2015-07-12T08:00:11.856263 #23934] FATAL -- : 
NameError (undefined local variable or method `debug' for #<SalesController:0x007f4c34d5f5e8>):
  app/controllers/sales_controller.rb:152:in `index'


I, [2015-07-12T08:00:23.890021 #23934]  INFO -- : Started GET "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:00:23 +0000
I, [2015-07-12T08:00:24.230372 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:00:24.231230 #23934]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
I, [2015-07-12T08:00:24.235210 #23934]  INFO -- : Completed 500 Internal Server Error in 3ms
F, [2015-07-12T08:00:24.240312 #23934] FATAL -- : 
NameError (undefined local variable or method `debug' for #<SalesController:0x007f4c346c7eb0>):
  app/controllers/sales_controller.rb:152:in `index'


I, [2015-07-12T08:00:34.590066 #23934]  INFO -- : Started GET "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:00:34 +0000
I, [2015-07-12T08:00:34.928922 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:00:34.929399 #23934]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
I, [2015-07-12T08:00:34.930597 #23934]  INFO -- : Completed 500 Internal Server Error in 1ms
F, [2015-07-12T08:00:34.931479 #23934] FATAL -- : 
NoMethodError (undefined method `debug=' for #<ActiveSupport::Logger:0x007f4c32dab788>):
  app/controllers/sales_controller.rb:152:in `index'


I, [2015-07-12T08:01:51.239942 #23934]  INFO -- : Started GET "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:01:51 +0000
I, [2015-07-12T08:01:51.599764 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:01:51.600018 #23934]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:01:51.601456 #23934] DEBUG -- : a
D, [2015-07-12T08:01:51.627409 #23934] DEBUG -- :   [1m[35mPlan Load (3.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:01:51.652810 #23934] DEBUG -- :   [1m[36m (0.3ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:01:51.753232 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.6ms)
I, [2015-07-12T08:01:51.754900 #23934]  INFO -- : Completed 200 OK in 155ms (Views: 101.4ms | ActiveRecord: 4.9ms)
I, [2015-07-12T08:02:34.318098 #23934]  INFO -- : Started GET "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:02:34 +0000
I, [2015-07-12T08:02:34.648431 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:02:34.648653 #23934]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:02:34.650019 #23934] DEBUG -- : *************
I, [2015-07-12T08:02:34.657595 #23934]  INFO -- : Completed 500 Internal Server Error in 9ms
F, [2015-07-12T08:02:34.663237 #23934] FATAL -- : 
NameError (undefined local variable or method `param_group' for #<SalesController:0x007f4c34cbc848>):
  app/controllers/sales_controller.rb:38:in `index'


I, [2015-07-12T08:02:45.361093 #23934]  INFO -- : Started GET "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:02:45 +0000
I, [2015-07-12T08:02:45.677313 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:02:45.677605 #23934]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
I, [2015-07-12T08:02:45.682021 #23934]  INFO -- : Completed 500 Internal Server Error in 4ms
F, [2015-07-12T08:02:45.686626 #23934] FATAL -- : 
NameError (undefined local variable or method `param_group' for #<SalesController:0x007f4c345e8648>):
  app/controllers/sales_controller.rb:37:in `index'


I, [2015-07-12T08:03:14.775377 #23934]  INFO -- : Started GET "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:03:14 +0000
I, [2015-07-12T08:03:15.176659 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:03:15.176946 #23934]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:03:15.177710 #23934] DEBUG -- : a
D, [2015-07-12T08:03:15.178001 #23934] DEBUG -- : a
D, [2015-07-12T08:03:15.203378 #23934] DEBUG -- :   [1m[35mPlan Load (2.8ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:03:15.230600 #23934] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:03:15.332031 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (26.6ms)
I, [2015-07-12T08:03:15.333620 #23934]  INFO -- : Completed 200 OK in 156ms (Views: 102.3ms | ActiveRecord: 4.3ms)
I, [2015-07-12T08:03:46.248763 #23934]  INFO -- : Started GET "/sales?group=&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:03:46 +0000
I, [2015-07-12T08:03:46.618976 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:03:46.619229 #23934]  INFO -- :   Parameters: {"group"=>"", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:03:46.619884 #23934] DEBUG -- : 2
D, [2015-07-12T08:03:46.620110 #23934] DEBUG -- : a
D, [2015-07-12T08:03:46.646701 #23934] DEBUG -- :   [1m[35mPlan Load (3.2ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:03:46.684084 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:03:46.785921 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.4ms)
I, [2015-07-12T08:03:46.787807 #23934]  INFO -- : Completed 200 OK in 168ms (Views: 103.1ms | ActiveRecord: 5.1ms)
I, [2015-07-12T08:04:01.625936 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688156381" for 192.168.33.1 at 2015-07-12 08:04:01 +0000
I, [2015-07-12T08:04:01.734319 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:04:01.734553 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688156381"}
I, [2015-07-12T08:04:01.998024 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:04:02.002113 #23934]  INFO -- : Completed 200 OK in 267ms (Views: 266.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:04:02.099777 #23934]  INFO -- : Started GET "/sales?group=a&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:04:02 +0000
I, [2015-07-12T08:04:02.201199 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:04:02.201397 #23934]  INFO -- :   Parameters: {"group"=>"a", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:04:02.230710 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:04:02.232466 #23934] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group=a&group_btn=b&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group\"=>\"a\", \"group_btn\"=>\"b\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:04:02.231139"], ["updated_at", "2015-07-12 08:04:02.231139"]]
D, [2015-07-12T08:04:02.235947 #23934] DEBUG -- :   [1m[35m (2.7ms)[0m  COMMIT
D, [2015-07-12T08:04:02.236547 #23934] DEBUG -- : 2
D, [2015-07-12T08:04:02.236612 #23934] DEBUG -- : a
D, [2015-07-12T08:04:02.240463 #23934] DEBUG -- :   [1m[36mPlan Load (3.3ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:04:02.242973 #23934] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:04:02.344322 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (23.3ms)
I, [2015-07-12T08:04:02.346108 #23934]  INFO -- : Completed 200 OK in 145ms (Views: 102.4ms | ActiveRecord: 8.5ms)
I, [2015-07-12T08:05:10.248129 #23934]  INFO -- : Started GET "/sales?group=a&group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:05:10 +0000
I, [2015-07-12T08:05:10.353165 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:05:10.353456 #23934]  INFO -- :   Parameters: {"group"=>"a", "group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:05:10.354253 #23934] DEBUG -- : 2
D, [2015-07-12T08:05:10.354461 #23934] DEBUG -- : a
D, [2015-07-12T08:05:10.357552 #23934] DEBUG -- :   [1m[36mPlan Load (2.6ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:05:10.360120 #23934] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:05:10.501970 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (61.6ms)
I, [2015-07-12T08:05:10.503581 #23934]  INFO -- : Completed 200 OK in 150ms (Views: 142.8ms | ActiveRecord: 3.1ms)
I, [2015-07-12T08:05:13.262599 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688239129" for 192.168.33.1 at 2015-07-12 08:05:13 +0000
I, [2015-07-12T08:05:13.373288 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:05:13.373494 #23934]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436688239129"}
I, [2015-07-12T08:05:13.647755 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:05:13.648861 #23934]  INFO -- : Completed 200 OK in 274ms (Views: 273.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:05:13.720772 #23934]  INFO -- : Started GET "/sales?group_btn=a&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:05:13 +0000
I, [2015-07-12T08:05:13.817694 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:05:13.817833 #23934]  INFO -- :   Parameters: {"group_btn"=>"a", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:05:13.819571 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:05:13.821870 #23934] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=a&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"a\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:05:13.819900"], ["updated_at", "2015-07-12 08:05:13.819900"]]
D, [2015-07-12T08:05:13.825009 #23934] DEBUG -- :   [1m[36m (2.5ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:05:13.825580 #23934] DEBUG -- : 2
D, [2015-07-12T08:05:13.825924 #23934] DEBUG -- : a
D, [2015-07-12T08:05:13.830193 #23934] DEBUG -- :   [1m[35mPlan Load (3.6ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:05:13.831861 #23934] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:05:13.951939 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (33.4ms)
I, [2015-07-12T08:05:13.953349 #23934]  INFO -- : Completed 200 OK in 135ms (Views: 120.7ms | ActiveRecord: 6.6ms)
I, [2015-07-12T08:05:29.918341 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688242547" for 192.168.33.1 at 2015-07-12 08:05:29 +0000
I, [2015-07-12T08:05:30.029059 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:05:30.029323 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688242547"}
I, [2015-07-12T08:05:30.301538 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:05:30.302364 #23934]  INFO -- : Completed 200 OK in 273ms (Views: 272.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:05:30.395384 #23934]  INFO -- : Started GET "/sales?group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:05:30 +0000
I, [2015-07-12T08:05:30.490509 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:05:30.490737 #23934]  INFO -- :   Parameters: {"group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:05:30.493289 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:05:30.494776 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=b&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"b\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:05:30.493601"], ["updated_at", "2015-07-12 08:05:30.493601"]]
D, [2015-07-12T08:05:30.497371 #23934] DEBUG -- :   [1m[35m (2.0ms)[0m  COMMIT
D, [2015-07-12T08:05:30.497772 #23934] DEBUG -- : 2
D, [2015-07-12T08:05:30.498051 #23934] DEBUG -- : a
D, [2015-07-12T08:05:30.501734 #23934] DEBUG -- :   [1m[36mPlan Load (3.2ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:05:30.503538 #23934] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:05:30.600818 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (23.6ms)
I, [2015-07-12T08:05:30.602588 #23934]  INFO -- : Completed 200 OK in 112ms (Views: 98.4ms | ActiveRecord: 6.0ms)
I, [2015-07-12T08:06:28.164602 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688258995" for 192.168.33.1 at 2015-07-12 08:06:28 +0000
I, [2015-07-12T08:06:28.482594 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:06:28.482885 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688258995"}
I, [2015-07-12T08:06:28.778374 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:06:28.779408 #23934]  INFO -- : Completed 200 OK in 296ms (Views: 295.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:06:28.846878 #23934]  INFO -- : Started GET "/sales?group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:06:28 +0000
I, [2015-07-12T08:06:28.974312 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:06:28.974603 #23934]  INFO -- :   Parameters: {"group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:06:29.007129 #23934] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:06:29.009278 #23934] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=b&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"b\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:06:29.007613"], ["updated_at", "2015-07-12 08:06:29.007613"]]
D, [2015-07-12T08:06:29.012359 #23934] DEBUG -- :   [1m[36m (2.2ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:06:29.012934 #23934] DEBUG -- : 2
D, [2015-07-12T08:06:29.013153 #23934] DEBUG -- : 3
D, [2015-07-12T08:06:29.013464 #23934] DEBUG -- : b
D, [2015-07-12T08:06:29.047972 #23934] DEBUG -- :   [1m[35mPlan Load (5.3ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'b' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:06:29.086660 #23934] DEBUG -- :   [1m[36m (0.6ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:06:29.208900 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (34.5ms)
I, [2015-07-12T08:06:29.210763 #23934]  INFO -- : Completed 200 OK in 236ms (Views: 123.2ms | ActiveRecord: 12.5ms)
I, [2015-07-12T08:07:01.020638 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688316944" for 192.168.33.1 at 2015-07-12 08:07:01 +0000
I, [2015-07-12T08:07:01.112253 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:07:01.112481 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688316944"}
I, [2015-07-12T08:07:01.375322 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:07:01.375893 #23934]  INFO -- : Completed 200 OK in 263ms (Views: 262.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:07:01.436078 #23934]  INFO -- : Started GET "/sales?group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:07:01 +0000
I, [2015-07-12T08:07:01.530102 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:07:01.530324 #23934]  INFO -- :   Parameters: {"group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:07:01.531740 #23934] DEBUG -- :   [1m[35m (0.0ms)[0m  BEGIN
D, [2015-07-12T08:07:01.533908 #23934] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=b&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"b\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:07:01.531939"], ["updated_at", "2015-07-12 08:07:01.531939"]]
D, [2015-07-12T08:07:01.536765 #23934] DEBUG -- :   [1m[35m (2.2ms)[0m  COMMIT
D, [2015-07-12T08:07:01.537182 #23934] DEBUG -- : 2
D, [2015-07-12T08:07:01.537368 #23934] DEBUG -- : 3
D, [2015-07-12T08:07:01.537601 #23934] DEBUG -- : b
D, [2015-07-12T08:07:01.540880 #23934] DEBUG -- :   [1m[36mPlan Load (2.8ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'b' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:07:01.543990 #23934] DEBUG -- :   [1m[35m (0.6ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:07:01.642384 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.0ms)
I, [2015-07-12T08:07:01.643583 #23934]  INFO -- : Completed 200 OK in 113ms (Views: 98.9ms | ActiveRecord: 6.0ms)
I, [2015-07-12T08:07:02.666405 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688349006" for 192.168.33.1 at 2015-07-12 08:07:02 +0000
I, [2015-07-12T08:07:02.759751 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:07:02.759975 #23934]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436688349006"}
I, [2015-07-12T08:07:03.042435 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:07:03.043389 #23934]  INFO -- : Completed 200 OK in 283ms (Views: 282.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:07:03.138769 #23934]  INFO -- : Started GET "/sales?group_btn=a&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:07:03 +0000
I, [2015-07-12T08:07:03.240657 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:07:03.240866 #23934]  INFO -- :   Parameters: {"group_btn"=>"a", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:07:03.241987 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:07:03.244051 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=a&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"a\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:07:03.242259"], ["updated_at", "2015-07-12 08:07:03.242259"]]
D, [2015-07-12T08:07:03.246265 #23934] DEBUG -- :   [1m[36m (1.6ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:07:03.246697 #23934] DEBUG -- : 2
D, [2015-07-12T08:07:03.246876 #23934] DEBUG -- : 3
D, [2015-07-12T08:07:03.247103 #23934] DEBUG -- : b
D, [2015-07-12T08:07:03.250379 #23934] DEBUG -- :   [1m[35mPlan Load (2.8ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'b' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:07:03.252044 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:07:03.351605 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (23.9ms)
I, [2015-07-12T08:07:03.353075 #23934]  INFO -- : Completed 200 OK in 112ms (Views: 100.5ms | ActiveRecord: 5.2ms)
I, [2015-07-12T08:10:36.504346 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436688350671" for 192.168.33.1 at 2015-07-12 08:10:36 +0000
I, [2015-07-12T08:10:36.824949 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:10:36.825253 #23934]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436688350671"}
I, [2015-07-12T08:10:37.093206 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:10:37.093959 #23934]  INFO -- : Completed 200 OK in 268ms (Views: 267.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:10:37.187681 #23934]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 08:10:37 +0000
I, [2015-07-12T08:10:37.304157 #23934]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T08:10:37.333358 #23934] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T08:10:37.335027 #23934] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:10:37.333759"], ["updated_at", "2015-07-12 08:10:37.333759"]]
D, [2015-07-12T08:10:37.336767 #23934] DEBUG -- :   [1m[35m (1.1ms)[0m  COMMIT
D, [2015-07-12T08:10:37.337253 #23934] DEBUG -- : 
D, [2015-07-12T08:10:37.363665 #23934] DEBUG -- :   [1m[36mPlan Load (3.1ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:10:37.390188 #23934] DEBUG -- :   [1m[35m (0.3ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T08:10:37.490917 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.9ms)
I, [2015-07-12T08:10:37.493182 #23934]  INFO -- : Completed 200 OK in 189ms (Views: 101.7ms | ActiveRecord: 8.1ms)
I, [2015-07-12T08:10:45.396983 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436688562339" for 192.168.33.1 at 2015-07-12 08:10:45 +0000
I, [2015-07-12T08:10:45.507917 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:10:45.508143 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436688562339"}
I, [2015-07-12T08:10:45.780168 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:10:45.780820 #23934]  INFO -- : Completed 200 OK in 273ms (Views: 272.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:10:45.867221 #23934]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 08:10:45 +0000
I, [2015-07-12T08:10:45.963769 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:10:45.964019 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T08:10:45.965553 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:10:45.967715 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:10:45.965852"], ["updated_at", "2015-07-12 08:10:45.965852"]]
D, [2015-07-12T08:10:45.970373 #23934] DEBUG -- :   [1m[36m (2.3ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:10:45.970950 #23934] DEBUG -- : 
D, [2015-07-12T08:10:45.976099 #23934] DEBUG -- :   [1m[35mPlan Load (4.6ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:10:45.987101 #23934] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:10:46.419374 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (357.8ms)
I, [2015-07-12T08:10:46.421003 #23934]  INFO -- : Completed 200 OK in 457ms (Views: 433.3ms | ActiveRecord: 8.3ms)
I, [2015-07-12T08:10:52.295949 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688571172" for 192.168.33.1 at 2015-07-12 08:10:52 +0000
I, [2015-07-12T08:10:52.398311 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:10:52.398425 #23934]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436688571172"}
I, [2015-07-12T08:10:52.674631 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:10:52.675705 #23934]  INFO -- : Completed 200 OK in 276ms (Views: 275.8ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:10:52.775246 #23934]  INFO -- : Started GET "/sales?group_btn=a&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:10:52 +0000
I, [2015-07-12T08:10:52.873059 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:10:52.873321 #23934]  INFO -- :   Parameters: {"group_btn"=>"a", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:10:52.875596 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:10:52.876923 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=a&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"a\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:10:52.875899"], ["updated_at", "2015-07-12 08:10:52.875899"]]
D, [2015-07-12T08:10:52.879442 #23934] DEBUG -- :   [1m[35m (1.8ms)[0m  COMMIT
D, [2015-07-12T08:10:52.880475 #23934] DEBUG -- : a
D, [2015-07-12T08:10:52.883345 #23934] DEBUG -- :   [1m[36mPlan Load (2.4ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:10:52.885774 #23934] DEBUG -- :   [1m[35m (1.1ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:10:52.983972 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.8ms)
I, [2015-07-12T08:10:52.985144 #23934]  INFO -- : Completed 200 OK in 112ms (Views: 98.8ms | ActiveRecord: 5.6ms)
I, [2015-07-12T08:10:56.698314 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688577657" for 192.168.33.1 at 2015-07-12 08:10:56 +0000
I, [2015-07-12T08:10:56.789721 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:10:56.789944 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688577657"}
I, [2015-07-12T08:10:57.057941 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:10:57.058753 #23934]  INFO -- : Completed 200 OK in 269ms (Views: 268.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:10:57.196072 #23934]  INFO -- : Started GET "/sales?group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:10:57 +0000
I, [2015-07-12T08:10:57.296179 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:10:57.296455 #23934]  INFO -- :   Parameters: {"group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:10:57.297889 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:10:57.300044 #23934] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=b&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"b\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:10:57.298193"], ["updated_at", "2015-07-12 08:10:57.298193"]]
D, [2015-07-12T08:10:57.302652 #23934] DEBUG -- :   [1m[36m (2.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:10:57.303116 #23934] DEBUG -- : b
D, [2015-07-12T08:10:57.307026 #23934] DEBUG -- :   [1m[35mPlan Load (3.4ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'b' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:10:57.309094 #23934] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:10:57.409244 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.3ms)
I, [2015-07-12T08:10:57.410642 #23934]  INFO -- : Completed 200 OK in 114ms (Views: 100.6ms | ActiveRecord: 6.3ms)
I, [2015-07-12T08:11:34.548386 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688582032" for 192.168.33.1 at 2015-07-12 08:11:34 +0000
I, [2015-07-12T08:11:34.642266 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:11:34.642463 #23934]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436688582032"}
I, [2015-07-12T08:11:34.909419 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:11:34.910251 #23934]  INFO -- : Completed 200 OK in 268ms (Views: 267.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:11:34.988825 #23934]  INFO -- : Started GET "/sales?group_btn=a&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:11:34 +0000
I, [2015-07-12T08:11:35.097213 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:11:35.097456 #23934]  INFO -- :   Parameters: {"group_btn"=>"a", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:11:35.099175 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:11:35.100728 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=a&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"a\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:11:35.099541"], ["updated_at", "2015-07-12 08:11:35.099541"]]
D, [2015-07-12T08:11:35.103999 #23934] DEBUG -- :   [1m[35m (2.7ms)[0m  COMMIT
D, [2015-07-12T08:11:35.104494 #23934] DEBUG -- : a
D, [2015-07-12T08:11:35.108801 #23934] DEBUG -- :   [1m[36mPlan Load (3.5ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:11:35.110733 #23934] DEBUG -- :   [1m[35m (0.6ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:11:35.210291 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.7ms)
I, [2015-07-12T08:11:35.211706 #23934]  INFO -- : Completed 200 OK in 114ms (Views: 100.3ms | ActiveRecord: 7.2ms)
I, [2015-07-12T08:11:50.036864 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688619400" for 192.168.33.1 at 2015-07-12 08:11:50 +0000
I, [2015-07-12T08:11:50.137760 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:11:50.137984 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688619400"}
I, [2015-07-12T08:11:50.417585 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:11:50.418533 #23934]  INFO -- : Completed 200 OK in 280ms (Views: 279.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:11:50.489314 #23934]  INFO -- : Started GET "/sales?group_btn=b&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:11:50 +0000
I, [2015-07-12T08:11:50.584639 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:11:50.584688 #23934]  INFO -- :   Parameters: {"group_btn"=>"b", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:11:50.586810 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:11:50.588312 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=b&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"b\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:11:50.587106"], ["updated_at", "2015-07-12 08:11:50.587106"]]
D, [2015-07-12T08:11:50.591657 #23934] DEBUG -- :   [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:11:50.592206 #23934] DEBUG -- : b
D, [2015-07-12T08:11:50.595866 #23934] DEBUG -- :   [1m[35mPlan Load (3.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'b' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:11:50.597243 #23934] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:11:50.701536 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (31.1ms)
I, [2015-07-12T08:11:50.703173 #23934]  INFO -- : Completed 200 OK in 118ms (Views: 105.3ms | ActiveRecord: 6.6ms)
I, [2015-07-12T08:12:33.093152 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436688634714" for 192.168.33.1 at 2015-07-12 08:12:33 +0000
I, [2015-07-12T08:12:33.189487 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:12:33.189709 #23934]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436688634714"}
I, [2015-07-12T08:12:33.455514 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:12:33.457111 #23934]  INFO -- : Completed 200 OK in 267ms (Views: 266.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:12:33.560892 #23934]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 08:12:33 +0000
I, [2015-07-12T08:12:33.670072 #23934]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T08:12:33.671906 #23934] DEBUG -- :   [1m[35m (0.0ms)[0m  BEGIN
D, [2015-07-12T08:12:33.673246 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:12:33.672161"], ["updated_at", "2015-07-12 08:12:33.672161"]]
D, [2015-07-12T08:12:33.676523 #23934] DEBUG -- :   [1m[35m (2.6ms)[0m  COMMIT
D, [2015-07-12T08:12:33.677461 #23934] DEBUG -- : 
D, [2015-07-12T08:12:33.681747 #23934] DEBUG -- :   [1m[36mPlan Load (3.1ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:12:33.683654 #23934] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T08:12:33.820351 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (60.8ms)
I, [2015-07-12T08:12:33.821880 #23934]  INFO -- : Completed 200 OK in 152ms (Views: 137.8ms | ActiveRecord: 6.3ms)
I, [2015-07-12T08:12:35.911037 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688677332" for 192.168.33.1 at 2015-07-12 08:12:35 +0000
I, [2015-07-12T08:12:36.017445 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:12:36.017742 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688677332"}
I, [2015-07-12T08:12:36.320588 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:12:36.321269 #23934]  INFO -- : Completed 200 OK in 303ms (Views: 302.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:12:36.455777 #23934]  INFO -- : Started GET "/sales?group_btn=b" for 192.168.33.1 at 2015-07-12 08:12:36 +0000
I, [2015-07-12T08:12:36.548508 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:12:36.548773 #23934]  INFO -- :   Parameters: {"group_btn"=>"b"}
D, [2015-07-12T08:12:36.550369 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:12:36.551760 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=b"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"b\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:12:36.550651"], ["updated_at", "2015-07-12 08:12:36.550651"]]
D, [2015-07-12T08:12:36.554759 #23934] DEBUG -- :   [1m[36m (2.4ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:12:36.555250 #23934] DEBUG -- : b
D, [2015-07-12T08:12:36.558830 #23934] DEBUG -- :   [1m[35mPlan Load (3.0ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'b' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:12:36.561189 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T08:12:36.657738 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.4ms)
I, [2015-07-12T08:12:36.659267 #23934]  INFO -- : Completed 200 OK in 110ms (Views: 97.5ms | ActiveRecord: 6.2ms)
I, [2015-07-12T08:12:41.108745 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688680134" for 192.168.33.1 at 2015-07-12 08:12:41 +0000
I, [2015-07-12T08:12:41.199919 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:12:41.200170 #23934]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436688680134"}
I, [2015-07-12T08:12:41.462434 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:12:41.463185 #23934]  INFO -- : Completed 200 OK in 263ms (Views: 262.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:12:41.599219 #23934]  INFO -- : Started GET "/sales?group_btn=a" for 192.168.33.1 at 2015-07-12 08:12:41 +0000
I, [2015-07-12T08:12:41.693392 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:12:41.693546 #23934]  INFO -- :   Parameters: {"group_btn"=>"a"}
D, [2015-07-12T08:12:41.694775 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:12:41.696209 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=a"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"a\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:12:41.695056"], ["updated_at", "2015-07-12 08:12:41.695056"]]
D, [2015-07-12T08:12:41.699531 #23934] DEBUG -- :   [1m[35m (2.2ms)[0m  COMMIT
D, [2015-07-12T08:12:41.699846 #23934] DEBUG -- : a
D, [2015-07-12T08:12:41.703199 #23934] DEBUG -- :   [1m[36mPlan Load (2.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:12:41.704917 #23934] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T08:12:41.811085 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (31.5ms)
I, [2015-07-12T08:12:41.812709 #23934]  INFO -- : Completed 200 OK in 119ms (Views: 106.4ms | ActiveRecord: 5.9ms)
I, [2015-07-12T08:12:45.845949 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688685228" for 192.168.33.1 at 2015-07-12 08:12:45 +0000
I, [2015-07-12T08:12:45.944306 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:12:45.944560 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688685228"}
I, [2015-07-12T08:12:46.213329 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:12:46.214277 #23934]  INFO -- : Completed 200 OK in 270ms (Views: 269.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:12:46.354439 #23934]  INFO -- : Started GET "/sales?group_btn=b" for 192.168.33.1 at 2015-07-12 08:12:46 +0000
I, [2015-07-12T08:12:46.450118 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:12:46.450238 #23934]  INFO -- :   Parameters: {"group_btn"=>"b"}
D, [2015-07-12T08:12:46.452372 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:12:46.453614 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=b"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"b\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:12:46.452604"], ["updated_at", "2015-07-12 08:12:46.452604"]]
D, [2015-07-12T08:12:46.455038 #23934] DEBUG -- :   [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:12:46.456516 #23934] DEBUG -- : b
D, [2015-07-12T08:12:46.459731 #23934] DEBUG -- :   [1m[35mPlan Load (2.9ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'b' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:12:46.461452 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T08:12:46.560225 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.2ms)
I, [2015-07-12T08:12:46.561648 #23934]  INFO -- : Completed 200 OK in 111ms (Views: 99.2ms | ActiveRecord: 4.7ms)
I, [2015-07-12T08:13:01.889613 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=&_=1436688689923" for 192.168.33.1 at 2015-07-12 08:13:01 +0000
I, [2015-07-12T08:13:01.983578 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:13:01.983814 #23934]  INFO -- :   Parameters: {"action_name"=>"", "_"=>"1436688689923"}
I, [2015-07-12T08:13:02.253211 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:13:02.254268 #23934]  INFO -- : Completed 200 OK in 270ms (Views: 269.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:13:03.198874 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436688689924" for 192.168.33.1 at 2015-07-12 08:13:03 +0000
I, [2015-07-12T08:13:03.300663 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:13:03.300712 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436688689924"}
I, [2015-07-12T08:13:03.568023 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:13:03.568706 #23934]  INFO -- : Completed 200 OK in 268ms (Views: 267.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:13:03.654567 #23934]  INFO -- : Started GET "/sales?utf8=&sale_ym_from=&sale_ym_to=&button=" for 192.168.33.1 at 2015-07-12 08:13:03 +0000
I, [2015-07-12T08:13:03.746925 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:13:03.747178 #23934]  INFO -- :   Parameters: {"utf8"=>"", "sale_ym_from"=>"", "sale_ym_to"=>"", "button"=>""}
D, [2015-07-12T08:13:03.748430 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:13:03.750236 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=&sale_ym_from=&sale_ym_to=&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"\", \"sale_ym_from\"=>\"\", \"sale_ym_to\"=>\"\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:13:03.749337"], ["updated_at", "2015-07-12 08:13:03.749337"]]
D, [2015-07-12T08:13:03.753753 #23934] DEBUG -- :   [1m[35m (2.8ms)[0m  COMMIT
D, [2015-07-12T08:13:03.754316 #23934] DEBUG -- : 
D, [2015-07-12T08:13:03.760614 #23934] DEBUG -- :   [1m[36mPlan Load (5.8ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '000000' and usplrepr.plan_ym <= '999999' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:13:03.763253 #23934] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '000000' and profit_ym <= '999999')
I, [2015-07-12T08:13:04.278175 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (438.4ms)
I, [2015-07-12T08:13:04.279691 #23934]  INFO -- : Completed 200 OK in 532ms (Views: 515.7ms | ActiveRecord: 9.4ms)
I, [2015-07-12T08:13:08.184160 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688707441" for 192.168.33.1 at 2015-07-12 08:13:08 +0000
I, [2015-07-12T08:13:08.278749 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:13:08.279018 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688707441"}
I, [2015-07-12T08:13:08.544783 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:13:08.545745 #23934]  INFO -- : Completed 200 OK in 267ms (Views: 266.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:13:08.683329 #23934]  INFO -- : Started GET "/sales?group_btn=b" for 192.168.33.1 at 2015-07-12 08:13:08 +0000
I, [2015-07-12T08:13:08.795756 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:13:08.795998 #23934]  INFO -- :   Parameters: {"group_btn"=>"b"}
D, [2015-07-12T08:13:08.797641 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:13:08.799080 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=b"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"b\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:13:08.797943"], ["updated_at", "2015-07-12 08:13:08.797943"]]
D, [2015-07-12T08:13:08.802960 #23934] DEBUG -- :   [1m[36m (3.2ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:13:08.803450 #23934] DEBUG -- : b
D, [2015-07-12T08:13:08.807167 #23934] DEBUG -- :   [1m[35mPlan Load (3.3ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'b' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:13:08.808916 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T08:13:08.905106 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.6ms)
I, [2015-07-12T08:13:08.906698 #23934]  INFO -- : Completed 200 OK in 110ms (Views: 97.3ms | ActiveRecord: 7.2ms)
I, [2015-07-12T08:13:10.800708 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688712007" for 192.168.33.1 at 2015-07-12 08:13:10 +0000
I, [2015-07-12T08:13:10.899744 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:13:10.899983 #23934]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436688712007"}
I, [2015-07-12T08:13:11.171287 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:13:11.172225 #23934]  INFO -- : Completed 200 OK in 272ms (Views: 271.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:13:11.316201 #23934]  INFO -- : Started GET "/sales?group_btn=a" for 192.168.33.1 at 2015-07-12 08:13:11 +0000
I, [2015-07-12T08:13:11.420668 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:13:11.420932 #23934]  INFO -- :   Parameters: {"group_btn"=>"a"}
D, [2015-07-12T08:13:11.422367 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:13:11.424321 #23934] DEBUG -- :   [1m[36mSQL (1.0ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=a"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"a\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:13:11.422471"], ["updated_at", "2015-07-12 08:13:11.422471"]]
D, [2015-07-12T08:13:11.427904 #23934] DEBUG -- :   [1m[35m (3.0ms)[0m  COMMIT
D, [2015-07-12T08:13:11.428429 #23934] DEBUG -- : a
D, [2015-07-12T08:13:11.431105 #23934] DEBUG -- :   [1m[36mPlan Load (2.2ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'a' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:13:11.434399 #23934] DEBUG -- :   [1m[35m (1.3ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T08:13:11.538580 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.3ms)
I, [2015-07-12T08:13:11.540966 #23934]  INFO -- : Completed 200 OK in 119ms (Views: 105.4ms | ActiveRecord: 7.7ms)
I, [2015-07-12T08:13:17.995035 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86&_=1436688714613" for 192.168.33.1 at 2015-07-12 08:13:17 +0000
I, [2015-07-12T08:13:18.087660 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:13:18.087906 #23934]  INFO -- :   Parameters: {"action_name"=>"システム管理", "_"=>"1436688714613"}
I, [2015-07-12T08:13:18.353634 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:13:18.354607 #23934]  INFO -- : Completed 200 OK in 266ms (Views: 265.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:13:18.454502 #23934]  INFO -- : Started GET "/users" for 192.168.33.1 at 2015-07-12 08:13:18 +0000
I, [2015-07-12T08:13:18.570983 #23934]  INFO -- : Processing by UsersController#index as HTML
D, [2015-07-12T08:13:18.573048 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:13:18.574648 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users"], ["action", "システム管理"], ["parameters", "{\"controller\"=>\"users\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:13:18.573393"], ["updated_at", "2015-07-12 08:13:18.573393"]]
D, [2015-07-12T08:13:18.575959 #23934] DEBUG -- :   [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:13:18.677890 #23934] DEBUG -- :   [1m[35mUser Load (0.5ms)[0m  SELECT "users".* FROM "users"  ORDER BY display_order asc, user_id asc
I, [2015-07-12T08:13:18.691818 #23934]  INFO -- :   Rendered users/index.html.erb within layouts/application (17.6ms)
I, [2015-07-12T08:13:18.693292 #23934]  INFO -- : Completed 200 OK in 122ms (Views: 94.2ms | ActiveRecord: 2.7ms)
I, [2015-07-12T08:13:53.374584 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436688721685" for 192.168.33.1 at 2015-07-12 08:13:53 +0000
I, [2015-07-12T08:13:53.498731 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:13:53.499063 #23934]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436688721685"}
I, [2015-07-12T08:13:53.825581 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:13:53.826532 #23934]  INFO -- : Completed 200 OK in 327ms (Views: 326.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:13:53.916037 #23934]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 08:13:53 +0000
I, [2015-07-12T08:13:54.014838 #23934]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T08:13:54.016292 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:13:54.017805 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:13:54.016633"], ["updated_at", "2015-07-12 08:13:54.016633"]]
D, [2015-07-12T08:13:54.020569 #23934] DEBUG -- :   [1m[36m (2.1ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:13:54.021015 #23934] DEBUG -- : 
D, [2015-07-12T08:13:54.024656 #23934] DEBUG -- :   [1m[35mPlan Load (2.8ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:13:54.027095 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T08:13:54.164796 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (64.5ms)
I, [2015-07-12T08:13:54.166288 #23934]  INFO -- : Completed 200 OK in 151ms (Views: 138.7ms | ActiveRecord: 5.6ms)
I, [2015-07-12T08:13:55.846402 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688756747" for 192.168.33.1 at 2015-07-12 08:13:55 +0000
I, [2015-07-12T08:13:55.936273 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:13:55.936990 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688756747"}
I, [2015-07-12T08:13:56.203435 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:13:56.204348 #23934]  INFO -- : Completed 200 OK in 267ms (Views: 266.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:13:56.345571 #23934]  INFO -- : Started GET "/sales?group_btn=B" for 192.168.33.1 at 2015-07-12 08:13:56 +0000
I, [2015-07-12T08:13:56.437122 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:13:56.437336 #23934]  INFO -- :   Parameters: {"group_btn"=>"B"}
D, [2015-07-12T08:13:56.438730 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:13:56.440705 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=B"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"B\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:13:56.438904"], ["updated_at", "2015-07-12 08:13:56.438904"]]
D, [2015-07-12T08:13:56.444063 #23934] DEBUG -- :   [1m[35m (2.7ms)[0m  COMMIT
D, [2015-07-12T08:13:56.444544 #23934] DEBUG -- : B
D, [2015-07-12T08:13:56.447913 #23934] DEBUG -- :   [1m[36mPlan Load (2.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:13:56.450063 #23934] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T08:13:56.549542 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.7ms)
I, [2015-07-12T08:13:56.550998 #23934]  INFO -- : Completed 200 OK in 113ms (Views: 100.4ms | ActiveRecord: 6.3ms)
I, [2015-07-12T08:13:58.134722 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688759105" for 192.168.33.1 at 2015-07-12 08:13:58 +0000
I, [2015-07-12T08:13:58.232212 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:13:58.232466 #23934]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436688759105"}
I, [2015-07-12T08:13:58.504431 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:13:58.505297 #23934]  INFO -- : Completed 200 OK in 273ms (Views: 272.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:13:58.644686 #23934]  INFO -- : Started GET "/sales?group_btn=A" for 192.168.33.1 at 2015-07-12 08:13:58 +0000
I, [2015-07-12T08:13:58.737580 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:13:58.737630 #23934]  INFO -- :   Parameters: {"group_btn"=>"A"}
D, [2015-07-12T08:13:58.739658 #23934] DEBUG -- :   [1m[36m (0.0ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:13:58.741142 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=A"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"A\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:13:58.739953"], ["updated_at", "2015-07-12 08:13:58.739953"]]
D, [2015-07-12T08:13:58.744137 #23934] DEBUG -- :   [1m[36m (2.3ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:13:58.744500 #23934] DEBUG -- : A
D, [2015-07-12T08:13:58.748259 #23934] DEBUG -- :   [1m[35mPlan Load (3.4ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:13:58.750176 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T08:13:58.849543 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.6ms)
I, [2015-07-12T08:13:58.850776 #23934]  INFO -- : Completed 200 OK in 113ms (Views: 100.3ms | ActiveRecord: 6.4ms)
I, [2015-07-12T08:14:04.065319 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436688761378" for 192.168.33.1 at 2015-07-12 08:14:04 +0000
I, [2015-07-12T08:14:04.173267 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:14:04.174022 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436688761378"}
I, [2015-07-12T08:14:04.447651 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:14:04.448342 #23934]  INFO -- : Completed 200 OK in 274ms (Views: 273.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:14:04.577537 #23934]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 08:14:04 +0000
I, [2015-07-12T08:14:04.678842 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:14:04.679068 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T08:14:04.681129 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:14:04.682156 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:14:04.681424"], ["updated_at", "2015-07-12 08:14:04.681424"]]
D, [2015-07-12T08:14:04.685896 #23934] DEBUG -- :   [1m[35m (2.4ms)[0m  COMMIT
D, [2015-07-12T08:14:04.686407 #23934] DEBUG -- : 
D, [2015-07-12T08:14:04.692275 #23934] DEBUG -- :   [1m[36mPlan Load (5.4ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:14:04.694871 #23934] DEBUG -- :   [1m[35m (0.6ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:14:05.147190 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (377.1ms)
I, [2015-07-12T08:14:05.149438 #23934]  INFO -- : Completed 200 OK in 470ms (Views: 453.8ms | ActiveRecord: 8.8ms)
I, [2015-07-12T08:14:06.407171 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688767606" for 192.168.33.1 at 2015-07-12 08:14:06 +0000
I, [2015-07-12T08:14:06.507269 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:14:06.507517 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688767606"}
I, [2015-07-12T08:14:06.783056 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:14:06.783736 #23934]  INFO -- : Completed 200 OK in 276ms (Views: 275.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:14:06.933235 #23934]  INFO -- : Started GET "/sales?group_btn=B" for 192.168.33.1 at 2015-07-12 08:14:06 +0000
I, [2015-07-12T08:14:07.042710 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:14:07.042966 #23934]  INFO -- :   Parameters: {"group_btn"=>"B"}
D, [2015-07-12T08:14:07.044421 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:14:07.046579 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=B"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"B\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:14:07.044662"], ["updated_at", "2015-07-12 08:14:07.044662"]]
D, [2015-07-12T08:14:07.049551 #23934] DEBUG -- :   [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:14:07.049799 #23934] DEBUG -- : B
D, [2015-07-12T08:14:07.053170 #23934] DEBUG -- :   [1m[35mPlan Load (2.9ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:14:07.054727 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T08:14:07.153311 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (22.4ms)
I, [2015-07-12T08:14:07.155341 #23934]  INFO -- : Completed 200 OK in 112ms (Views: 99.8ms | ActiveRecord: 6.3ms)
I, [2015-07-12T08:16:14.820691 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436688769590" for 192.168.33.1 at 2015-07-12 08:16:14 +0000
I, [2015-07-12T08:16:14.911870 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:16:14.911929 #23934]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436688769590"}
I, [2015-07-12T08:16:15.190446 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:16:15.191306 #23934]  INFO -- : Completed 200 OK in 279ms (Views: 278.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:16:15.332145 #23934]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 08:16:15 +0000
I, [2015-07-12T08:16:15.423773 #23934]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T08:16:15.425481 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:16:15.427071 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:16:15.425653"], ["updated_at", "2015-07-12 08:16:15.425653"]]
D, [2015-07-12T08:16:15.430173 #23934] DEBUG -- :   [1m[35m (2.2ms)[0m  COMMIT
D, [2015-07-12T08:16:15.430644 #23934] DEBUG -- : 
D, [2015-07-12T08:16:15.434009 #23934] DEBUG -- :   [1m[36mPlan Load (2.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:16:15.435795 #23934] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T08:16:15.573340 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (61.9ms)
I, [2015-07-12T08:16:15.574582 #23934]  INFO -- : Completed 200 OK in 151ms (Views: 138.3ms | ActiveRecord: 5.8ms)
I, [2015-07-12T08:16:19.560708 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436688896522" for 192.168.33.1 at 2015-07-12 08:16:19 +0000
I, [2015-07-12T08:16:19.657290 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:16:19.658035 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436688896522"}
I, [2015-07-12T08:16:19.925641 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:16:19.926360 #23934]  INFO -- : Completed 200 OK in 268ms (Views: 267.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:16:20.052697 #23934]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 08:16:20 +0000
I, [2015-07-12T08:16:20.141681 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:16:20.141948 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T08:16:20.143467 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:16:20.144709 #23934] DEBUG -- :   [1m[35mSQL (0.1ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:16:20.143697"], ["updated_at", "2015-07-12 08:16:20.143697"]]
D, [2015-07-12T08:16:20.147286 #23934] DEBUG -- :   [1m[36m (2.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:16:20.147735 #23934] DEBUG -- : 
D, [2015-07-12T08:16:20.152731 #23934] DEBUG -- :   [1m[35mPlan Load (4.5ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:16:20.155592 #23934] DEBUG -- :   [1m[36m (0.7ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:16:20.588299 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (353.0ms)
I, [2015-07-12T08:16:20.589777 #23934]  INFO -- : Completed 200 OK in 448ms (Views: 433.6ms | ActiveRecord: 7.4ms)
I, [2015-07-12T08:16:22.828710 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688901481" for 192.168.33.1 at 2015-07-12 08:16:22 +0000
I, [2015-07-12T08:16:22.922117 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:16:22.922356 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688901481"}
I, [2015-07-12T08:16:23.188745 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:16:23.189726 #23934]  INFO -- : Completed 200 OK in 267ms (Views: 266.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:16:23.331586 #23934]  INFO -- : Started GET "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:16:23 +0000
I, [2015-07-12T08:16:23.439042 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:16:23.439197 #23934]  INFO -- :   Parameters: {"group_btn"=>"B", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:16:23.440974 #23934] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T08:16:23.442217 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"B\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:16:23.441308"], ["updated_at", "2015-07-12 08:16:23.441308"]]
D, [2015-07-12T08:16:23.444445 #23934] DEBUG -- :   [1m[35m (1.1ms)[0m  COMMIT
D, [2015-07-12T08:16:23.444848 #23934] DEBUG -- : B
D, [2015-07-12T08:16:23.449208 #23934] DEBUG -- :   [1m[36mPlan Load (3.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:16:23.451204 #23934] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:16:23.575076 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (49.8ms)
I, [2015-07-12T08:16:23.576610 #23934]  INFO -- : Completed 200 OK in 137ms (Views: 124.6ms | ActiveRecord: 5.8ms)
I, [2015-07-12T08:16:26.576205 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688904436" for 192.168.33.1 at 2015-07-12 08:16:26 +0000
I, [2015-07-12T08:16:26.665317 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:16:26.666004 #23934]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436688904436"}
I, [2015-07-12T08:16:26.933752 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:16:26.934683 #23934]  INFO -- : Completed 200 OK in 268ms (Views: 267.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:16:27.079737 #23934]  INFO -- : Started GET "/sales?group_btn=A&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:16:27 +0000
I, [2015-07-12T08:16:27.183538 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:16:27.183814 #23934]  INFO -- :   Parameters: {"group_btn"=>"A", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:16:27.186004 #23934] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:16:27.187241 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=A&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"A\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:16:27.186295"], ["updated_at", "2015-07-12 08:16:27.186295"]]
D, [2015-07-12T08:16:27.191027 #23934] DEBUG -- :   [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:16:27.191527 #23934] DEBUG -- : A
D, [2015-07-12T08:16:27.194969 #23934] DEBUG -- :   [1m[35mPlan Load (3.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:16:27.196882 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:16:27.299549 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (28.3ms)
I, [2015-07-12T08:16:27.300902 #23934]  INFO -- : Completed 200 OK in 117ms (Views: 103.3ms | ActiveRecord: 6.5ms)
I, [2015-07-12T08:16:34.284702 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436688908117" for 192.168.33.1 at 2015-07-12 08:16:34 +0000
I, [2015-07-12T08:16:34.375918 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:16:34.376168 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436688908117"}
I, [2015-07-12T08:16:34.659474 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:16:34.661127 #23934]  INFO -- : Completed 200 OK in 285ms (Views: 284.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:16:34.757568 #23934]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&button=" for 192.168.33.1 at 2015-07-12 08:16:34 +0000
I, [2015-07-12T08:16:34.853209 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:16:34.853460 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507", "button"=>""}
D, [2015-07-12T08:16:34.854935 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:16:34.855946 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201507&sale_ym_to=201507&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:16:34.855261"], ["updated_at", "2015-07-12 08:16:34.855261"]]
D, [2015-07-12T08:16:34.859686 #23934] DEBUG -- :   [1m[35m (3.1ms)[0m  COMMIT
D, [2015-07-12T08:16:34.860211 #23934] DEBUG -- : 
D, [2015-07-12T08:16:34.863620 #23934] DEBUG -- :   [1m[36mPlan Load (2.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:16:34.865524 #23934] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T08:16:34.964534 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.1ms)
I, [2015-07-12T08:16:34.965869 #23934]  INFO -- : Completed 200 OK in 112ms (Views: 99.8ms | ActiveRecord: 6.7ms)
I, [2015-07-12T08:24:49.726677 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436688915689" for 192.168.33.1 at 2015-07-12 08:24:49 +0000
I, [2015-07-12T08:24:49.828344 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:24:49.828566 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436688915689"}
I, [2015-07-12T08:24:50.111098 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:24:50.111806 #23934]  INFO -- : Completed 200 OK in 283ms (Views: 282.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:24:50.194791 #23934]  INFO -- : Started GET "/sales?group_btn=B&sale_ym_from=201507&sale_ym_to=201507" for 192.168.33.1 at 2015-07-12 08:24:50 +0000
I, [2015-07-12T08:24:50.286916 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:24:50.287151 #23934]  INFO -- :   Parameters: {"group_btn"=>"B", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507"}
D, [2015-07-12T08:24:50.288778 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:24:50.290538 #23934] DEBUG -- :   [1m[35mSQL (0.6ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=B&sale_ym_from=201507&sale_ym_to=201507"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"B\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:24:50.289054"], ["updated_at", "2015-07-12 08:24:50.289054"]]
D, [2015-07-12T08:24:50.292807 #23934] DEBUG -- :   [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:24:50.293283 #23934] DEBUG -- : B
D, [2015-07-12T08:24:50.296655 #23934] DEBUG -- :   [1m[35mPlan Load (3.0ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:24:50.298261 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T08:24:50.394521 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.4ms)
I, [2015-07-12T08:24:50.396079 #23934]  INFO -- : Completed 200 OK in 109ms (Views: 97.3ms | ActiveRecord: 5.9ms)
I, [2015-07-12T08:24:55.195042 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436689405406" for 192.168.33.1 at 2015-07-12 08:24:55 +0000
I, [2015-07-12T08:24:55.306949 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:24:55.307196 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436689405406"}
I, [2015-07-12T08:24:55.578304 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:24:55.579264 #23934]  INFO -- : Completed 200 OK in 272ms (Views: 271.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:24:55.714741 #23934]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 08:24:55 +0000
I, [2015-07-12T08:24:55.813699 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:24:55.813749 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T08:24:55.815611 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:24:55.816571 #23934] DEBUG -- :   [1m[36mSQL (0.1ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:24:55.815646"], ["updated_at", "2015-07-12 08:24:55.815646"]]
D, [2015-07-12T08:24:55.819678 #23934] DEBUG -- :   [1m[35m (2.5ms)[0m  COMMIT
D, [2015-07-12T08:24:55.820105 #23934] DEBUG -- : 
D, [2015-07-12T08:24:55.824617 #23934] DEBUG -- :   [1m[36mPlan Load (4.0ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:24:55.827025 #23934] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:24:56.260949 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (361.8ms)
I, [2015-07-12T08:24:56.262087 #23934]  INFO -- : Completed 200 OK in 448ms (Views: 434.5ms | ActiveRecord: 7.2ms)
I, [2015-07-12T08:25:01.270023 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436689411208" for 192.168.33.1 at 2015-07-12 08:25:01 +0000
I, [2015-07-12T08:25:01.383904 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:25:01.384024 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436689411208"}
I, [2015-07-12T08:25:01.655711 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:25:01.656585 #23934]  INFO -- : Completed 200 OK in 272ms (Views: 271.8ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:25:01.801221 #23934]  INFO -- : Started GET "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:25:01 +0000
I, [2015-07-12T08:25:01.896166 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:25:01.896377 #23934]  INFO -- :   Parameters: {"group_btn"=>"B", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:25:01.897650 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:25:01.899745 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"B\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:25:01.898001"], ["updated_at", "2015-07-12 08:25:01.898001"]]
D, [2015-07-12T08:25:01.902589 #23934] DEBUG -- :   [1m[36m (2.2ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:25:01.903139 #23934] DEBUG -- : B
D, [2015-07-12T08:25:01.907997 #23934] DEBUG -- :   [1m[35mPlan Load (4.3ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:25:01.909984 #23934] DEBUG -- :   [1m[36m (0.8ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:25:02.035174 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (49.4ms)
I, [2015-07-12T08:25:02.036407 #23934]  INFO -- : Completed 200 OK in 140ms (Views: 125.7ms | ActiveRecord: 7.7ms)
I, [2015-07-12T08:25:04.943154 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436689416917" for 192.168.33.1 at 2015-07-12 08:25:04 +0000
I, [2015-07-12T08:25:05.049206 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:25:05.049445 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436689416917"}
I, [2015-07-12T08:25:05.314173 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:25:05.314655 #23934]  INFO -- : Completed 200 OK in 265ms (Views: 264.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:25:05.478487 #23934]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 08:25:05 +0000
I, [2015-07-12T08:25:05.570381 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:25:05.570547 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T08:25:05.572870 #23934] DEBUG -- :   [1m[35m (0.0ms)[0m  BEGIN
D, [2015-07-12T08:25:05.574229 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:25:05.573180"], ["updated_at", "2015-07-12 08:25:05.573180"]]
D, [2015-07-12T08:25:05.578373 #23934] DEBUG -- :   [1m[35m (3.1ms)[0m  COMMIT
D, [2015-07-12T08:25:05.578769 #23934] DEBUG -- : 
D, [2015-07-12T08:25:05.583783 #23934] DEBUG -- :   [1m[36mPlan Load (4.5ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:25:05.586656 #23934] DEBUG -- :   [1m[35m (1.0ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:25:06.076512 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (417.5ms)
I, [2015-07-12T08:25:06.077984 #23934]  INFO -- : Completed 200 OK in 507ms (Views: 490.7ms | ActiveRecord: 8.8ms)
I, [2015-07-12T08:25:24.822429 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436689420912" for 192.168.33.1 at 2015-07-12 08:25:24 +0000
I, [2015-07-12T08:25:24.927511 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:25:24.927758 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436689420912"}
I, [2015-07-12T08:25:25.206395 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:25:25.207332 #23934]  INFO -- : Completed 200 OK in 279ms (Views: 278.8ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:25:25.292832 #23934]  INFO -- : Started GET "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:25:25 +0000
I, [2015-07-12T08:25:25.399914 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:25:25.400222 #23934]  INFO -- :   Parameters: {"group_btn"=>"B", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:25:25.402090 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:25:25.403390 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"B\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:25:25.402468"], ["updated_at", "2015-07-12 08:25:25.402468"]]
D, [2015-07-12T08:25:25.405296 #23934] DEBUG -- :   [1m[36m (1.3ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:25:25.406167 #23934] DEBUG -- : B
D, [2015-07-12T08:25:25.410116 #23934] DEBUG -- :   [1m[35mPlan Load (3.5ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:25:25.412326 #23934] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:25:25.538285 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (49.8ms)
I, [2015-07-12T08:25:25.539580 #23934]  INFO -- : Completed 200 OK in 139ms (Views: 126.6ms | ActiveRecord: 5.7ms)
I, [2015-07-12T08:25:28.470023 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86&_=1436689440146" for 192.168.33.1 at 2015-07-12 08:25:28 +0000
I, [2015-07-12T08:25:28.565874 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:25:28.566115 #23934]  INFO -- :   Parameters: {"action_name"=>"システム管理", "_"=>"1436689440146"}
I, [2015-07-12T08:25:28.840290 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:25:28.841255 #23934]  INFO -- : Completed 200 OK in 275ms (Views: 274.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:25:28.969947 #23934]  INFO -- : Started GET "/users" for 192.168.33.1 at 2015-07-12 08:25:28 +0000
I, [2015-07-12T08:25:29.062175 #23934]  INFO -- : Processing by UsersController#index as HTML
D, [2015-07-12T08:25:29.063954 #23934] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T08:25:29.065287 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users"], ["action", "システム管理"], ["parameters", "{\"controller\"=>\"users\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:25:29.064240"], ["updated_at", "2015-07-12 08:25:29.064240"]]
D, [2015-07-12T08:25:29.068446 #23934] DEBUG -- :   [1m[35m (2.1ms)[0m  COMMIT
D, [2015-07-12T08:25:29.147393 #23934] DEBUG -- :   [1m[36mUser Load (0.5ms)[0m  [1mSELECT "users".* FROM "users"  ORDER BY display_order asc, user_id asc[0m
I, [2015-07-12T08:25:29.152787 #23934]  INFO -- :   Rendered users/index.html.erb within layouts/application (6.9ms)
I, [2015-07-12T08:25:29.154061 #23934]  INFO -- : Completed 200 OK in 92ms (Views: 84.6ms | ActiveRecord: 3.0ms)
I, [2015-07-12T08:25:31.339942 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%A4%89%E6%9B%B4&_=1436689443718" for 192.168.33.1 at 2015-07-12 08:25:31 +0000
I, [2015-07-12T08:25:31.434229 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:25:31.434342 #23934]  INFO -- :   Parameters: {"action_name"=>"変更", "_"=>"1436689443718"}
I, [2015-07-12T08:25:31.709566 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:25:31.710561 #23934]  INFO -- : Completed 200 OK in 276ms (Views: 275.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:25:31.862679 #23934]  INFO -- : Started GET "/users/7/edit" for 192.168.33.1 at 2015-07-12 08:25:31 +0000
I, [2015-07-12T08:25:31.980642 #23934]  INFO -- : Processing by UsersController#edit as HTML
I, [2015-07-12T08:25:31.980919 #23934]  INFO -- :   Parameters: {"id"=>"7"}
D, [2015-07-12T08:25:31.983353 #23934] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T08:25:31.985608 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users/7/edit"], ["action", "変更"], ["parameters", "{\"controller\"=>\"users\", \"action\"=>\"edit\", \"id\"=>\"7\"}"], ["created_at", "2015-07-12 08:25:31.983780"], ["updated_at", "2015-07-12 08:25:31.983780"]]
D, [2015-07-12T08:25:31.988949 #23934] DEBUG -- :   [1m[35m (2.7ms)[0m  COMMIT
D, [2015-07-12T08:25:31.999166 #23934] DEBUG -- :   [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1[0m  [["id", 7]]
I, [2015-07-12T08:25:32.115027 #23934]  INFO -- :   Rendered users/_form.html.erb (8.5ms)
I, [2015-07-12T08:25:32.115351 #23934]  INFO -- :   Rendered users/edit.html.erb within layouts/application (36.3ms)
I, [2015-07-12T08:25:32.117316 #23934]  INFO -- : Completed 200 OK in 136ms (Views: 117.3ms | ActiveRecord: 3.2ms)
I, [2015-07-12T08:25:36.515564 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E7%99%BB%E9%8C%B2&_=1436689446651" for 192.168.33.1 at 2015-07-12 08:25:36 +0000
I, [2015-07-12T08:25:36.618175 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:25:36.618436 #23934]  INFO -- :   Parameters: {"action_name"=>"登録", "_"=>"1436689446651"}
I, [2015-07-12T08:25:36.890156 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:25:36.890899 #23934]  INFO -- : Completed 200 OK in 272ms (Views: 271.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:25:38.217913 #23934]  INFO -- : Started PATCH "/users/7" for 192.168.33.1 at 2015-07-12 08:25:38 +0000
I, [2015-07-12T08:25:38.330307 #23934]  INFO -- : Processing by UsersController#update as HTML
I, [2015-07-12T08:25:38.330613 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"L97Av071Whhtm2D+gHUtMaLaasndOwFxevblpmaqoNouBbrk1C+41a3a+Eo3UTj59KR4mNmLH7UlJ2BGVacY2w==", "user"=>{"user_name"=>"池本謙三", "user_password"=>"[FILTERED]", "emp_no"=>"1", "position"=>"2", "job"=>"1", "group"=>"A", "role"=>"2", "display_order"=>"1", "delete_flag"=>"0"}, "commit"=>"登録", "id"=>"7"}
D, [2015-07-12T08:25:38.332899 #23934] DEBUG -- :   [1m[35m (0.0ms)[0m  BEGIN
D, [2015-07-12T08:25:38.334366 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users/7"], ["action", "登録"], ["parameters", "{\"utf8\"=>\"✓\", \"_method\"=>\"patch\", \"authenticity_token\"=>\"L97Av071Whhtm2D+gHUtMaLaasndOwFxevblpmaqoNouBbrk1C+41a3a+Eo3UTj59KR4mNmLH7UlJ2BGVacY2w==\", \"user\"=>{\"user_name\"=>\"池本謙三\", \"user_password\"=>\"ikemoto\", \"emp_no\"=>\"1\", \"position\"=>\"2\", \"job\"=>\"1\", \"group\"=>\"A\", \"role\"=>\"2\", \"display_order\"=>\"1\", \"delete_flag\"=>\"0\"}, \"commit\"=>\"登録\", \"controller\"=>\"users\", \"action\"=>\"update\", \"id\"=>\"7\"}"], ["created_at", "2015-07-12 08:25:38.333200"], ["updated_at", "2015-07-12 08:25:38.333200"]]
D, [2015-07-12T08:25:38.337554 #23934] DEBUG -- :   [1m[35m (2.7ms)[0m  COMMIT
D, [2015-07-12T08:25:38.338746 #23934] DEBUG -- :   [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1[0m  [["id", 7]]
D, [2015-07-12T08:25:38.340055 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:25:38.359045 #23934] DEBUG -- :   [1m[36mUser Exists (1.2ms)[0m  [1mSELECT  1 AS one FROM "users" WHERE ("users"."user_id" = 'ikemoto' AND "users"."id" != 7) LIMIT 1[0m
D, [2015-07-12T08:25:38.361755 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  UPDATE "users" SET "group" = $1, "updated_at" = $2 WHERE "users"."id" = $3  [["group", "A"], ["updated_at", "2015-07-12 08:25:38.359824"], ["id", 7]]
D, [2015-07-12T08:25:38.363145 #23934] DEBUG -- :   [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T08:25:38.363851 #23934]  INFO -- : Redirected to http://192.168.33.10/users/7
I, [2015-07-12T08:25:38.364194 #23934]  INFO -- : Completed 302 Found in 33ms (ActiveRecord: 5.4ms)
I, [2015-07-12T08:25:38.378026 #23934]  INFO -- : Started GET "/users/7" for 192.168.33.1 at 2015-07-12 08:25:38 +0000
I, [2015-07-12T08:25:38.496137 #23934]  INFO -- : Processing by UsersController#show as HTML
I, [2015-07-12T08:25:38.496188 #23934]  INFO -- :   Parameters: {"id"=>"7"}
D, [2015-07-12T08:25:38.497972 #23934] DEBUG -- :   [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1  [["id", 7]]
I, [2015-07-12T08:25:38.578848 #23934]  INFO -- :   Rendered users/show.html.erb within layouts/application (2.6ms)
I, [2015-07-12T08:25:38.580475 #23934]  INFO -- : Completed 200 OK in 84ms (Views: 81.7ms | ActiveRecord: 0.2ms)
I, [2015-07-12T08:25:40.966208 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E6%88%BB%E3%82%8B&_=1436689453046" for 192.168.33.1 at 2015-07-12 08:25:40 +0000
I, [2015-07-12T08:25:41.058526 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:25:41.058764 #23934]  INFO -- :   Parameters: {"action_name"=>"戻る", "_"=>"1436689453046"}
I, [2015-07-12T08:25:41.322919 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:25:41.323786 #23934]  INFO -- : Completed 200 OK in 265ms (Views: 264.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:25:41.429758 #23934]  INFO -- : Started GET "/users" for 192.168.33.1 at 2015-07-12 08:25:41 +0000
I, [2015-07-12T08:25:41.526993 #23934]  INFO -- : Processing by UsersController#index as HTML
D, [2015-07-12T08:25:41.528534 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:25:41.530763 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users"], ["action", "戻る"], ["parameters", "{\"controller\"=>\"users\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:25:41.529601"], ["updated_at", "2015-07-12 08:25:41.529601"]]
D, [2015-07-12T08:25:41.534391 #23934] DEBUG -- :   [1m[36m (3.4ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:25:41.609717 #23934] DEBUG -- :   [1m[35mUser Load (0.4ms)[0m  SELECT "users".* FROM "users"  ORDER BY display_order asc, user_id asc
I, [2015-07-12T08:25:41.615239 #23934]  INFO -- :   Rendered users/index.html.erb within layouts/application (7.0ms)
I, [2015-07-12T08:25:41.621389 #23934]  INFO -- : Completed 200 OK in 94ms (Views: 85.9ms | ActiveRecord: 4.0ms)
I, [2015-07-12T08:25:46.463666 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%A4%89%E6%9B%B4&_=1436689456042" for 192.168.33.1 at 2015-07-12 08:25:46 +0000
I, [2015-07-12T08:25:46.570179 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:25:46.571141 #23934]  INFO -- :   Parameters: {"action_name"=>"変更", "_"=>"1436689456042"}
I, [2015-07-12T08:25:46.890295 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:25:46.892184 #23934]  INFO -- : Completed 200 OK in 321ms (Views: 320.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:25:47.041402 #23934]  INFO -- : Started GET "/users/9/edit" for 192.168.33.1 at 2015-07-12 08:25:47 +0000
I, [2015-07-12T08:25:47.136670 #23934]  INFO -- : Processing by UsersController#edit as HTML
I, [2015-07-12T08:25:47.137257 #23934]  INFO -- :   Parameters: {"id"=>"9"}
D, [2015-07-12T08:25:47.138676 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:25:47.140538 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users/9/edit"], ["action", "変更"], ["parameters", "{\"controller\"=>\"users\", \"action\"=>\"edit\", \"id\"=>\"9\"}"], ["created_at", "2015-07-12 08:25:47.138952"], ["updated_at", "2015-07-12 08:25:47.138952"]]
D, [2015-07-12T08:25:47.143129 #23934] DEBUG -- :   [1m[36m (2.2ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:25:47.144096 #23934] DEBUG -- :   [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1  [["id", 9]]
I, [2015-07-12T08:25:47.253158 #23934]  INFO -- :   Rendered users/_form.html.erb (5.8ms)
I, [2015-07-12T08:25:47.253486 #23934]  INFO -- :   Rendered users/edit.html.erb within layouts/application (33.0ms)
I, [2015-07-12T08:25:47.255156 #23934]  INFO -- : Completed 200 OK in 118ms (Views: 110.2ms | ActiveRecord: 2.8ms)
I, [2015-07-12T08:25:49.358399 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E7%99%BB%E9%8C%B2&_=1436689461611" for 192.168.33.1 at 2015-07-12 08:25:49 +0000
I, [2015-07-12T08:25:49.452902 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:25:49.452950 #23934]  INFO -- :   Parameters: {"action_name"=>"登録", "_"=>"1436689461611"}
I, [2015-07-12T08:25:49.731058 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:25:49.731794 #23934]  INFO -- : Completed 200 OK in 278ms (Views: 277.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:25:52.223582 #23934]  INFO -- : Started PATCH "/users/9" for 192.168.33.1 at 2015-07-12 08:25:52 +0000
I, [2015-07-12T08:25:52.325279 #23934]  INFO -- : Processing by UsersController#update as HTML
I, [2015-07-12T08:25:52.325552 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"oge080zAyT0CNqgkCxNFCeTZmxc994Lvr6j4M5XsfJSj3M6o1hor8MJ3MJC8N1DBsqeJRjlHnCvweX3TpuHElQ==", "user"=>{"user_name"=>"川上和良", "user_password"=>"[FILTERED]", "emp_no"=>"", "position"=>"2", "job"=>"1", "group"=>"A", "role"=>"2", "display_order"=>"2", "delete_flag"=>"0"}, "commit"=>"登録", "id"=>"9"}
D, [2015-07-12T08:25:52.326956 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:25:52.328439 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users/9"], ["action", "登録"], ["parameters", "{\"utf8\"=>\"✓\", \"_method\"=>\"patch\", \"authenticity_token\"=>\"oge080zAyT0CNqgkCxNFCeTZmxc994Lvr6j4M5XsfJSj3M6o1hor8MJ3MJC8N1DBsqeJRjlHnCvweX3TpuHElQ==\", \"user\"=>{\"user_name\"=>\"川上和良\", \"user_password\"=>\"kawakami\", \"emp_no\"=>\"\", \"position\"=>\"2\", \"job\"=>\"1\", \"group\"=>\"A\", \"role\"=>\"2\", \"display_order\"=>\"2\", \"delete_flag\"=>\"0\"}, \"commit\"=>\"登録\", \"controller\"=>\"users\", \"action\"=>\"update\", \"id\"=>\"9\"}"], ["created_at", "2015-07-12 08:25:52.327259"], ["updated_at", "2015-07-12 08:25:52.327259"]]
D, [2015-07-12T08:25:52.331475 #23934] DEBUG -- :   [1m[36m (2.5ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:25:52.332110 #23934] DEBUG -- :   [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1  [["id", 9]]
D, [2015-07-12T08:25:52.333724 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:25:52.336078 #23934] DEBUG -- :   [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users" WHERE ("users"."user_id" = 'kawakami' AND "users"."id" != 9) LIMIT 1
D, [2015-07-12T08:25:52.338353 #23934] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mUPDATE "users" SET "group" = $1, "updated_at" = $2 WHERE "users"."id" = $3[0m  [["group", "A"], ["updated_at", "2015-07-12 08:25:52.336505"], ["id", 9]]
D, [2015-07-12T08:25:52.339801 #23934] DEBUG -- :   [1m[35m (0.9ms)[0m  COMMIT
I, [2015-07-12T08:25:52.340549 #23934]  INFO -- : Redirected to http://192.168.33.10/users/9
I, [2015-07-12T08:25:52.340796 #23934]  INFO -- : Completed 302 Found in 15ms (ActiveRecord: 4.6ms)
I, [2015-07-12T08:25:52.351576 #23934]  INFO -- : Started GET "/users/9" for 192.168.33.1 at 2015-07-12 08:25:52 +0000
I, [2015-07-12T08:25:52.448786 #23934]  INFO -- : Processing by UsersController#show as HTML
I, [2015-07-12T08:25:52.449030 #23934]  INFO -- :   Parameters: {"id"=>"9"}
D, [2015-07-12T08:25:52.449851 #23934] DEBUG -- :   [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1[0m  [["id", 9]]
I, [2015-07-12T08:25:52.522815 #23934]  INFO -- :   Rendered users/show.html.erb within layouts/application (0.4ms)
I, [2015-07-12T08:25:52.524279 #23934]  INFO -- : Completed 200 OK in 75ms (Views: 73.8ms | ActiveRecord: 0.1ms)
I, [2015-07-12T08:25:54.249349 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E6%88%BB%E3%82%8B&_=1436689466835" for 192.168.33.1 at 2015-07-12 08:25:54 +0000
I, [2015-07-12T08:25:54.345712 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:25:54.345963 #23934]  INFO -- :   Parameters: {"action_name"=>"戻る", "_"=>"1436689466835"}
I, [2015-07-12T08:25:54.617469 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:25:54.618202 #23934]  INFO -- : Completed 200 OK in 272ms (Views: 271.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:25:54.767277 #23934]  INFO -- : Started GET "/users" for 192.168.33.1 at 2015-07-12 08:25:54 +0000
I, [2015-07-12T08:25:54.873538 #23934]  INFO -- : Processing by UsersController#index as HTML
D, [2015-07-12T08:25:54.874759 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:25:54.877711 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users"], ["action", "戻る"], ["parameters", "{\"controller\"=>\"users\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:25:54.876583"], ["updated_at", "2015-07-12 08:25:54.876583"]]
D, [2015-07-12T08:25:54.880505 #23934] DEBUG -- :   [1m[35m (2.3ms)[0m  COMMIT
D, [2015-07-12T08:25:54.957260 #23934] DEBUG -- :   [1m[36mUser Load (0.4ms)[0m  [1mSELECT "users".* FROM "users"  ORDER BY display_order asc, user_id asc[0m
I, [2015-07-12T08:25:54.961489 #23934]  INFO -- :   Rendered users/index.html.erb within layouts/application (5.6ms)
I, [2015-07-12T08:25:54.962585 #23934]  INFO -- : Completed 200 OK in 89ms (Views: 81.0ms | ActiveRecord: 3.1ms)
I, [2015-07-12T08:26:03.882513 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%A4%89%E6%9B%B4&_=1436689469234" for 192.168.33.1 at 2015-07-12 08:26:03 +0000
I, [2015-07-12T08:26:03.974784 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:26:03.975037 #23934]  INFO -- :   Parameters: {"action_name"=>"変更", "_"=>"1436689469234"}
I, [2015-07-12T08:26:04.246574 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:26:04.247264 #23934]  INFO -- : Completed 200 OK in 272ms (Views: 271.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:26:04.362355 #23934]  INFO -- : Started GET "/users/19/edit" for 192.168.33.1 at 2015-07-12 08:26:04 +0000
I, [2015-07-12T08:26:04.460745 #23934]  INFO -- : Processing by UsersController#edit as HTML
I, [2015-07-12T08:26:04.460891 #23934]  INFO -- :   Parameters: {"id"=>"19"}
D, [2015-07-12T08:26:04.462605 #23934] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T08:26:04.464716 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users/19/edit"], ["action", "変更"], ["parameters", "{\"controller\"=>\"users\", \"action\"=>\"edit\", \"id\"=>\"19\"}"], ["created_at", "2015-07-12 08:26:04.463551"], ["updated_at", "2015-07-12 08:26:04.463551"]]
D, [2015-07-12T08:26:04.467061 #23934] DEBUG -- :   [1m[35m (2.1ms)[0m  COMMIT
D, [2015-07-12T08:26:04.467689 #23934] DEBUG -- :   [1m[36mUser Load (0.1ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1[0m  [["id", 19]]
I, [2015-07-12T08:26:04.577717 #23934]  INFO -- :   Rendered users/_form.html.erb (4.9ms)
I, [2015-07-12T08:26:04.578061 #23934]  INFO -- :   Rendered users/edit.html.erb within layouts/application (30.6ms)
I, [2015-07-12T08:26:04.579541 #23934]  INFO -- : Completed 200 OK in 118ms (Views: 111.1ms | ActiveRecord: 2.6ms)
I, [2015-07-12T08:26:07.108789 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E7%99%BB%E9%8C%B2&_=1436689478739" for 192.168.33.1 at 2015-07-12 08:26:07 +0000
I, [2015-07-12T08:26:07.202512 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:26:07.202589 #23934]  INFO -- :   Parameters: {"action_name"=>"登録", "_"=>"1436689478739"}
I, [2015-07-12T08:26:07.477391 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:26:07.478278 #23934]  INFO -- : Completed 200 OK in 275ms (Views: 274.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:26:08.294216 #23934]  INFO -- : Started PATCH "/users/19" for 192.168.33.1 at 2015-07-12 08:26:08 +0000
I, [2015-07-12T08:26:08.410730 #23934]  INFO -- : Processing by UsersController#update as HTML
I, [2015-07-12T08:26:08.410968 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"DWDF0Bsus1mnwvrhK5Q3bZhZonOMOsgUBw6e2K5JG6AMu7+LgfRRlGeDYlWcsCKlziewIoiK1tBY3xs4nUSjoQ==", "user"=>{"user_name"=>"大櫃梨衣", "user_password"=>"[FILTERED]", "emp_no"=>"72", "position"=>"9", "job"=>"1", "group"=>"B", "role"=>"1", "display_order"=>"", "delete_flag"=>"0"}, "commit"=>"登録", "id"=>"19"}
D, [2015-07-12T08:26:08.413238 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:26:08.415009 #23934] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users/19"], ["action", "登録"], ["parameters", "{\"utf8\"=>\"✓\", \"_method\"=>\"patch\", \"authenticity_token\"=>\"DWDF0Bsus1mnwvrhK5Q3bZhZonOMOsgUBw6e2K5JG6AMu7+LgfRRlGeDYlWcsCKlziewIoiK1tBY3xs4nUSjoQ==\", \"user\"=>{\"user_name\"=>\"大櫃梨衣\", \"user_password\"=>\"ohbitsu\", \"emp_no\"=>\"72\", \"position\"=>\"9\", \"job\"=>\"1\", \"group\"=>\"B\", \"role\"=>\"1\", \"display_order\"=>\"\", \"delete_flag\"=>\"0\"}, \"commit\"=>\"登録\", \"controller\"=>\"users\", \"action\"=>\"update\", \"id\"=>\"19\"}"], ["created_at", "2015-07-12 08:26:08.413273"], ["updated_at", "2015-07-12 08:26:08.413273"]]
D, [2015-07-12T08:26:08.418788 #23934] DEBUG -- :   [1m[35m (2.5ms)[0m  COMMIT
D, [2015-07-12T08:26:08.419529 #23934] DEBUG -- :   [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1[0m  [["id", 19]]
D, [2015-07-12T08:26:08.420598 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:26:08.423612 #23934] DEBUG -- :   [1m[36mUser Exists (0.3ms)[0m  [1mSELECT  1 AS one FROM "users" WHERE ("users"."user_id" = 'ohbitsu' AND "users"."id" != 19) LIMIT 1[0m
D, [2015-07-12T08:26:08.425553 #23934] DEBUG -- :   [1m[35mSQL (0.4ms)[0m  UPDATE "users" SET "group" = $1, "updated_at" = $2 WHERE "users"."id" = $3  [["group", "B"], ["updated_at", "2015-07-12 08:26:08.424088"], ["id", 19]]
D, [2015-07-12T08:26:08.426869 #23934] DEBUG -- :   [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T08:26:08.427592 #23934]  INFO -- : Redirected to http://192.168.33.10/users/19
I, [2015-07-12T08:26:08.427996 #23934]  INFO -- : Completed 302 Found in 17ms (ActiveRecord: 4.7ms)
I, [2015-07-12T08:26:08.437654 #23934]  INFO -- : Started GET "/users/19" for 192.168.33.1 at 2015-07-12 08:26:08 +0000
I, [2015-07-12T08:26:08.539758 #23934]  INFO -- : Processing by UsersController#show as HTML
I, [2015-07-12T08:26:08.540016 #23934]  INFO -- :   Parameters: {"id"=>"19"}
D, [2015-07-12T08:26:08.540955 #23934] DEBUG -- :   [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1  [["id", 19]]
I, [2015-07-12T08:26:08.613739 #23934]  INFO -- :   Rendered users/show.html.erb within layouts/application (0.4ms)
I, [2015-07-12T08:26:08.615470 #23934]  INFO -- : Completed 200 OK in 75ms (Views: 73.8ms | ActiveRecord: 0.2ms)
I, [2015-07-12T08:26:09.954973 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436689482739" for 192.168.33.1 at 2015-07-12 08:26:09 +0000
I, [2015-07-12T08:26:10.075652 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:26:10.075729 #23934]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436689482739"}
I, [2015-07-12T08:26:10.341461 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:26:10.342337 #23934]  INFO -- : Completed 200 OK in 266ms (Views: 265.8ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:26:10.487761 #23934]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 08:26:10 +0000
I, [2015-07-12T08:26:10.585593 #23934]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T08:26:10.586822 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:26:10.588036 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:26:10.587108"], ["updated_at", "2015-07-12 08:26:10.587108"]]
D, [2015-07-12T08:26:10.591240 #23934] DEBUG -- :   [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:26:10.591657 #23934] DEBUG -- : 
D, [2015-07-12T08:26:10.594598 #23934] DEBUG -- :   [1m[35mPlan Load (2.6ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:26:10.596404 #23934] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T08:26:10.694381 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (24.3ms)
I, [2015-07-12T08:26:10.695903 #23934]  INFO -- : Completed 200 OK in 110ms (Views: 98.0ms | ActiveRecord: 5.9ms)
I, [2015-07-12T08:26:15.212968 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436689484780" for 192.168.33.1 at 2015-07-12 08:26:15 +0000
I, [2015-07-12T08:26:15.309949 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:26:15.310169 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436689484780"}
I, [2015-07-12T08:26:15.590610 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:26:15.591546 #23934]  INFO -- : Completed 200 OK in 281ms (Views: 280.8ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:26:15.735208 #23934]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 08:26:15 +0000
I, [2015-07-12T08:26:15.834766 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:26:15.835030 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T08:26:15.837707 #23934] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T08:26:15.839264 #23934] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:26:15.838051"], ["updated_at", "2015-07-12 08:26:15.838051"]]
D, [2015-07-12T08:26:15.840858 #23934] DEBUG -- :   [1m[35m (0.9ms)[0m  COMMIT
D, [2015-07-12T08:26:15.841299 #23934] DEBUG -- : 
D, [2015-07-12T08:26:15.845795 #23934] DEBUG -- :   [1m[36mPlan Load (4.0ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:26:15.849553 #23934] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:26:16.281138 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (357.8ms)
I, [2015-07-12T08:26:16.282272 #23934]  INFO -- : Completed 200 OK in 447ms (Views: 431.7ms | ActiveRecord: 5.9ms)
I, [2015-07-12T08:26:18.896011 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436689490305" for 192.168.33.1 at 2015-07-12 08:26:18 +0000
I, [2015-07-12T08:26:18.989220 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:26:18.989524 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436689490305"}
I, [2015-07-12T08:26:19.262615 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:26:19.263496 #23934]  INFO -- : Completed 200 OK in 274ms (Views: 273.2ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:26:19.411376 #23934]  INFO -- : Started GET "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:26:19 +0000
I, [2015-07-12T08:26:19.513507 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:26:19.513572 #23934]  INFO -- :   Parameters: {"group_btn"=>"B", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:26:19.515109 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:26:19.516344 #23934] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"B\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:26:19.515446"], ["updated_at", "2015-07-12 08:26:19.515446"]]
D, [2015-07-12T08:26:19.520520 #23934] DEBUG -- :   [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:26:19.520787 #23934] DEBUG -- : B
D, [2015-07-12T08:26:19.525313 #23934] DEBUG -- :   [1m[35mPlan Load (4.0ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:26:19.528286 #23934] DEBUG -- :   [1m[36m (1.1ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:26:19.648717 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (47.2ms)
I, [2015-07-12T08:26:19.650372 #23934]  INFO -- : Completed 200 OK in 137ms (Views: 121.3ms | ActiveRecord: 8.5ms)
I, [2015-07-12T08:26:22.511050 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436689493640" for 192.168.33.1 at 2015-07-12 08:26:22 +0000
I, [2015-07-12T08:26:22.601507 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:26:22.601737 #23934]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436689493640"}
I, [2015-07-12T08:26:22.879173 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:26:22.879832 #23934]  INFO -- : Completed 200 OK in 278ms (Views: 277.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:26:23.010910 #23934]  INFO -- : Started GET "/sales?group_btn=A&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:26:23 +0000
I, [2015-07-12T08:26:23.102913 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:26:23.103182 #23934]  INFO -- :   Parameters: {"group_btn"=>"A", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:26:23.104817 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:26:23.106696 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=A&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"A\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:26:23.105111"], ["updated_at", "2015-07-12 08:26:23.105111"]]
D, [2015-07-12T08:26:23.108935 #23934] DEBUG -- :   [1m[35m (2.0ms)[0m  COMMIT
D, [2015-07-12T08:26:23.109373 #23934] DEBUG -- : A
D, [2015-07-12T08:26:23.113725 #23934] DEBUG -- :   [1m[36mPlan Load (3.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:26:23.115771 #23934] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:26:23.266595 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (78.5ms)
I, [2015-07-12T08:26:23.268552 #23934]  INFO -- : Completed 200 OK in 165ms (Views: 151.6ms | ActiveRecord: 6.7ms)
I, [2015-07-12T08:33:00.458351 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86&_=1436689497209" for 192.168.33.1 at 2015-07-12 08:33:00 +0000
I, [2015-07-12T08:33:00.556318 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:33:00.556543 #23934]  INFO -- :   Parameters: {"action_name"=>"システム管理", "_"=>"1436689497209"}
I, [2015-07-12T08:33:00.828580 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:33:00.829609 #23934]  INFO -- : Completed 200 OK in 273ms (Views: 272.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:33:00.924977 #23934]  INFO -- : Started GET "/users" for 192.168.33.1 at 2015-07-12 08:33:00 +0000
I, [2015-07-12T08:33:01.024897 #23934]  INFO -- : Processing by UsersController#index as HTML
D, [2015-07-12T08:33:01.026876 #23934] DEBUG -- :   [1m[36m (0.0ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:33:01.028267 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users"], ["action", "システム管理"], ["parameters", "{\"controller\"=>\"users\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:33:01.027029"], ["updated_at", "2015-07-12 08:33:01.027029"]]
D, [2015-07-12T08:33:01.031208 #23934] DEBUG -- :   [1m[36m (2.3ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:33:01.113229 #23934] DEBUG -- :   [1m[35mUser Load (0.8ms)[0m  SELECT "users".* FROM "users"  ORDER BY display_order asc, user_id asc
I, [2015-07-12T08:33:01.118100 #23934]  INFO -- :   Rendered users/index.html.erb within layouts/application (6.6ms)
I, [2015-07-12T08:33:01.119595 #23934]  INFO -- : Completed 200 OK in 94ms (Views: 86.9ms | ActiveRecord: 3.4ms)
I, [2015-07-12T08:33:09.481506 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%A4%89%E6%9B%B4&_=1436689890470" for 192.168.33.1 at 2015-07-12 08:33:09 +0000
I, [2015-07-12T08:33:09.573701 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:33:09.573937 #23934]  INFO -- :   Parameters: {"action_name"=>"変更", "_"=>"1436689890470"}
I, [2015-07-12T08:33:09.843379 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:33:09.844273 #23934]  INFO -- : Completed 200 OK in 270ms (Views: 269.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:33:09.962957 #23934]  INFO -- : Started GET "/users/6/edit" for 192.168.33.1 at 2015-07-12 08:33:09 +0000
I, [2015-07-12T08:33:10.075688 #23934]  INFO -- : Processing by UsersController#edit as HTML
I, [2015-07-12T08:33:10.075936 #23934]  INFO -- :   Parameters: {"id"=>"6"}
D, [2015-07-12T08:33:10.077401 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:33:10.078761 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users/6/edit"], ["action", "変更"], ["parameters", "{\"controller\"=>\"users\", \"action\"=>\"edit\", \"id\"=>\"6\"}"], ["created_at", "2015-07-12 08:33:10.077620"], ["updated_at", "2015-07-12 08:33:10.077620"]]
D, [2015-07-12T08:33:10.082022 #23934] DEBUG -- :   [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:33:10.082725 #23934] DEBUG -- :   [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1  [["id", 6]]
I, [2015-07-12T08:33:10.190100 #23934]  INFO -- :   Rendered users/_form.html.erb (6.8ms)
I, [2015-07-12T08:33:10.190435 #23934]  INFO -- :   Rendered users/edit.html.erb within layouts/application (32.6ms)
I, [2015-07-12T08:33:10.191609 #23934]  INFO -- : Completed 200 OK in 115ms (Views: 107.7ms | ActiveRecord: 3.2ms)
I, [2015-07-12T08:33:14.180454 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E7%99%BB%E9%8C%B2&_=1436689899436" for 192.168.33.1 at 2015-07-12 08:33:14 +0000
I, [2015-07-12T08:33:14.281074 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:33:14.281334 #23934]  INFO -- :   Parameters: {"action_name"=>"登録", "_"=>"1436689899436"}
I, [2015-07-12T08:33:14.554273 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:33:14.555255 #23934]  INFO -- : Completed 200 OK in 274ms (Views: 273.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:33:15.824974 #23934]  INFO -- : Started PATCH "/users/6" for 192.168.33.1 at 2015-07-12 08:33:15 +0000
I, [2015-07-12T08:33:15.934291 #23934]  INFO -- : Processing by UsersController#update as HTML
I, [2015-07-12T08:33:15.934601 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"WAi7qx0U4/DnSj60kt4JW4b4YB2KcsQMxZZL7vudD35Z08Hwh84BPScLpgAl+hyT0IZyTI7C2siaR84OyJC3fw==", "user"=>{"user_name"=>"渡部修平", "user_password"=>"[FILTERED]", "emp_no"=>"72", "position"=>"9", "job"=>"1", "group"=>"B", "role"=>"1", "display_order"=>"", "delete_flag"=>"0"}, "commit"=>"登録", "id"=>"6"}
D, [2015-07-12T08:33:15.935930 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:33:15.937382 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/users/6"], ["action", "登録"], ["parameters", "{\"utf8\"=>\"✓\", \"_method\"=>\"patch\", \"authenticity_token\"=>\"WAi7qx0U4/DnSj60kt4JW4b4YB2KcsQMxZZL7vudD35Z08Hwh84BPScLpgAl+hyT0IZyTI7C2siaR84OyJC3fw==\", \"user\"=>{\"user_name\"=>\"渡部修平\", \"user_password\"=>\"watanabe\", \"emp_no\"=>\"72\", \"position\"=>\"9\", \"job\"=>\"1\", \"group\"=>\"B\", \"role\"=>\"1\", \"display_order\"=>\"\", \"delete_flag\"=>\"0\"}, \"commit\"=>\"登録\", \"controller\"=>\"users\", \"action\"=>\"update\", \"id\"=>\"6\"}"], ["created_at", "2015-07-12 08:33:15.936235"], ["updated_at", "2015-07-12 08:33:15.936235"]]
D, [2015-07-12T08:33:15.939745 #23934] DEBUG -- :   [1m[36m (1.8ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:33:15.940419 #23934] DEBUG -- :   [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1  [["id", 6]]
D, [2015-07-12T08:33:15.941484 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:33:15.944960 #23934] DEBUG -- :   [1m[35mUser Exists (0.3ms)[0m  SELECT  1 AS one FROM "users" WHERE ("users"."user_id" = 'watanabe' AND "users"."id" != 6) LIMIT 1
D, [2015-07-12T08:33:15.946142 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mUPDATE "users" SET "group" = $1, "updated_at" = $2 WHERE "users"."id" = $3[0m  [["group", "B"], ["updated_at", "2015-07-12 08:33:15.945437"], ["id", 6]]
D, [2015-07-12T08:33:15.947991 #23934] DEBUG -- :   [1m[35m (1.7ms)[0m  COMMIT
I, [2015-07-12T08:33:15.948680 #23934]  INFO -- : Redirected to http://192.168.33.10/users/6
I, [2015-07-12T08:33:15.948713 #23934]  INFO -- : Completed 302 Found in 14ms (ActiveRecord: 4.6ms)
I, [2015-07-12T08:33:15.961700 #23934]  INFO -- : Started GET "/users/6" for 192.168.33.1 at 2015-07-12 08:33:15 +0000
I, [2015-07-12T08:33:16.072856 #23934]  INFO -- : Processing by UsersController#show as HTML
I, [2015-07-12T08:33:16.073136 #23934]  INFO -- :   Parameters: {"id"=>"6"}
D, [2015-07-12T08:33:16.074787 #23934] DEBUG -- :   [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."id" = $1 LIMIT 1[0m  [["id", 6]]
I, [2015-07-12T08:33:16.148259 #23934]  INFO -- :   Rendered users/show.html.erb within layouts/application (0.6ms)
I, [2015-07-12T08:33:16.150949 #23934]  INFO -- : Completed 200 OK in 78ms (Views: 75.4ms | ActiveRecord: 0.2ms)
I, [2015-07-12T08:33:17.036703 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1436689905351" for 192.168.33.1 at 2015-07-12 08:33:17 +0000
I, [2015-07-12T08:33:17.129659 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:33:17.129885 #23934]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1436689905351"}
I, [2015-07-12T08:33:17.403372 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:33:17.404282 #23934]  INFO -- : Completed 200 OK in 274ms (Views: 273.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:33:17.563933 #23934]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 08:33:17 +0000
I, [2015-07-12T08:33:17.661038 #23934]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T08:33:17.662605 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:33:17.664520 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:33:17.662653"], ["updated_at", "2015-07-12 08:33:17.662653"]]
D, [2015-07-12T08:33:17.667289 #23934] DEBUG -- :   [1m[35m (2.3ms)[0m  COMMIT
D, [2015-07-12T08:33:17.667709 #23934] DEBUG -- : 
D, [2015-07-12T08:33:17.671804 #23934] DEBUG -- :   [1m[36mPlan Load (3.6ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:33:17.674288 #23934] DEBUG -- :   [1m[35m (1.1ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T08:33:17.779161 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (25.0ms)
I, [2015-07-12T08:33:17.780949 #23934]  INFO -- : Completed 200 OK in 120ms (Views: 106.0ms | ActiveRecord: 7.4ms)
I, [2015-07-12T08:33:28.244373 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436689906945" for 192.168.33.1 at 2015-07-12 08:33:28 +0000
I, [2015-07-12T08:33:28.336923 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:33:28.337172 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436689906945"}
I, [2015-07-12T08:33:28.605889 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:33:28.606764 #23934]  INFO -- : Completed 200 OK in 269ms (Views: 269.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:33:28.717326 #23934]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 08:33:28 +0000
I, [2015-07-12T08:33:28.813274 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:33:28.814000 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T08:33:28.815444 #23934] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:33:28.816729 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:33:28.815647"], ["updated_at", "2015-07-12 08:33:28.815647"]]
D, [2015-07-12T08:33:28.819778 #23934] DEBUG -- :   [1m[36m (2.4ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:33:28.820285 #23934] DEBUG -- : 
D, [2015-07-12T08:33:28.825872 #23934] DEBUG -- :   [1m[35mPlan Load (5.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:33:28.828765 #23934] DEBUG -- :   [1m[36m (0.7ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-12T08:33:29.260667 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (358.3ms)
I, [2015-07-12T08:33:29.262205 #23934]  INFO -- : Completed 200 OK in 448ms (Views: 432.8ms | ActiveRecord: 8.6ms)
I, [2015-07-12T08:33:30.311778 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436689918292" for 192.168.33.1 at 2015-07-12 08:33:30 +0000
I, [2015-07-12T08:33:30.413852 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:33:30.414120 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436689918292"}
I, [2015-07-12T08:33:30.681433 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:33:30.682332 #23934]  INFO -- : Completed 200 OK in 268ms (Views: 267.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:33:30.837079 #23934]  INFO -- : Started GET "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 08:33:30 +0000
I, [2015-07-12T08:33:30.934188 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:33:30.934358 #23934]  INFO -- :   Parameters: {"group_btn"=>"B", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T08:33:30.936662 #23934] DEBUG -- :   [1m[35m (0.3ms)[0m  BEGIN
D, [2015-07-12T08:33:30.938072 #23934] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"B\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:33:30.937054"], ["updated_at", "2015-07-12 08:33:30.937054"]]
D, [2015-07-12T08:33:30.940745 #23934] DEBUG -- :   [1m[35m (2.1ms)[0m  COMMIT
D, [2015-07-12T08:33:30.941233 #23934] DEBUG -- : B
D, [2015-07-12T08:33:30.945968 #23934] DEBUG -- :   [1m[36mPlan Load (4.2ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:33:30.948213 #23934] DEBUG -- :   [1m[35m (1.1ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T08:33:31.102801 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (75.5ms)
I, [2015-07-12T08:33:31.104272 #23934]  INFO -- : Completed 200 OK in 170ms (Views: 155.2ms | ActiveRecord: 7.9ms)
I, [2015-07-12T08:33:35.556837 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436689920111" for 192.168.33.1 at 2015-07-12 08:33:35 +0000
I, [2015-07-12T08:33:35.649554 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:33:35.649773 #23934]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436689920111"}
I, [2015-07-12T08:33:35.919856 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:33:35.920790 #23934]  INFO -- : Completed 200 OK in 271ms (Views: 268.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:33:36.072258 #23934]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201504&button=" for 192.168.33.1 at 2015-07-12 08:33:36 +0000
I, [2015-07-12T08:33:36.170448 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:33:36.170563 #23934]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201504", "button"=>""}
D, [2015-07-12T08:33:36.172151 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:33:36.174108 #23934] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201504&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201504\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:33:36.172575"], ["updated_at", "2015-07-12 08:33:36.172575"]]
D, [2015-07-12T08:33:36.177512 #23934] DEBUG -- :   [1m[36m (2.5ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T08:33:36.177832 #23934] DEBUG -- : 
D, [2015-07-12T08:33:36.182870 #23934] DEBUG -- :   [1m[35mPlan Load (4.5ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201504' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T08:33:36.186003 #23934] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201504')[0m
I, [2015-07-12T08:33:36.693617 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (424.4ms)
I, [2015-07-12T08:33:36.695600 #23934]  INFO -- : Completed 200 OK in 525ms (Views: 508.9ms | ActiveRecord: 8.0ms)
I, [2015-07-12T08:33:38.477255 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=+B%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436689925638" for 192.168.33.1 at 2015-07-12 08:33:38 +0000
I, [2015-07-12T08:33:38.579025 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:33:38.579281 #23934]  INFO -- :   Parameters: {"action_name"=>" Bグループ", "_"=>"1436689925638"}
I, [2015-07-12T08:33:38.851559 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T08:33:38.852510 #23934]  INFO -- : Completed 200 OK in 273ms (Views: 272.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:33:39.009512 #23934]  INFO -- : Started GET "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201504" for 192.168.33.1 at 2015-07-12 08:33:39 +0000
I, [2015-07-12T08:33:39.101240 #23934]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T08:33:39.101494 #23934]  INFO -- :   Parameters: {"group_btn"=>"B", "sale_ym_from"=>"201503", "sale_ym_to"=>"201504"}
D, [2015-07-12T08:33:39.104115 #23934] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T08:33:39.106383 #23934] DEBUG -- :   [1m[36mSQL (0.9ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=B&sale_ym_from=201503&sale_ym_to=201504"], ["action", " Bグループ"], ["parameters", "{\"group_btn\"=>\"B\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201504\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 08:33:39.104341"], ["updated_at", "2015-07-12 08:33:39.104341"]]
D, [2015-07-12T08:33:39.108443 #23934] DEBUG -- :   [1m[35m (0.9ms)[0m  COMMIT
D, [2015-07-12T08:33:39.108832 #23934] DEBUG -- : B
D, [2015-07-12T08:33:39.113213 #23934] DEBUG -- :   [1m[36mPlan Load (3.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201504' and usplrepr.group = 'B' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T08:33:39.116233 #23934] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201504')
I, [2015-07-12T08:33:39.304343 #23934]  INFO -- :   Rendered sales/index.html.erb within layouts/application (113.1ms)
I, [2015-07-12T08:33:39.305734 #23934]  INFO -- : Completed 200 OK in 204ms (Views: 188.9ms | ActiveRecord: 6.2ms)
I, [2015-07-12T08:33:41.583377 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86%E8%80%85&_=1436689928220" for 192.168.33.1 at 2015-07-12 08:33:41 +0000
I, [2015-07-12T08:33:41.677137 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:33:41.677427 #23934]  INFO -- :   Parameters: {"action_name"=>"システム管理者", "_"=>"1436689928220"}
I, [2015-07-12T08:33:41.957405 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:33:41.958285 #23934]  INFO -- : Completed 200 OK in 281ms (Views: 280.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:33:42.805054 #23934]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%83%AD%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88&_=1436689928221" for 192.168.33.1 at 2015-07-12 08:33:42 +0000
I, [2015-07-12T08:33:42.909506 #23934]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T08:33:42.909735 #23934]  INFO -- :   Parameters: {"action_name"=>"ログアウト", "_"=>"1436689928221"}
I, [2015-07-12T08:33:43.179447 #23934]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-12T08:33:43.180213 #23934]  INFO -- : Completed 200 OK in 270ms (Views: 269.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T08:33:43.382013 #23934]  INFO -- : Started DELETE "/logins/0" for 192.168.33.1 at 2015-07-12 08:33:43 +0000
I, [2015-07-12T08:33:43.476890 #23934]  INFO -- : Processing by LoginsController#destroy as HTML
I, [2015-07-12T08:33:43.477170 #23934]  INFO -- :   Parameters: {"authenticity_token"=>"RSjBFicBNvpmZyvcqpc1ktQ+s7xJq80TgV4hmW7E9yBE87tNvdvUN6Yms2gdsyBagkCh7U0b09fej6R5XclPIQ==", "id"=>"0"}
D, [2015-07-12T08:33:43.478633 #23934] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T08:33:43.480651 #23934] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/logins/0"], ["action", "ログアウト"], ["parameters", "{\"_method\"=>\"delete\", \"authenticity_token\"=>\"RSjBFicBNvpmZyvcqpc1ktQ+s7xJq80TgV4hmW7E9yBE87tNvdvUN6Yms2gdsyBagkCh7U0b09fej6R5XclPIQ==\", \"controller\"=>\"logins\", \"action\"=>\"destroy\", \"id\"=>\"0\"}"], ["created_at", "2015-07-12 08:33:43.478931"], ["updated_at", "2015-07-12 08:33:43.478931"]]
D, [2015-07-12T08:33:43.483257 #23934] DEBUG -- :   [1m[36m (2.2ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T08:33:43.483873 #23934]  INFO -- : Redirected to http://192.168.33.10/
I, [2015-07-12T08:33:43.484172 #23934]  INFO -- : Completed 302 Found in 7ms (ActiveRecord: 2.5ms)
I, [2015-07-12T08:33:43.492872 #23934]  INFO -- : Started GET "/" for 192.168.33.1 at 2015-07-12 08:33:43 +0000
I, [2015-07-12T08:33:43.590058 #23934]  INFO -- : Processing by LoginsController#new as HTML
I, [2015-07-12T08:33:43.641545 #23934]  INFO -- :   Rendered logins/new.html.erb within layouts/login (1.6ms)
I, [2015-07-12T08:33:43.642392 #23934]  INFO -- : Completed 200 OK in 52ms (Views: 51.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:17:55.661953 #25541]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 09:17:55 +0000
I, [2015-07-12T09:17:55.788761 #25541]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T09:17:55.832271 #25541] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T09:17:55.844822 #25541] DEBUG -- :   [1m[35mSQL (0.4ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:17:55.833047"], ["updated_at", "2015-07-12 09:17:55.833047"]]
D, [2015-07-12T09:17:55.848174 #25541] DEBUG -- :   [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T09:17:55.849002 #25541] DEBUG -- : 
D, [2015-07-12T09:17:55.856416 #25541] DEBUG -- :   [1m[35mPlan Load (5.9ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T09:17:55.863647 #25541] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T09:17:55.987242 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (31.4ms)
I, [2015-07-12T09:17:55.987805 #25541]  INFO -- : Completed 500 Internal Server Error in 198ms
F, [2015-07-12T09:17:55.990029 #25541] FATAL -- : 
SyntaxError (/vagrant/sales/app/views/sales/index.html.erb:268: syntax error, unexpected '<'
        <%# 社員名 );@output_buffer.safe_append='
         ^
/vagrant/sales/app/views/sales/index.html.erb:268: unterminated string meets end of file):
  app/views/sales/index.html.erb:268: syntax error, unexpected '<'
  app/views/sales/index.html.erb:268: unterminated string meets end of file


I, [2015-07-12T09:18:26.463482 #25541]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 09:18:26 +0000
I, [2015-07-12T09:18:26.571655 #25541]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T09:18:26.573909 #25541] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T09:18:26.575925 #25541] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:18:26.574562"], ["updated_at", "2015-07-12 09:18:26.574562"]]
D, [2015-07-12T09:18:26.579711 #25541] DEBUG -- :   [1m[35m (2.7ms)[0m  COMMIT
D, [2015-07-12T09:18:26.580565 #25541] DEBUG -- : 
D, [2015-07-12T09:18:26.585256 #25541] DEBUG -- :   [1m[36mPlan Load (3.2ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T09:18:26.587907 #25541] DEBUG -- :   [1m[35m (0.9ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T09:18:26.694117 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (30.1ms)
I, [2015-07-12T09:18:26.694932 #25541]  INFO -- : Completed 500 Internal Server Error in 123ms
F, [2015-07-12T09:18:26.696862 #25541] FATAL -- : 
SyntaxError (/vagrant/sales/app/views/sales/index.html.erb:268: syntax error, unexpected '<'
        <%# 社員名 
         ^
/vagrant/sales/app/views/sales/index.html.erb:268: unterminated string meets end of file):
  app/views/sales/index.html.erb:268: syntax error, unexpected '<'
  app/views/sales/index.html.erb:268: unterminated string meets end of file


I, [2015-07-12T09:18:28.312939 #25541]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 09:18:28 +0000
I, [2015-07-12T09:18:28.419939 #25541]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T09:18:28.422063 #25541] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T09:18:28.423990 #25541] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:18:28.422692"], ["updated_at", "2015-07-12 09:18:28.422692"]]
D, [2015-07-12T09:18:28.427057 #25541] DEBUG -- :   [1m[36m (2.1ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T09:18:28.427854 #25541] DEBUG -- : 
D, [2015-07-12T09:18:28.431621 #25541] DEBUG -- :   [1m[35mPlan Load (2.9ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T09:18:28.434638 #25541] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T09:18:28.543152 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (32.1ms)
I, [2015-07-12T09:18:28.543814 #25541]  INFO -- : Completed 500 Internal Server Error in 123ms
F, [2015-07-12T09:18:28.545972 #25541] FATAL -- : 
SyntaxError (/vagrant/sales/app/views/sales/index.html.erb:268: syntax error, unexpected '<'
        <%# 社員名 
         ^
/vagrant/sales/app/views/sales/index.html.erb:268: unterminated string meets end of file):
  app/views/sales/index.html.erb:268: syntax error, unexpected '<'
  app/views/sales/index.html.erb:268: unterminated string meets end of file


I, [2015-07-12T09:18:37.574592 #25541]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 09:18:37 +0000
I, [2015-07-12T09:18:37.684600 #25541]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T09:18:37.686322 #25541] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T09:18:37.688900 #25541] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:18:37.687668"], ["updated_at", "2015-07-12 09:18:37.687668"]]
D, [2015-07-12T09:18:37.692280 #25541] DEBUG -- :   [1m[35m (2.5ms)[0m  COMMIT
D, [2015-07-12T09:18:37.693079 #25541] DEBUG -- : 
D, [2015-07-12T09:18:37.697141 #25541] DEBUG -- :   [1m[36mPlan Load (3.3ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T09:18:37.698886 #25541] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T09:18:37.812037 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (37.1ms)
I, [2015-07-12T09:18:37.812744 #25541]  INFO -- : Completed 500 Internal Server Error in 128ms
F, [2015-07-12T09:18:37.814710 #25541] FATAL -- : 
SyntaxError (/vagrant/sales/app/views/sales/index.html.erb:268: syntax error, unexpected '<'
        <%# 社員名 
         ^
/vagrant/sales/app/views/sales/index.html.erb:268: unterminated string meets end of file):
  app/views/sales/index.html.erb:268: syntax error, unexpected '<'
  app/views/sales/index.html.erb:268: unterminated string meets end of file


I, [2015-07-12T09:19:30.536560 #25541]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 09:19:30 +0000
I, [2015-07-12T09:19:30.654855 #25541]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T09:19:30.656628 #25541] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T09:19:30.658072 #25541] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:19:30.657209"], ["updated_at", "2015-07-12 09:19:30.657209"]]
D, [2015-07-12T09:19:30.660878 #25541] DEBUG -- :   [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T09:19:30.661621 #25541] DEBUG -- : 
D, [2015-07-12T09:19:30.666359 #25541] DEBUG -- :   [1m[35mPlan Load (4.0ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T09:19:30.668315 #25541] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T09:19:30.809087 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (37.7ms)
I, [2015-07-12T09:19:30.810098 #25541]  INFO -- : Completed 500 Internal Server Error in 155ms
F, [2015-07-12T09:19:30.811826 #25541] FATAL -- : 
SyntaxError (/vagrant/sales/app/views/sales/index.html.erb:268: syntax error, unexpected '<'
        <%# 社員名 
         ^
/vagrant/sales/app/views/sales/index.html.erb:268: unterminated string meets end of file):
  app/views/sales/index.html.erb:268: syntax error, unexpected '<'
  app/views/sales/index.html.erb:268: unterminated string meets end of file


I, [2015-07-12T09:19:46.219279 #25541]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 09:19:46 +0000
I, [2015-07-12T09:19:46.328544 #25541]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T09:19:46.330110 #25541] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T09:19:46.332457 #25541] DEBUG -- :   [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:19:46.330714"], ["updated_at", "2015-07-12 09:19:46.330714"]]
D, [2015-07-12T09:19:46.338456 #25541] DEBUG -- :   [1m[35m (5.0ms)[0m  COMMIT
D, [2015-07-12T09:19:46.339239 #25541] DEBUG -- : 
D, [2015-07-12T09:19:46.344549 #25541] DEBUG -- :   [1m[36mPlan Load (3.9ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T09:19:46.346807 #25541] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-12T09:19:46.474712 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (44.1ms)
I, [2015-07-12T09:19:46.475482 #25541]  INFO -- : Completed 500 Internal Server Error in 146ms
F, [2015-07-12T09:19:46.477014 #25541] FATAL -- : 
SyntaxError (/vagrant/sales/app/views/sales/index.html.erb:261: syntax error, unexpected '<'
    <% @sales.each do |sale| 
     ^
/vagrant/sales/app/views/sales/index.html.erb:261: syntax error, unexpected keyword_do, expecting keyword_end
    <% @sales.each do |sale| 
                     ^
/vagrant/sales/app/views/sales/index.html.erb:951: syntax error, unexpected keyword_ensure, expecting end-of-input):
  app/views/sales/index.html.erb:261: syntax error, unexpected '<'
  app/views/sales/index.html.erb:261: syntax error, unexpected keyword_do, expecting keyword_end
  app/views/sales/index.html.erb:951: syntax error, unexpected keyword_ensure, expecting end-of-input


I, [2015-07-12T09:19:50.847750 #25541]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 09:19:50 +0000
I, [2015-07-12T09:19:50.965279 #25541]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T09:19:50.968028 #25541] DEBUG -- :   [1m[36m (0.3ms)[0m  [1mBEGIN[0m
D, [2015-07-12T09:19:50.969897 #25541] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:19:50.968882"], ["updated_at", "2015-07-12 09:19:50.968882"]]
D, [2015-07-12T09:19:50.972421 #25541] DEBUG -- :   [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
D, [2015-07-12T09:19:50.973276 #25541] DEBUG -- : 
D, [2015-07-12T09:19:50.977796 #25541] DEBUG -- :   [1m[35mPlan Load (3.7ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T09:19:50.981123 #25541] DEBUG -- :   [1m[36m (0.6ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T09:19:51.233453 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (152.1ms)
I, [2015-07-12T09:19:51.240880 #25541]  INFO -- : Completed 200 OK in 275ms (Views: 258.6ms | ActiveRecord: 6.0ms)
I, [2015-07-12T09:20:39.342446 #25541]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-12 09:20:39 +0000
I, [2015-07-12T09:20:39.465269 #25541]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-12T09:20:39.466115 #25541] DEBUG -- : 
D, [2015-07-12T09:20:39.471252 #25541] DEBUG -- :   [1m[35mPlan Load (4.2ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-12T09:20:39.474683 #25541] DEBUG -- :   [1m[36m (1.1ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-12T09:20:39.637963 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (72.6ms)
I, [2015-07-12T09:20:39.639958 #25541]  INFO -- : Completed 200 OK in 174ms (Views: 164.4ms | ActiveRecord: 5.4ms)
I, [2015-07-12T09:20:45.718379 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436692825450" for 192.168.33.1 at 2015-07-12 09:20:45 +0000
I, [2015-07-12T09:20:45.831062 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:20:45.831637 #25541]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436692825450"}
I, [2015-07-12T09:20:46.178792 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.6ms)
I, [2015-07-12T09:20:46.182187 #25541]  INFO -- : Completed 200 OK in 350ms (Views: 349.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:20:46.215557 #25541]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 09:20:46 +0000
I, [2015-07-12T09:20:46.334083 #25541]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T09:20:46.334645 #25541]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T09:20:46.336840 #25541] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T09:20:46.339515 #25541] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:20:46.337539"], ["updated_at", "2015-07-12 09:20:46.337539"]]
D, [2015-07-12T09:20:46.341317 #25541] DEBUG -- :   [1m[35m (0.9ms)[0m  COMMIT
D, [2015-07-12T09:20:46.341994 #25541] DEBUG -- : 
D, [2015-07-12T09:20:46.348467 #25541] DEBUG -- :   [1m[36mPlan Load (5.7ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T09:20:46.363928 #25541] DEBUG -- :   [1m[35m (0.3ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T09:20:46.902330 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (450.4ms)
I, [2015-07-12T09:20:46.905574 #25541]  INFO -- : Completed 200 OK in 570ms (Views: 540.3ms | ActiveRecord: 8.7ms)
I, [2015-07-12T09:20:48.075702 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1436692832474" for 192.168.33.1 at 2015-07-12 09:20:48 +0000
I, [2015-07-12T09:20:48.186472 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:20:48.187054 #25541]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1436692832474"}
I, [2015-07-12T09:20:48.511322 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:20:48.513089 #25541]  INFO -- : Completed 200 OK in 325ms (Views: 324.8ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:20:50.671280 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1436692832475" for 192.168.33.1 at 2015-07-12 09:20:50 +0000
I, [2015-07-12T09:20:50.781685 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:20:50.782277 #25541]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1436692832475"}
I, [2015-07-12T09:20:51.101364 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:20:51.102579 #25541]  INFO -- : Completed 200 OK in 320ms (Views: 318.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:20:51.748314 #25541]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-12 09:20:51 +0000
I, [2015-07-12T09:20:51.860617 #25541]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-12T09:20:51.861371 #25541]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"TXeUSKfgPLzm4FpVhSZHrwkKHM8zgiNdZyBBQGAkRzZx9GyXKExa6WhORwckGdH5GcIdZ9htftrIVqFg2W+T0Q==", "radios_bar"=>"chart_3s", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true", "no14"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-12T09:20:51.864084 #25541] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T09:20:51.868230 #25541] DEBUG -- :   [1m[35mSQL (1.0ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"TXeUSKfgPLzm4FpVhSZHrwkKHM8zgiNdZyBBQGAkRzZx9GyXKExa6WhORwckGdH5GcIdZ9htftrIVqFg2W+T0Q==\", \"radios_bar\"=>\"chart_3s\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\", \"no14\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-12 09:20:51.864768"], ["updated_at", "2015-07-12 09:20:51.864768"]]
D, [2015-07-12T09:20:51.870621 #25541] DEBUG -- :   [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T09:20:51.944702 #25541]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (2.7ms)
I, [2015-07-12T09:20:51.946845 #25541]  INFO -- : Completed 200 OK in 85ms (Views: 74.8ms | ActiveRecord: 1.9ms)
I, [2015-07-12T09:20:55.059409 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1436692837439" for 192.168.33.1 at 2015-07-12 09:20:55 +0000
I, [2015-07-12T09:20:55.182592 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:20:55.182938 #25541]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1436692837439"}
I, [2015-07-12T09:20:55.509334 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:20:55.510881 #25541]  INFO -- : Completed 200 OK in 327ms (Views: 326.6ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:20:56.698589 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1436692832476" for 192.168.33.1 at 2015-07-12 09:20:56 +0000
I, [2015-07-12T09:20:56.810856 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:20:56.811460 #25541]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1436692832476"}
I, [2015-07-12T09:20:57.137411 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:20:57.138709 #25541]  INFO -- : Completed 200 OK in 327ms (Views: 324.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:20:59.239727 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436692832477" for 192.168.33.1 at 2015-07-12 09:20:59 +0000
I, [2015-07-12T09:20:59.369198 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:20:59.369903 #25541]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436692832477"}
I, [2015-07-12T09:20:59.698863 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:20:59.700056 #25541]  INFO -- : Completed 200 OK in 330ms (Views: 328.8ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:20:59.728001 #25541]  INFO -- : Started GET "/sales?group_btn=A&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 09:20:59 +0000
I, [2015-07-12T09:20:59.836063 #25541]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T09:20:59.836614 #25541]  INFO -- :   Parameters: {"group_btn"=>"A", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T09:20:59.839107 #25541] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T09:20:59.841222 #25541] DEBUG -- :   [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=A&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"A\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:20:59.839779"], ["updated_at", "2015-07-12 09:20:59.839779"]]
D, [2015-07-12T09:20:59.843344 #25541] DEBUG -- :   [1m[35m (1.0ms)[0m  COMMIT
D, [2015-07-12T09:20:59.844198 #25541] DEBUG -- : A
D, [2015-07-12T09:20:59.850526 #25541] DEBUG -- :   [1m[36mPlan Load (5.5ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T09:20:59.853775 #25541] DEBUG -- :   [1m[35m (0.8ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T09:21:00.038296 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (96.6ms)
I, [2015-07-12T09:21:00.041421 #25541]  INFO -- : Completed 200 OK in 204ms (Views: 186.6ms | ActiveRecord: 7.7ms)
I, [2015-07-12T09:21:01.475840 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1436692845466" for 192.168.33.1 at 2015-07-12 09:21:01 +0000
I, [2015-07-12T09:21:01.590011 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:21:01.590634 #25541]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1436692845466"}
I, [2015-07-12T09:21:01.911618 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:21:01.912718 #25541]  INFO -- : Completed 200 OK in 321ms (Views: 319.9ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:21:03.169372 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1436692845467" for 192.168.33.1 at 2015-07-12 09:21:03 +0000
I, [2015-07-12T09:21:03.280588 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:21:03.281011 #25541]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1436692845467"}
I, [2015-07-12T09:21:03.601433 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:21:03.602645 #25541]  INFO -- : Completed 200 OK in 321ms (Views: 320.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:21:03.745362 #25541]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-12 09:21:03 +0000
I, [2015-07-12T09:21:03.862035 #25541]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-12T09:21:03.862799 #25541]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"Ky31tfhMffCVjZ6ik+AFcaynHRC1WJETYwcWDTM+M/gXrg1qd+AbpRsjg/Ay35MnvG8cuF63zJTMcfYtinXnHw==", "radios_bar"=>"chart_3s", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no1"=>"true", "no2"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良", "fseries1"=>"10,6", "fseries2"=>"8,5", "fseries3"=>"7,4", "fseries_pl_newcar"=>"8,6", "fseries_newcar"=>"15,3", "fseries_percentage_newcar"=>"187.5,50.0", "fseries_registration"=>"6,0", "fseries_percentage_registration"=>"75.0,0.0", "fseries_pl_usedcar"=>"7,4", "fseries_usedcar"=>"1,2", "fseries_percentage_usedcar"=>"14.3,50.0", "fseries_pl_onemonth"=>"8,3", "fseries_onemonth"=>"15,15", "fseries_pl_sixmonth"=>"6,5", "fseries_sixmonth"=>"14,14", "fseries_pl_years"=>"7,4", "fseries_years"=>"13,14", "fseries_years_not"=>"0,1", "fseries_percentage_all_years"=>"185.7,300.0", "fseries_pl_inspection"=>"8,6", "fseries_inspection"=>"12,10", "fseries_inspection_not"=>"11,0", "fseries_percentage_all_inspection"=>"121.1,166.7", "fseries_insurance_new"=>"0,0", "fseries_pl_insurance"=>"9,7", "fseries_insurance_renew"=>"15,12", "fseries_percentage_insurance_renew"=>"166.7,171.4", "fseries_number_of_newcar"=>"17,19", "fseries_sales_of_newcar"=>"45000000,52500000", "fseries_profit_of_newcar"=>"9050000,9350000", "fseries_number_of_usedcar"=>"8,5", "fseries_sales_of_usedcar"=>"2360000,3450000", "fseries_profit_of_usedcar"=>"250000,300000", "fseries_number_of_service"=>"3,15", "fseries_sales_of_service"=>"150000,1345000", "fseries_profit_of_service"=>"50000,450000", "fseries_sales_of_all"=>"47510,57295", "fseries_profit_of_all"=>"9350,10100", "fseries_percentage_profit_of_all"=>"19.7,17.6"}
D, [2015-07-12T09:21:03.865104 #25541] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-12T09:21:03.867655 #25541] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"Ky31tfhMffCVjZ6ik+AFcaynHRC1WJETYwcWDTM+M/gXrg1qd+AbpRsjg/Ay35MnvG8cuF63zJTMcfYtinXnHw==\", \"radios_bar\"=>\"chart_3s\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no1\"=>\"true\", \"no2\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良\", \"fseries1\"=>\"10,6\", \"fseries2\"=>\"8,5\", \"fseries3\"=>\"7,4\", \"fseries_pl_newcar\"=>\"8,6\", \"fseries_newcar\"=>\"15,3\", \"fseries_percentage_newcar\"=>\"187.5,50.0\", \"fseries_registration\"=>\"6,0\", \"fseries_percentage_registration\"=>\"75.0,0.0\", \"fseries_pl_usedcar\"=>\"7,4\", \"fseries_usedcar\"=>\"1,2\", \"fseries_percentage_usedcar\"=>\"14.3,50.0\", \"fseries_pl_onemonth\"=>\"8,3\", \"fseries_onemonth\"=>\"15,15\", \"fseries_pl_sixmonth\"=>\"6,5\", \"fseries_sixmonth\"=>\"14,14\", \"fseries_pl_years\"=>\"7,4\", \"fseries_years\"=>\"13,14\", \"fseries_years_not\"=>\"0,1\", \"fseries_percentage_all_years\"=>\"185.7,300.0\", \"fseries_pl_inspection\"=>\"8,6\", \"fseries_inspection\"=>\"12,10\", \"fseries_inspection_not\"=>\"11,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7\", \"fseries_insurance_new\"=>\"0,0\", \"fseries_pl_insurance\"=>\"9,7\", \"fseries_insurance_renew\"=>\"15,12\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4\", \"fseries_number_of_newcar\"=>\"17,19\", \"fseries_sales_of_newcar\"=>\"45000000,52500000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000\", \"fseries_number_of_usedcar\"=>\"8,5\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000\", \"fseries_profit_of_usedcar\"=>\"250000,300000\", \"fseries_number_of_service\"=>\"3,15\", \"fseries_sales_of_service\"=>\"150000,1345000\", \"fseries_profit_of_service\"=>\"50000,450000\", \"fseries_sales_of_all\"=>\"47510,57295\", \"fseries_profit_of_all\"=>\"9350,10100\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-12 09:21:03.865868"], ["updated_at", "2015-07-12 09:21:03.865868"]]
D, [2015-07-12T09:21:03.869467 #25541] DEBUG -- :   [1m[36m (0.8ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T09:21:03.937617 #25541]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (1.5ms)
I, [2015-07-12T09:21:03.939545 #25541]  INFO -- : Completed 200 OK in 76ms (Views: 68.1ms | ActiveRecord: 1.3ms)
I, [2015-07-12T09:21:13.517799 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1436692849301" for 192.168.33.1 at 2015-07-12 09:21:13 +0000
I, [2015-07-12T09:21:13.641559 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:21:13.642382 #25541]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1436692849301"}
I, [2015-07-12T09:21:13.964764 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:21:13.966144 #25541]  INFO -- : Completed 200 OK in 323ms (Views: 322.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:21:15.198509 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1436692845468" for 192.168.33.1 at 2015-07-12 09:21:15 +0000
I, [2015-07-12T09:21:15.314878 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:21:15.315473 #25541]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1436692845468"}
I, [2015-07-12T09:21:15.639385 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:21:15.640536 #25541]  INFO -- : Completed 200 OK in 324ms (Views: 323.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:21:39.625313 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1436692845469" for 192.168.33.1 at 2015-07-12 09:21:39 +0000
I, [2015-07-12T09:21:39.739275 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:21:39.739773 #25541]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1436692845469"}
I, [2015-07-12T09:21:40.056932 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:21:40.058301 #25541]  INFO -- : Completed 200 OK in 318ms (Views: 317.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:21:40.087549 #25541]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 09:21:40 +0000
I, [2015-07-12T09:21:40.201081 #25541]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T09:21:40.202346 #25541]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T09:21:40.203999 #25541] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T09:21:40.205903 #25541] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:21:40.204663"], ["updated_at", "2015-07-12 09:21:40.204663"]]
D, [2015-07-12T09:21:40.207747 #25541] DEBUG -- :   [1m[35m (0.9ms)[0m  COMMIT
D, [2015-07-12T09:21:40.208571 #25541] DEBUG -- : 
D, [2015-07-12T09:21:40.217479 #25541] DEBUG -- :   [1m[36mPlan Load (8.1ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T09:21:40.221032 #25541] DEBUG -- :   [1m[35m (0.6ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T09:21:40.763092 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (457.1ms)
I, [2015-07-12T09:21:40.766086 #25541]  INFO -- : Completed 200 OK in 563ms (Views: 543.8ms | ActiveRecord: 10.0ms)
I, [2015-07-12T09:21:42.323914 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1436692885735" for 192.168.33.1 at 2015-07-12 09:21:42 +0000
I, [2015-07-12T09:21:42.434342 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:21:42.434750 #25541]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1436692885735"}
I, [2015-07-12T09:21:42.805047 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:21:42.810065 #25541]  INFO -- : Completed 200 OK in 375ms (Views: 374.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:21:44.423343 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1436692885736" for 192.168.33.1 at 2015-07-12 09:21:44 +0000
I, [2015-07-12T09:21:44.545322 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:21:44.545746 #25541]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1436692885736"}
I, [2015-07-12T09:21:44.871824 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:21:44.873367 #25541]  INFO -- : Completed 200 OK in 327ms (Views: 326.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:21:45.001203 #25541]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-12 09:21:45 +0000
I, [2015-07-12T09:21:45.120590 #25541]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-12T09:21:45.121384 #25541]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"m7pNeC7024IX1vD9/tpTkhZjFDYGy1QerDvwDG4dhFWnObWnoVi915l47a9f5cXEBqsVnu0kCZkDTRAs11ZQsg==", "radios_bar"=>"chart_3s", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true", "no14"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-12T09:21:45.124363 #25541] DEBUG -- :   [1m[36m (0.3ms)[0m  [1mBEGIN[0m
D, [2015-07-12T09:21:45.127253 #25541] DEBUG -- :   [1m[35mSQL (0.5ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"m7pNeC7024IX1vD9/tpTkhZjFDYGy1QerDvwDG4dhFWnObWnoVi915l47a9f5cXEBqsVnu0kCZkDTRAs11ZQsg==\", \"radios_bar\"=>\"chart_3s\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\", \"no14\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-12 09:21:45.124867"], ["updated_at", "2015-07-12 09:21:45.124867"]]
D, [2015-07-12T09:21:45.129570 #25541] DEBUG -- :   [1m[36m (1.2ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T09:21:45.196205 #25541]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (2.1ms)
I, [2015-07-12T09:21:45.197813 #25541]  INFO -- : Completed 200 OK in 76ms (Views: 66.2ms | ActiveRecord: 2.0ms)
I, [2015-07-12T09:21:49.375926 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1436692890082" for 192.168.33.1 at 2015-07-12 09:21:49 +0000
I, [2015-07-12T09:21:49.496938 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:21:49.497504 #25541]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1436692890082"}
I, [2015-07-12T09:21:49.841534 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:21:49.843011 #25541]  INFO -- : Completed 200 OK in 345ms (Views: 344.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:21:51.060096 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1436692885737" for 192.168.33.1 at 2015-07-12 09:21:51 +0000
I, [2015-07-12T09:21:51.175859 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:21:51.176707 #25541]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1436692885737"}
I, [2015-07-12T09:21:51.498730 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:21:51.500077 #25541]  INFO -- : Completed 200 OK in 323ms (Views: 322.3ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:22.529890 #25541]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-12 09:22:22 +0000
I, [2015-07-12T09:22:22.645608 #25541]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T09:22:22.646105 #25541]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-12T09:22:22.648335 #25541] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-12T09:22:22.650579 #25541] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "閉じる"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:22:22.648980"], ["updated_at", "2015-07-12 09:22:22.648980"]]
D, [2015-07-12T09:22:22.653047 #25541] DEBUG -- :   [1m[35m (0.7ms)[0m  COMMIT
D, [2015-07-12T09:22:22.653950 #25541] DEBUG -- : 
D, [2015-07-12T09:22:22.660393 #25541] DEBUG -- :   [1m[36mPlan Load (5.6ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T09:22:22.663612 #25541] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T09:22:23.248110 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (493.7ms)
I, [2015-07-12T09:22:23.251215 #25541]  INFO -- : Completed 200 OK in 605ms (Views: 586.6ms | ActiveRecord: 7.1ms)
I, [2015-07-12T09:22:24.502636 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1436692927701" for 192.168.33.1 at 2015-07-12 09:22:24 +0000
I, [2015-07-12T09:22:24.614950 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:22:24.615543 #25541]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1436692927701"}
I, [2015-07-12T09:22:24.947058 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:22:24.948606 #25541]  INFO -- : Completed 200 OK in 332ms (Views: 331.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:26.412615 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1436692927702" for 192.168.33.1 at 2015-07-12 09:22:26 +0000
I, [2015-07-12T09:22:26.533598 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:22:26.534301 #25541]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1436692927702"}
I, [2015-07-12T09:22:26.889401 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:22:26.890692 #25541]  INFO -- : Completed 200 OK in 356ms (Views: 354.7ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:27.036299 #25541]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-12 09:22:27 +0000
I, [2015-07-12T09:22:27.146639 #25541]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-12T09:22:27.147531 #25541]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"bn1sNyKX3dvMEaFEqG1TTWUIYHGtaNhDx0+8ZQCvdZ9S/pTorTu7jkK/vBYJUsUbdcBh2UaHhcRoOVxFueSheA==", "radios_bar"=>"chart_3s", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-12T09:22:27.152206 #25541] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mBEGIN[0m
D, [2015-07-12T09:22:27.155095 #25541] DEBUG -- :   [1m[35mSQL (0.6ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"bn1sNyKX3dvMEaFEqG1TTWUIYHGtaNhDx0+8ZQCvdZ9S/pTorTu7jkK/vBYJUsUbdcBh2UaHhcRoOVxFueSheA==\", \"radios_bar\"=>\"chart_3s\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-12 09:22:27.152867"], ["updated_at", "2015-07-12 09:22:27.152867"]]
D, [2015-07-12T09:22:27.157144 #25541] DEBUG -- :   [1m[36m (0.9ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T09:22:27.222595 #25541]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (1.8ms)
I, [2015-07-12T09:22:27.224122 #25541]  INFO -- : Completed 200 OK in 76ms (Views: 65.8ms | ActiveRecord: 2.0ms)
I, [2015-07-12T09:22:30.992887 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1436692927703" for 192.168.33.1 at 2015-07-12 09:22:30 +0000
I, [2015-07-12T09:22:31.103852 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:22:31.104374 #25541]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1436692927703"}
I, [2015-07-12T09:22:31.437046 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:22:31.438470 #25541]  INFO -- : Completed 200 OK in 334ms (Views: 332.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:33.570130 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1436692927704" for 192.168.33.1 at 2015-07-12 09:22:33 +0000
I, [2015-07-12T09:22:33.688463 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:22:33.689828 #25541]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1436692927704"}
I, [2015-07-12T09:22:34.026641 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:22:34.028177 #25541]  INFO -- : Completed 200 OK in 338ms (Views: 336.4ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:34.054332 #25541]  INFO -- : Started GET "/sales?group_btn=A&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-12 09:22:34 +0000
I, [2015-07-12T09:22:34.175550 #25541]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-12T09:22:34.176789 #25541]  INFO -- :   Parameters: {"group_btn"=>"A", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-12T09:22:34.179191 #25541] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T09:22:34.181339 #25541] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=A&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"A\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-12 09:22:34.179884"], ["updated_at", "2015-07-12 09:22:34.179884"]]
D, [2015-07-12T09:22:34.184849 #25541] DEBUG -- :   [1m[35m (1.7ms)[0m  COMMIT
D, [2015-07-12T09:22:34.185700 #25541] DEBUG -- : A
D, [2015-07-12T09:22:34.190806 #25541] DEBUG -- :   [1m[36mPlan Load (4.3ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-12T09:22:34.193695 #25541] DEBUG -- :   [1m[35m (0.4ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-12T09:22:34.374102 #25541]  INFO -- :   Rendered sales/index.html.erb within layouts/application (91.4ms)
I, [2015-07-12T09:22:34.377279 #25541]  INFO -- : Completed 200 OK in 200ms (Views: 181.7ms | ActiveRecord: 6.8ms)
I, [2015-07-12T09:22:35.723619 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1436692938711" for 192.168.33.1 at 2015-07-12 09:22:35 +0000
I, [2015-07-12T09:22:35.836479 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:22:35.837131 #25541]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1436692938711"}
I, [2015-07-12T09:22:36.174939 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:22:36.176863 #25541]  INFO -- : Completed 200 OK in 339ms (Views: 338.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:37.237318 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1436692938712" for 192.168.33.1 at 2015-07-12 09:22:37 +0000
I, [2015-07-12T09:22:37.353636 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:22:37.354235 #25541]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1436692938712"}
I, [2015-07-12T09:22:37.713777 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:22:37.715433 #25541]  INFO -- : Completed 200 OK in 361ms (Views: 360.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:37.868808 #25541]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-12 09:22:37 +0000
I, [2015-07-12T09:22:37.994237 #25541]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-12T09:22:37.994861 #25541]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"j78/7kO8oaEmP7XC3i9Tb7qUhMWHuuKvCVk5k86JIjuzPMcxzBDH9KiRqJB/EMU5qlyFbWxVvyimL9mzd8L23A==", "radios_bar"=>"chart_3s", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良", "fseries1"=>"10,6", "fseries2"=>"8,5", "fseries3"=>"7,4", "fseries_pl_newcar"=>"8,6", "fseries_newcar"=>"15,3", "fseries_percentage_newcar"=>"187.5,50.0", "fseries_registration"=>"6,0", "fseries_percentage_registration"=>"75.0,0.0", "fseries_pl_usedcar"=>"7,4", "fseries_usedcar"=>"1,2", "fseries_percentage_usedcar"=>"14.3,50.0", "fseries_pl_onemonth"=>"8,3", "fseries_onemonth"=>"15,15", "fseries_pl_sixmonth"=>"6,5", "fseries_sixmonth"=>"14,14", "fseries_pl_years"=>"7,4", "fseries_years"=>"13,14", "fseries_years_not"=>"0,1", "fseries_percentage_all_years"=>"185.7,300.0", "fseries_pl_inspection"=>"8,6", "fseries_inspection"=>"12,10", "fseries_inspection_not"=>"11,0", "fseries_percentage_all_inspection"=>"121.1,166.7", "fseries_insurance_new"=>"0,0", "fseries_pl_insurance"=>"9,7", "fseries_insurance_renew"=>"15,12", "fseries_percentage_insurance_renew"=>"166.7,171.4", "fseries_number_of_newcar"=>"17,19", "fseries_sales_of_newcar"=>"45000000,52500000", "fseries_profit_of_newcar"=>"9050000,9350000", "fseries_number_of_usedcar"=>"8,5", "fseries_sales_of_usedcar"=>"2360000,3450000", "fseries_profit_of_usedcar"=>"250000,300000", "fseries_number_of_service"=>"3,15", "fseries_sales_of_service"=>"150000,1345000", "fseries_profit_of_service"=>"50000,450000", "fseries_sales_of_all"=>"47510,57295", "fseries_profit_of_all"=>"9350,10100", "fseries_percentage_profit_of_all"=>"19.7,17.6"}
D, [2015-07-12T09:22:37.997969 #25541] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-12T09:22:38.001211 #25541] DEBUG -- :   [1m[35mSQL (0.8ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"j78/7kO8oaEmP7XC3i9Tb7qUhMWHuuKvCVk5k86JIjuzPMcxzBDH9KiRqJB/EMU5qlyFbWxVvyimL9mzd8L23A==\", \"radios_bar\"=>\"chart_3s\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良\", \"fseries1\"=>\"10,6\", \"fseries2\"=>\"8,5\", \"fseries3\"=>\"7,4\", \"fseries_pl_newcar\"=>\"8,6\", \"fseries_newcar\"=>\"15,3\", \"fseries_percentage_newcar\"=>\"187.5,50.0\", \"fseries_registration\"=>\"6,0\", \"fseries_percentage_registration\"=>\"75.0,0.0\", \"fseries_pl_usedcar\"=>\"7,4\", \"fseries_usedcar\"=>\"1,2\", \"fseries_percentage_usedcar\"=>\"14.3,50.0\", \"fseries_pl_onemonth\"=>\"8,3\", \"fseries_onemonth\"=>\"15,15\", \"fseries_pl_sixmonth\"=>\"6,5\", \"fseries_sixmonth\"=>\"14,14\", \"fseries_pl_years\"=>\"7,4\", \"fseries_years\"=>\"13,14\", \"fseries_years_not\"=>\"0,1\", \"fseries_percentage_all_years\"=>\"185.7,300.0\", \"fseries_pl_inspection\"=>\"8,6\", \"fseries_inspection\"=>\"12,10\", \"fseries_inspection_not\"=>\"11,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7\", \"fseries_insurance_new\"=>\"0,0\", \"fseries_pl_insurance\"=>\"9,7\", \"fseries_insurance_renew\"=>\"15,12\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4\", \"fseries_number_of_newcar\"=>\"17,19\", \"fseries_sales_of_newcar\"=>\"45000000,52500000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000\", \"fseries_number_of_usedcar\"=>\"8,5\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000\", \"fseries_profit_of_usedcar\"=>\"250000,300000\", \"fseries_number_of_service\"=>\"3,15\", \"fseries_sales_of_service\"=>\"150000,1345000\", \"fseries_profit_of_service\"=>\"50000,450000\", \"fseries_sales_of_all\"=>\"47510,57295\", \"fseries_profit_of_all\"=>\"9350,10100\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-12 09:22:37.998830"], ["updated_at", "2015-07-12 09:22:37.998830"]]
D, [2015-07-12T09:22:38.003548 #25541] DEBUG -- :   [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
I, [2015-07-12T09:22:38.073709 #25541]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (1.2ms)
I, [2015-07-12T09:22:38.075480 #25541]  INFO -- : Completed 200 OK in 80ms (Views: 70.7ms | ActiveRecord: 2.0ms)
I, [2015-07-12T09:22:41.848287 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1436692942363" for 192.168.33.1 at 2015-07-12 09:22:41 +0000
I, [2015-07-12T09:22:41.962769 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:22:41.963556 #25541]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1436692942363"}
I, [2015-07-12T09:22:42.308302 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:22:42.309805 #25541]  INFO -- : Completed 200 OK in 346ms (Views: 345.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:43.432665 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1436692938713" for 192.168.33.1 at 2015-07-12 09:22:43 +0000
I, [2015-07-12T09:22:43.544343 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:22:43.544965 #25541]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1436692938713"}
I, [2015-07-12T09:22:43.871010 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:22:43.872389 #25541]  INFO -- : Completed 200 OK in 327ms (Views: 326.1ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:44.790683 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86%E8%80%85&_=1436692938714" for 192.168.33.1 at 2015-07-12 09:22:44 +0000
I, [2015-07-12T09:22:44.903458 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:22:44.903615 #25541]  INFO -- :   Parameters: {"action_name"=>"システム管理者", "_"=>"1436692938714"}
I, [2015-07-12T09:22:45.228804 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:22:45.229735 #25541]  INFO -- : Completed 200 OK in 325ms (Views: 324.0ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:45.895679 #25541]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%83%AD%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88&_=1436692938715" for 192.168.33.1 at 2015-07-12 09:22:45 +0000
I, [2015-07-12T09:22:46.015493 #25541]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-12T09:22:46.015800 #25541]  INFO -- :   Parameters: {"action_name"=>"ログアウト", "_"=>"1436692938715"}
I, [2015-07-12T09:22:46.385805 #25541]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-12T09:22:46.386695 #25541]  INFO -- : Completed 200 OK in 370ms (Views: 369.5ms | ActiveRecord: 0.0ms)
I, [2015-07-12T09:22:46.437113 #25541]  INFO -- : Started DELETE "/logins/0" for 192.168.33.1 at 2015-07-12 09:22:46 +0000
I, [2015-07-12T09:22:46.545169 #25541]  INFO -- : Processing by LoginsController#destroy as HTML
I, [2015-07-12T09:22:46.546180 #25541]  INFO -- :   Parameters: {"authenticity_token"=>"j78/7kO8oaEmP7XC3i9Tb7qUhMWHuuKvCVk5k86JIjuzPMcxzBDH9KiRqJB/EMU5qlyFbWxVvyimL9mzd8L23A==", "id"=>"0"}
D, [2015-07-12T09:22:46.548888 #25541] DEBUG -- :   [1m[35m (0.2ms)[0m  BEGIN
D, [2015-07-12T09:22:46.551072 #25541] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/logins/0"], ["action", "ログアウト"], ["parameters", "{\"_method\"=>\"delete\", \"authenticity_token\"=>\"j78/7kO8oaEmP7XC3i9Tb7qUhMWHuuKvCVk5k86JIjuzPMcxzBDH9KiRqJB/EMU5qlyFbWxVvyimL9mzd8L23A==\", \"controller\"=>\"logins\", \"action\"=>\"destroy\", \"id\"=>\"0\"}"], ["created_at", "2015-07-12 09:22:46.549637"], ["updated_at", "2015-07-12 09:22:46.549637"]]
D, [2015-07-12T09:22:46.553353 #25541] DEBUG -- :   [1m[35m (1.0ms)[0m  COMMIT
I, [2015-07-12T09:22:46.554380 #25541]  INFO -- : Redirected to http://192.168.33.10/
I, [2015-07-12T09:22:46.555130 #25541]  INFO -- : Completed 302 Found in 8ms (ActiveRecord: 1.5ms)
I, [2015-07-12T09:22:46.565066 #25541]  INFO -- : Started GET "/" for 192.168.33.1 at 2015-07-12 09:22:46 +0000
I, [2015-07-12T09:22:46.676194 #25541]  INFO -- : Processing by LoginsController#new as HTML
I, [2015-07-12T09:22:46.742675 #25541]  INFO -- :   Rendered logins/new.html.erb within layouts/login (1.7ms)
I, [2015-07-12T09:22:46.744002 #25541]  INFO -- : Completed 200 OK in 67ms (Views: 66.4ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:43:04.488632 #10735]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-17 12:43:04 +0000
I, [2015-07-17T12:43:04.614193 #10735]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-17T12:43:04.614905 #10735]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-17T12:43:04.663153 #10735] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-17T12:43:04.677693 #10735] DEBUG -- :   [1m[35mSQL (0.5ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "閉じる"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-17 12:43:04.663832"], ["updated_at", "2015-07-17 12:43:04.663832"]]
D, [2015-07-17T12:43:04.682630 #10735] DEBUG -- :   [1m[36m (3.7ms)[0m  [1mCOMMIT[0m
D, [2015-07-17T12:43:04.683638 #10735] DEBUG -- : 
D, [2015-07-17T12:43:04.694287 #10735] DEBUG -- :   [1m[35mPlan Load (9.4ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-17T12:43:04.714183 #10735] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-17T12:43:05.239255 #10735]  INFO -- :   Rendered sales/index.html.erb within layouts/application (429.5ms)
I, [2015-07-17T12:43:05.244087 #10735]  INFO -- : Completed 200 OK in 629ms (Views: 528.2ms | ActiveRecord: 23.4ms)
I, [2015-07-17T12:43:08.164999 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1437136953027" for 192.168.33.1 at 2015-07-17 12:43:08 +0000
I, [2015-07-17T12:43:08.283226 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:43:08.284393 #10735]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1437136953027"}
I, [2015-07-17T12:43:08.557654 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.4ms)
I, [2015-07-17T12:43:08.559196 #10735]  INFO -- : Completed 200 OK in 274ms (Views: 273.5ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:43:10.982782 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437136953028" for 192.168.33.1 at 2015-07-17 12:43:10 +0000
I, [2015-07-17T12:43:11.094725 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:43:11.095407 #10735]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437136953028"}
I, [2015-07-17T12:43:11.387071 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-17T12:43:11.388746 #10735]  INFO -- : Completed 200 OK in 293ms (Views: 292.1ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:43:11.738554 #10735]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-17 12:43:11 +0000
I, [2015-07-17T12:43:11.833356 #10735]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-17T12:43:11.834081 #10735]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==", "radios_bar"=>"chart_newcar", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-17T12:43:11.836527 #10735] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-17T12:43:11.839101 #10735] DEBUG -- :   [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==\", \"radios_bar\"=>\"chart_newcar\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-17 12:43:11.837335"], ["updated_at", "2015-07-17 12:43:11.837335"]]
D, [2015-07-17T12:43:11.841891 #10735] DEBUG -- :   [1m[35m (1.7ms)[0m  COMMIT
I, [2015-07-17T12:43:11.843695 #10735]  INFO -- : Completed 500 Internal Server Error in 9ms
F, [2015-07-17T12:43:11.845187 #10735] FATAL -- : 
TypeError (String can't be coerced into Float):
  app/controllers/charts_controller.rb:96:in `+'
  app/controllers/charts_controller.rb:96:in `block in create'
  app/controllers/charts_controller.rb:95:in `each'
  app/controllers/charts_controller.rb:95:in `create'


I, [2015-07-17T12:44:17.171402 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437136953029" for 192.168.33.1 at 2015-07-17 12:44:17 +0000
I, [2015-07-17T12:44:17.550417 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:44:17.550881 #10735]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437136953029"}
I, [2015-07-17T12:44:17.844810 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-17T12:44:17.846055 #10735]  INFO -- : Completed 200 OK in 295ms (Views: 293.3ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:44:17.944063 #10735]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-17 12:44:17 +0000
I, [2015-07-17T12:44:18.067227 #10735]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-17T12:44:18.068152 #10735]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==", "radios_bar"=>"chart_newcar", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-17T12:44:18.098671 #10735] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-17T12:44:18.100552 #10735] DEBUG -- :   [1m[35mSQL (0.4ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==\", \"radios_bar\"=>\"chart_newcar\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-17 12:44:18.099396"], ["updated_at", "2015-07-17 12:44:18.099396"]]
D, [2015-07-17T12:44:18.104178 #10735] DEBUG -- :   [1m[36m (2.6ms)[0m  [1mCOMMIT[0m
I, [2015-07-17T12:44:18.105259 #10735]  INFO -- : Completed 500 Internal Server Error in 36ms
F, [2015-07-17T12:44:18.106671 #10735] FATAL -- : 
TypeError (String can't be coerced into Fixnum):
  app/controllers/charts_controller.rb:96:in `+'
  app/controllers/charts_controller.rb:96:in `block in create'
  app/controllers/charts_controller.rb:95:in `each'
  app/controllers/charts_controller.rb:95:in `create'


I, [2015-07-17T12:46:08.757820 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437136953030" for 192.168.33.1 at 2015-07-17 12:46:08 +0000
I, [2015-07-17T12:46:09.089485 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:46:09.090390 #10735]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437136953030"}
I, [2015-07-17T12:46:09.416929 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-17T12:46:09.418037 #10735]  INFO -- : Completed 200 OK in 327ms (Views: 326.1ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:46:09.720530 #10735]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-17 12:46:09 +0000
I, [2015-07-17T12:46:09.840977 #10735]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-17T12:46:09.841677 #10735]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==", "radios_bar"=>"chart_newcar", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-17T12:46:09.870688 #10735] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-17T12:46:09.873176 #10735] DEBUG -- :   [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==\", \"radios_bar\"=>\"chart_newcar\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-17 12:46:09.871390"], ["updated_at", "2015-07-17 12:46:09.871390"]]
D, [2015-07-17T12:46:09.876634 #10735] DEBUG -- :   [1m[35m (2.4ms)[0m  COMMIT
I, [2015-07-17T12:46:09.935580 #10735]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (3.3ms)
I, [2015-07-17T12:46:09.937332 #10735]  INFO -- : Completed 200 OK in 95ms (Views: 59.6ms | ActiveRecord: 5.6ms)
I, [2015-07-17T12:55:04.826797 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437137135569" for 192.168.33.1 at 2015-07-17 12:55:04 +0000
I, [2015-07-17T12:55:05.175805 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:55:05.176278 #10735]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437137135569"}
I, [2015-07-17T12:55:05.457623 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-17T12:55:05.459034 #10735]  INFO -- : Completed 200 OK in 282ms (Views: 281.2ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:55:07.316209 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437136953031" for 192.168.33.1 at 2015-07-17 12:55:07 +0000
I, [2015-07-17T12:55:07.424767 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:55:07.426003 #10735]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437136953031"}
I, [2015-07-17T12:55:07.720639 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-17T12:55:07.721633 #10735]  INFO -- : Completed 200 OK in 295ms (Views: 294.5ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:56:53.073168 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1437136953032" for 192.168.33.1 at 2015-07-17 12:56:53 +0000
I, [2015-07-17T12:56:53.420841 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:56:53.421125 #10735]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1437136953032"}
I, [2015-07-17T12:56:53.698765 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-17T12:56:53.700088 #10735]  INFO -- : Completed 200 OK in 278ms (Views: 277.6ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:56:55.699934 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437136953033" for 192.168.33.1 at 2015-07-17 12:56:55 +0000
I, [2015-07-17T12:56:55.810464 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:56:55.811111 #10735]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437136953033"}
I, [2015-07-17T12:56:56.101834 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-17T12:56:56.103006 #10735]  INFO -- : Completed 200 OK in 291ms (Views: 289.9ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:56:56.410102 #10735]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-17 12:56:56 +0000
I, [2015-07-17T12:56:56.525773 #10735]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-17T12:56:56.527135 #10735]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==", "radios_bar"=>"chart_newcar", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-17T12:56:56.557061 #10735] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-17T12:56:56.560478 #10735] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==\", \"radios_bar\"=>\"chart_newcar\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-17 12:56:56.557969"], ["updated_at", "2015-07-17 12:56:56.557969"]]
D, [2015-07-17T12:56:56.564307 #10735] DEBUG -- :   [1m[36m (2.0ms)[0m  [1mCOMMIT[0m
I, [2015-07-17T12:56:56.623284 #10735]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (3.1ms)
I, [2015-07-17T12:56:56.624253 #10735]  INFO -- : Completed 200 OK in 97ms (Views: 58.6ms | ActiveRecord: 4.7ms)
I, [2015-07-17T12:57:07.762951 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437136953034" for 192.168.33.1 at 2015-07-17 12:57:07 +0000
I, [2015-07-17T12:57:07.874791 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:57:07.875290 #10735]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437136953034"}
I, [2015-07-17T12:57:08.224870 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-17T12:57:08.226034 #10735]  INFO -- : Completed 200 OK in 350ms (Views: 349.5ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:57:51.328417 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1437136953035" for 192.168.33.1 at 2015-07-17 12:57:51 +0000
I, [2015-07-17T12:57:51.667534 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:57:51.668140 #10735]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1437136953035"}
I, [2015-07-17T12:57:51.952726 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-17T12:57:51.954045 #10735]  INFO -- : Completed 200 OK in 285ms (Views: 284.8ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:57:54.185307 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437136953036" for 192.168.33.1 at 2015-07-17 12:57:54 +0000
I, [2015-07-17T12:57:54.306649 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:57:54.307229 #10735]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437136953036"}
I, [2015-07-17T12:57:54.579373 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-17T12:57:54.580592 #10735]  INFO -- : Completed 200 OK in 273ms (Views: 272.4ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:57:54.680833 #10735]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-17 12:57:54 +0000
I, [2015-07-17T12:57:54.810195 #10735]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-17T12:57:54.811122 #10735]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==", "radios_bar"=>"chart_newcar", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-17T12:57:54.840403 #10735] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-17T12:57:54.842888 #10735] DEBUG -- :   [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==\", \"radios_bar\"=>\"chart_newcar\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-17 12:57:54.841188"], ["updated_at", "2015-07-17 12:57:54.841188"]]
D, [2015-07-17T12:57:54.847252 #10735] DEBUG -- :   [1m[35m (3.1ms)[0m  COMMIT
I, [2015-07-17T12:57:54.908721 #10735]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (2.3ms)
I, [2015-07-17T12:57:54.909928 #10735]  INFO -- : Completed 200 OK in 98ms (Views: 61.4ms | ActiveRecord: 5.1ms)
I, [2015-07-17T12:57:59.121081 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437137832416" for 192.168.33.1 at 2015-07-17 12:57:59 +0000
I, [2015-07-17T12:57:59.230450 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:57:59.230855 #10735]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437137832416"}
I, [2015-07-17T12:57:59.532371 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-17T12:57:59.533610 #10735]  INFO -- : Completed 200 OK in 302ms (Views: 301.6ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:58:02.028761 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437136953037" for 192.168.33.1 at 2015-07-17 12:58:02 +0000
I, [2015-07-17T12:58:02.128664 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:58:02.129198 #10735]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437136953037"}
I, [2015-07-17T12:58:02.419786 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-17T12:58:02.421026 #10735]  INFO -- : Completed 200 OK in 291ms (Views: 290.7ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:58:02.562490 #10735]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-17 12:58:02 +0000
I, [2015-07-17T12:58:02.657309 #10735]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-17T12:58:02.657970 #10735]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==", "radios_bar"=>"chart_newcar", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-17T12:58:02.660467 #10735] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-17T12:58:02.662828 #10735] DEBUG -- :   [1m[35mSQL (0.5ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==\", \"radios_bar\"=>\"chart_newcar\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-17 12:58:02.661199"], ["updated_at", "2015-07-17 12:58:02.661199"]]
D, [2015-07-17T12:58:02.665521 #10735] DEBUG -- :   [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
I, [2015-07-17T12:58:02.721763 #10735]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (3.1ms)
I, [2015-07-17T12:58:02.723471 #10735]  INFO -- : Completed 200 OK in 65ms (Views: 56.6ms | ActiveRecord: 1.6ms)
I, [2015-07-17T12:58:06.986462 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437137840147" for 192.168.33.1 at 2015-07-17 12:58:06 +0000
I, [2015-07-17T12:58:07.099780 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:58:07.100342 #10735]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437137840147"}
I, [2015-07-17T12:58:07.432878 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-17T12:58:07.434053 #10735]  INFO -- : Completed 200 OK in 333ms (Views: 332.4ms | ActiveRecord: 0.0ms)
I, [2015-07-17T12:58:08.647962 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437136953038" for 192.168.33.1 at 2015-07-17 12:58:08 +0000
I, [2015-07-17T12:58:08.760646 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T12:58:08.761778 #10735]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437136953038"}
I, [2015-07-17T12:58:09.045567 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-17T12:58:09.046959 #10735]  INFO -- : Completed 200 OK in 285ms (Views: 283.9ms | ActiveRecord: 0.0ms)
I, [2015-07-17T13:01:45.541769 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86%E8%80%85&_=1437136953039" for 192.168.33.1 at 2015-07-17 13:01:45 +0000
I, [2015-07-17T13:01:45.644481 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T13:01:45.644943 #10735]  INFO -- :   Parameters: {"action_name"=>"システム管理者", "_"=>"1437136953039"}
I, [2015-07-17T13:01:45.920980 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-17T13:01:45.921958 #10735]  INFO -- : Completed 200 OK in 277ms (Views: 275.9ms | ActiveRecord: 0.0ms)
I, [2015-07-17T13:01:47.207789 #10735]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%83%AD%E3%82%B0%E3%82%A2%E3%82%A6%E3%83%88&_=1437136953040" for 192.168.33.1 at 2015-07-17 13:01:47 +0000
I, [2015-07-17T13:01:47.309459 #10735]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-17T13:01:47.309878 #10735]  INFO -- :   Parameters: {"action_name"=>"ログアウト", "_"=>"1437136953040"}
I, [2015-07-17T13:01:47.593333 #10735]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-17T13:01:47.594333 #10735]  INFO -- : Completed 200 OK in 284ms (Views: 283.4ms | ActiveRecord: 0.0ms)
I, [2015-07-17T13:01:47.645323 #10735]  INFO -- : Started DELETE "/logins/0" for 192.168.33.1 at 2015-07-17 13:01:47 +0000
I, [2015-07-17T13:01:47.749677 #10735]  INFO -- : Processing by LoginsController#destroy as HTML
I, [2015-07-17T13:01:47.750135 #10735]  INFO -- :   Parameters: {"authenticity_token"=>"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==", "id"=>"0"}
D, [2015-07-17T13:01:47.752429 #10735] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-17T13:01:47.754162 #10735] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/logins/0"], ["action", "ログアウト"], ["parameters", "{\"_method\"=>\"delete\", \"authenticity_token\"=>\"4waCmPlH8TqqVLn0Ek9juWRZa41ukBiD2iXfrY+LCqoAJlZZw2IoZZvzvieishiUjmoS8Ji4YN46FX4vhiS1iw==\", \"controller\"=>\"logins\", \"action\"=>\"destroy\", \"id\"=>\"0\"}"], ["created_at", "2015-07-17 13:01:47.752994"], ["updated_at", "2015-07-17 13:01:47.752994"]]
D, [2015-07-17T13:01:47.759523 #10735] DEBUG -- :   [1m[35m (3.2ms)[0m  COMMIT
I, [2015-07-17T13:01:47.760664 #10735]  INFO -- : Redirected to http://192.168.33.10/
I, [2015-07-17T13:01:47.761407 #10735]  INFO -- : Completed 302 Found in 11ms (ActiveRecord: 3.6ms)
I, [2015-07-17T13:01:47.771924 #10735]  INFO -- : Started GET "/" for 192.168.33.1 at 2015-07-17 13:01:47 +0000
I, [2015-07-17T13:01:47.869250 #10735]  INFO -- : Processing by LoginsController#new as HTML
I, [2015-07-17T13:01:47.923736 #10735]  INFO -- :   Rendered logins/new.html.erb within layouts/login (1.0ms)
I, [2015-07-17T13:01:47.924834 #10735]  INFO -- : Completed 200 OK in 55ms (Views: 54.8ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:12:21.466882 #2251]  INFO -- : Started GET "/" for 192.168.33.1 at 2015-07-18 09:12:21 +0000
I, [2015-07-18T09:12:21.837620 #2251]  INFO -- : Processing by LoginsController#new as HTML
I, [2015-07-18T09:12:21.974923 #2251]  INFO -- :   Rendered logins/new.html.erb within layouts/login (2.5ms)
I, [2015-07-18T09:12:21.977551 #2251]  INFO -- : Completed 200 OK in 139ms (Views: 120.8ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:12:26.762197 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%0A++&_=1437210744088" for 192.168.33.1 at 2015-07-18 09:12:26 +0000
I, [2015-07-18T09:12:26.872547 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:12:26.873192 #2251]  INFO -- :   Parameters: {"action_name"=>"\n    ログイン\n  ", "_"=>"1437210744088"}
I, [2015-07-18T09:12:27.235225 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.4ms)
I, [2015-07-18T09:12:27.236708 #2251]  INFO -- : Completed 200 OK in 363ms (Views: 362.4ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:12:27.337645 #2251]  INFO -- : Started POST "/logins/log" for 192.168.33.1 at 2015-07-18 09:12:27 +0000
I, [2015-07-18T09:12:27.458317 #2251]  INFO -- : Processing by LoginsController#log as HTML
I, [2015-07-18T09:12:27.458900 #2251]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"dY7J55y+Mln9ehvVAcd6dO5KUGSeiY99Wy1QqCFAoT/+iUrPKFElIojMYPZUAhMbwSA1dYAMFVxX/1dsHqwPtA==", "login_id"=>"system", "login_pass"=>"master", "button"=>""}
D, [2015-07-18T09:12:27.506784 #2251] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-18T09:12:27.525138 #2251] DEBUG -- :   [1m[35mSQL (4.1ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", ""], ["url", "/logins/log"], ["action", "\n    ログイン\n  "], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"dY7J55y+Mln9ehvVAcd6dO5KUGSeiY99Wy1QqCFAoT/+iUrPKFElIojMYPZUAhMbwSA1dYAMFVxX/1dsHqwPtA==\", \"login_id\"=>\"system\", \"login_pass\"=>\"master\", \"button\"=>\"\", \"controller\"=>\"logins\", \"action\"=>\"log\"}"], ["created_at", "2015-07-18 09:12:27.507612"], ["updated_at", "2015-07-18 09:12:27.507612"]]
D, [2015-07-18T09:12:27.527614 #2251] DEBUG -- :   [1m[36m (1.1ms)[0m  [1mCOMMIT[0m
D, [2015-07-18T09:12:27.558838 #2251] DEBUG -- :   [1m[35mUser Exists (1.0ms)[0m  SELECT  1 AS one FROM "users" WHERE "users"."user_id" = $1 AND "users"."user_password" = $2 AND "users"."delete_flag" = $3 LIMIT 1  [["user_id", "system"], ["user_password", "master"], ["delete_flag", "0"]]
D, [2015-07-18T09:12:27.562158 #2251] DEBUG -- :   [1m[36mUser Load (0.2ms)[0m  [1mSELECT  "users".* FROM "users" WHERE "users"."user_id" = $1 AND "users"."user_password" = $2 AND "users"."delete_flag" = $3  ORDER BY "users"."id" ASC LIMIT 1[0m  [["user_id", "system"], ["user_password", "master"], ["delete_flag", "0"]]
I, [2015-07-18T09:12:27.572695 #2251]  INFO -- : Redirected to http://192.168.33.10/sales
I, [2015-07-18T09:12:27.573517 #2251]  INFO -- : Completed 302 Found in 114ms (ActiveRecord: 33.9ms)
I, [2015-07-18T09:12:27.588404 #2251]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-18 09:12:27 +0000
I, [2015-07-18T09:12:27.697189 #2251]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-18T09:12:27.698994 #2251] DEBUG -- : 
D, [2015-07-18T09:12:27.724476 #2251] DEBUG -- :   [1m[35mPlan Load (24.3ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-18T09:12:27.731287 #2251] DEBUG -- :   [1m[36m (1.0ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-18T09:12:27.974853 #2251]  INFO -- :   Rendered sales/index.html.erb within layouts/application (143.3ms)
I, [2015-07-18T09:12:27.979518 #2251]  INFO -- : Completed 200 OK in 282ms (Views: 247.0ms | ActiveRecord: 26.8ms)
I, [2015-07-18T09:12:39.951031 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1437210750052" for 192.168.33.1 at 2015-07-18 09:12:39 +0000
I, [2015-07-18T09:12:40.066273 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:12:40.066793 #2251]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1437210750052"}
I, [2015-07-18T09:12:40.378833 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:12:40.380358 #2251]  INFO -- : Completed 200 OK in 313ms (Views: 312.4ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:12:40.444402 #2251]  INFO -- : Started GET "/sales?group_btn=A&sale_ym_from=201507&sale_ym_to=201507" for 192.168.33.1 at 2015-07-18 09:12:40 +0000
I, [2015-07-18T09:12:40.550491 #2251]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-18T09:12:40.551342 #2251]  INFO -- :   Parameters: {"group_btn"=>"A", "sale_ym_from"=>"201507", "sale_ym_to"=>"201507"}
D, [2015-07-18T09:12:40.553421 #2251] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-18T09:12:40.555795 #2251] DEBUG -- :   [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=A&sale_ym_from=201507&sale_ym_to=201507"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"A\", \"sale_ym_from\"=>\"201507\", \"sale_ym_to\"=>\"201507\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-18 09:12:40.554115"], ["updated_at", "2015-07-18 09:12:40.554115"]]
D, [2015-07-18T09:12:40.557788 #2251] DEBUG -- :   [1m[35m (0.9ms)[0m  COMMIT
D, [2015-07-18T09:12:40.558682 #2251] DEBUG -- : A
D, [2015-07-18T09:12:40.563796 #2251] DEBUG -- :   [1m[36mPlan Load (4.2ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-18T09:12:40.566193 #2251] DEBUG -- :   [1m[35m (0.8ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-18T09:12:40.692942 #2251]  INFO -- :   Rendered sales/index.html.erb within layouts/application (40.9ms)
I, [2015-07-18T09:12:40.694731 #2251]  INFO -- : Completed 200 OK in 143ms (Views: 127.4ms | ActiveRecord: 6.6ms)
I, [2015-07-18T09:12:45.636460 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1437210762784" for 192.168.33.1 at 2015-07-18 09:12:45 +0000
I, [2015-07-18T09:12:45.747515 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:12:45.748189 #2251]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1437210762784"}
I, [2015-07-18T09:12:46.062647 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:12:46.063941 #2251]  INFO -- : Completed 200 OK in 315ms (Views: 314.4ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:12:46.172611 #2251]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-18 09:12:46 +0000
I, [2015-07-18T09:12:46.277837 #2251]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-18T09:12:46.278401 #2251]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-18T09:12:46.281878 #2251] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-18T09:12:46.283452 #2251] DEBUG -- :   [1m[35mSQL (0.2ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-18 09:12:46.282353"], ["updated_at", "2015-07-18 09:12:46.282353"]]
D, [2015-07-18T09:12:46.286843 #2251] DEBUG -- :   [1m[36m (2.1ms)[0m  [1mCOMMIT[0m
D, [2015-07-18T09:12:46.287653 #2251] DEBUG -- : 
D, [2015-07-18T09:12:46.295659 #2251] DEBUG -- :   [1m[35mPlan Load (7.1ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-18T09:12:46.309366 #2251] DEBUG -- :   [1m[36m (0.7ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-18T09:12:46.819771 #2251]  INFO -- :   Rendered sales/index.html.erb within layouts/application (423.8ms)
I, [2015-07-18T09:12:46.821991 #2251]  INFO -- : Completed 200 OK in 543ms (Views: 511.2ms | ActiveRecord: 11.7ms)
I, [2015-07-18T09:12:48.767907 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1437210768892" for 192.168.33.1 at 2015-07-18 09:12:48 +0000
I, [2015-07-18T09:12:48.876316 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:12:48.876830 #2251]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1437210768892"}
I, [2015-07-18T09:12:49.192348 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:12:49.193752 #2251]  INFO -- : Completed 200 OK in 316ms (Views: 315.7ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:12:49.300834 #2251]  INFO -- : Started GET "/sales?group_btn=A&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-18 09:12:49 +0000
I, [2015-07-18T09:12:49.409644 #2251]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-18T09:12:49.410191 #2251]  INFO -- :   Parameters: {"group_btn"=>"A", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-18T09:12:49.412227 #2251] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-18T09:12:49.414624 #2251] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=A&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"A\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-18 09:12:49.412585"], ["updated_at", "2015-07-18 09:12:49.412585"]]
D, [2015-07-18T09:12:49.418077 #2251] DEBUG -- :   [1m[35m (2.5ms)[0m  COMMIT
D, [2015-07-18T09:12:49.418950 #2251] DEBUG -- : A
D, [2015-07-18T09:12:49.445524 #2251] DEBUG -- :   [1m[36mPlan Load (26.1ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' and usplrepr.group = 'A' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-18T09:12:49.448059 #2251] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-18T09:12:49.621441 #2251]  INFO -- :   Rendered sales/index.html.erb within layouts/application (88.7ms)
I, [2015-07-18T09:12:49.623138 #2251]  INFO -- : Completed 200 OK in 212ms (Views: 174.1ms | ActiveRecord: 29.5ms)
I, [2015-07-18T09:12:51.455235 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1437210771682" for 192.168.33.1 at 2015-07-18 09:12:51 +0000
I, [2015-07-18T09:12:51.565715 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:12:51.566264 #2251]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1437210771682"}
I, [2015-07-18T09:12:51.880819 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:12:51.882373 #2251]  INFO -- : Completed 200 OK in 315ms (Views: 314.8ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:12:54.606041 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437210771683" for 192.168.33.1 at 2015-07-18 09:12:54 +0000
I, [2015-07-18T09:12:54.723525 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:12:54.724025 #2251]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437210771683"}
I, [2015-07-18T09:12:55.037036 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-18T09:12:55.038201 #2251]  INFO -- : Completed 200 OK in 314ms (Views: 312.5ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:12:55.403049 #2251]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-18 09:12:55 +0000
I, [2015-07-18T09:12:55.523975 #2251]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-18T09:12:55.525560 #2251]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"j8XB4prsakZlHWkrj+d6ZFPKgTmpPGXTVo54q9CVmtIEwkLKLgN9PRCrEgjaIhMLfKDkKLe5//JaXH9v73k0WQ==", "radios_bar"=>"chart_3s", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良", "fseries1"=>"10,6", "fseries2"=>"8,5", "fseries3"=>"7,4", "fseries_pl_newcar"=>"8,6", "fseries_newcar"=>"15,3", "fseries_percentage_newcar"=>"187.5,50.0", "fseries_registration"=>"6,0", "fseries_percentage_registration"=>"75.0,0.0", "fseries_pl_usedcar"=>"7,4", "fseries_usedcar"=>"1,2", "fseries_percentage_usedcar"=>"14.3,50.0", "fseries_pl_onemonth"=>"8,3", "fseries_onemonth"=>"15,15", "fseries_pl_sixmonth"=>"6,5", "fseries_sixmonth"=>"14,14", "fseries_pl_years"=>"7,4", "fseries_years"=>"13,14", "fseries_years_not"=>"0,1", "fseries_percentage_all_years"=>"185.7,300.0", "fseries_pl_inspection"=>"8,6", "fseries_inspection"=>"12,10", "fseries_inspection_not"=>"11,0", "fseries_percentage_all_inspection"=>"121.1,166.7", "fseries_insurance_new"=>"0,0", "fseries_pl_insurance"=>"9,7", "fseries_insurance_renew"=>"15,12", "fseries_percentage_insurance_renew"=>"166.7,171.4", "fseries_number_of_newcar"=>"17,19", "fseries_sales_of_newcar"=>"45000000,52500000", "fseries_profit_of_newcar"=>"9050000,9350000", "fseries_number_of_usedcar"=>"8,5", "fseries_sales_of_usedcar"=>"2360000,3450000", "fseries_profit_of_usedcar"=>"250000,300000", "fseries_number_of_service"=>"3,15", "fseries_sales_of_service"=>"150000,1345000", "fseries_profit_of_service"=>"50000,450000", "fseries_sales_of_all"=>"47510,57295", "fseries_profit_of_all"=>"9350,10100", "fseries_percentage_profit_of_all"=>"19.7,17.6"}
D, [2015-07-18T09:12:55.528079 #2251] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-18T09:12:55.530851 #2251] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"j8XB4prsakZlHWkrj+d6ZFPKgTmpPGXTVo54q9CVmtIEwkLKLgN9PRCrEgjaIhMLfKDkKLe5//JaXH9v73k0WQ==\", \"radios_bar\"=>\"chart_3s\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良\", \"fseries1\"=>\"10,6\", \"fseries2\"=>\"8,5\", \"fseries3\"=>\"7,4\", \"fseries_pl_newcar\"=>\"8,6\", \"fseries_newcar\"=>\"15,3\", \"fseries_percentage_newcar\"=>\"187.5,50.0\", \"fseries_registration\"=>\"6,0\", \"fseries_percentage_registration\"=>\"75.0,0.0\", \"fseries_pl_usedcar\"=>\"7,4\", \"fseries_usedcar\"=>\"1,2\", \"fseries_percentage_usedcar\"=>\"14.3,50.0\", \"fseries_pl_onemonth\"=>\"8,3\", \"fseries_onemonth\"=>\"15,15\", \"fseries_pl_sixmonth\"=>\"6,5\", \"fseries_sixmonth\"=>\"14,14\", \"fseries_pl_years\"=>\"7,4\", \"fseries_years\"=>\"13,14\", \"fseries_years_not\"=>\"0,1\", \"fseries_percentage_all_years\"=>\"185.7,300.0\", \"fseries_pl_inspection\"=>\"8,6\", \"fseries_inspection\"=>\"12,10\", \"fseries_inspection_not\"=>\"11,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7\", \"fseries_insurance_new\"=>\"0,0\", \"fseries_pl_insurance\"=>\"9,7\", \"fseries_insurance_renew\"=>\"15,12\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4\", \"fseries_number_of_newcar\"=>\"17,19\", \"fseries_sales_of_newcar\"=>\"45000000,52500000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000\", \"fseries_number_of_usedcar\"=>\"8,5\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000\", \"fseries_profit_of_usedcar\"=>\"250000,300000\", \"fseries_number_of_service\"=>\"3,15\", \"fseries_sales_of_service\"=>\"150000,1345000\", \"fseries_profit_of_service\"=>\"50000,450000\", \"fseries_sales_of_all\"=>\"47510,57295\", \"fseries_profit_of_all\"=>\"9350,10100\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-18 09:12:55.528859"], ["updated_at", "2015-07-18 09:12:55.528859"]]
D, [2015-07-18T09:12:55.533182 #2251] DEBUG -- :   [1m[36m (1.1ms)[0m  [1mCOMMIT[0m
I, [2015-07-18T09:12:55.615171 #2251]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (3.1ms)
I, [2015-07-18T09:12:55.618111 #2251]  INFO -- : Completed 200 OK in 92ms (Views: 83.5ms | ActiveRecord: 1.6ms)
I, [2015-07-18T09:12:59.737954 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437210771684" for 192.168.33.1 at 2015-07-18 09:12:59 +0000
I, [2015-07-18T09:12:59.846108 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:12:59.846627 #2251]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437210771684"}
I, [2015-07-18T09:13:00.160695 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:13:00.162055 #2251]  INFO -- : Completed 200 OK in 315ms (Views: 314.1ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:13:00.294437 #2251]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-18 09:13:00 +0000
I, [2015-07-18T09:13:00.402102 #2251]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-18T09:13:00.402740 #2251]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"j8XB4prsakZlHWkrj+d6ZFPKgTmpPGXTVo54q9CVmtIEwkLKLgN9PRCrEgjaIhMLfKDkKLe5//JaXH9v73k0WQ==", "radios_bar"=>"chart_3s", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良", "fseries1"=>"10,6", "fseries2"=>"8,5", "fseries3"=>"7,4", "fseries_pl_newcar"=>"8,6", "fseries_newcar"=>"15,3", "fseries_percentage_newcar"=>"187.5,50.0", "fseries_registration"=>"6,0", "fseries_percentage_registration"=>"75.0,0.0", "fseries_pl_usedcar"=>"7,4", "fseries_usedcar"=>"1,2", "fseries_percentage_usedcar"=>"14.3,50.0", "fseries_pl_onemonth"=>"8,3", "fseries_onemonth"=>"15,15", "fseries_pl_sixmonth"=>"6,5", "fseries_sixmonth"=>"14,14", "fseries_pl_years"=>"7,4", "fseries_years"=>"13,14", "fseries_years_not"=>"0,1", "fseries_percentage_all_years"=>"185.7,300.0", "fseries_pl_inspection"=>"8,6", "fseries_inspection"=>"12,10", "fseries_inspection_not"=>"11,0", "fseries_percentage_all_inspection"=>"121.1,166.7", "fseries_insurance_new"=>"0,0", "fseries_pl_insurance"=>"9,7", "fseries_insurance_renew"=>"15,12", "fseries_percentage_insurance_renew"=>"166.7,171.4", "fseries_number_of_newcar"=>"17,19", "fseries_sales_of_newcar"=>"45000000,52500000", "fseries_profit_of_newcar"=>"9050000,9350000", "fseries_number_of_usedcar"=>"8,5", "fseries_sales_of_usedcar"=>"2360000,3450000", "fseries_profit_of_usedcar"=>"250000,300000", "fseries_number_of_service"=>"3,15", "fseries_sales_of_service"=>"150000,1345000", "fseries_profit_of_service"=>"50000,450000", "fseries_sales_of_all"=>"47510,57295", "fseries_profit_of_all"=>"9350,10100", "fseries_percentage_profit_of_all"=>"19.7,17.6"}
D, [2015-07-18T09:13:00.407235 #2251] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-18T09:13:00.411282 #2251] DEBUG -- :   [1m[36mSQL (2.1ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"j8XB4prsakZlHWkrj+d6ZFPKgTmpPGXTVo54q9CVmtIEwkLKLgN9PRCrEgjaIhMLfKDkKLe5//JaXH9v73k0WQ==\", \"radios_bar\"=>\"chart_3s\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良\", \"fseries1\"=>\"10,6\", \"fseries2\"=>\"8,5\", \"fseries3\"=>\"7,4\", \"fseries_pl_newcar\"=>\"8,6\", \"fseries_newcar\"=>\"15,3\", \"fseries_percentage_newcar\"=>\"187.5,50.0\", \"fseries_registration\"=>\"6,0\", \"fseries_percentage_registration\"=>\"75.0,0.0\", \"fseries_pl_usedcar\"=>\"7,4\", \"fseries_usedcar\"=>\"1,2\", \"fseries_percentage_usedcar\"=>\"14.3,50.0\", \"fseries_pl_onemonth\"=>\"8,3\", \"fseries_onemonth\"=>\"15,15\", \"fseries_pl_sixmonth\"=>\"6,5\", \"fseries_sixmonth\"=>\"14,14\", \"fseries_pl_years\"=>\"7,4\", \"fseries_years\"=>\"13,14\", \"fseries_years_not\"=>\"0,1\", \"fseries_percentage_all_years\"=>\"185.7,300.0\", \"fseries_pl_inspection\"=>\"8,6\", \"fseries_inspection\"=>\"12,10\", \"fseries_inspection_not\"=>\"11,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7\", \"fseries_insurance_new\"=>\"0,0\", \"fseries_pl_insurance\"=>\"9,7\", \"fseries_insurance_renew\"=>\"15,12\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4\", \"fseries_number_of_newcar\"=>\"17,19\", \"fseries_sales_of_newcar\"=>\"45000000,52500000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000\", \"fseries_number_of_usedcar\"=>\"8,5\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000\", \"fseries_profit_of_usedcar\"=>\"250000,300000\", \"fseries_number_of_service\"=>\"3,15\", \"fseries_sales_of_service\"=>\"150000,1345000\", \"fseries_profit_of_service\"=>\"50000,450000\", \"fseries_sales_of_all\"=>\"47510,57295\", \"fseries_profit_of_all\"=>\"9350,10100\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-18 09:13:00.407793"], ["updated_at", "2015-07-18 09:13:00.407793"]]
D, [2015-07-18T09:13:00.414245 #2251] DEBUG -- :   [1m[35m (1.1ms)[0m  COMMIT
I, [2015-07-18T09:13:00.479403 #2251]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (1.1ms)
I, [2015-07-18T09:13:00.482827 #2251]  INFO -- : Completed 200 OK in 79ms (Views: 67.0ms | ActiveRecord: 3.3ms)
I, [2015-07-18T09:13:04.326101 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437210771685" for 192.168.33.1 at 2015-07-18 09:13:04 +0000
I, [2015-07-18T09:13:04.436440 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:13:04.436978 #2251]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437210771685"}
I, [2015-07-18T09:13:04.772496 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-18T09:13:04.774419 #2251]  INFO -- : Completed 200 OK in 337ms (Views: 336.4ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:13:04.942400 #2251]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-18 09:13:04 +0000
I, [2015-07-18T09:13:05.065133 #2251]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-18T09:13:05.065870 #2251]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"j8XB4prsakZlHWkrj+d6ZFPKgTmpPGXTVo54q9CVmtIEwkLKLgN9PRCrEgjaIhMLfKDkKLe5//JaXH9v73k0WQ==", "radios_bar"=>"chart_newcar", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良", "fseries1"=>"10,6", "fseries2"=>"8,5", "fseries3"=>"7,4", "fseries_pl_newcar"=>"8,6", "fseries_newcar"=>"15,3", "fseries_percentage_newcar"=>"187.5,50.0", "fseries_registration"=>"6,0", "fseries_percentage_registration"=>"75.0,0.0", "fseries_pl_usedcar"=>"7,4", "fseries_usedcar"=>"1,2", "fseries_percentage_usedcar"=>"14.3,50.0", "fseries_pl_onemonth"=>"8,3", "fseries_onemonth"=>"15,15", "fseries_pl_sixmonth"=>"6,5", "fseries_sixmonth"=>"14,14", "fseries_pl_years"=>"7,4", "fseries_years"=>"13,14", "fseries_years_not"=>"0,1", "fseries_percentage_all_years"=>"185.7,300.0", "fseries_pl_inspection"=>"8,6", "fseries_inspection"=>"12,10", "fseries_inspection_not"=>"11,0", "fseries_percentage_all_inspection"=>"121.1,166.7", "fseries_insurance_new"=>"0,0", "fseries_pl_insurance"=>"9,7", "fseries_insurance_renew"=>"15,12", "fseries_percentage_insurance_renew"=>"166.7,171.4", "fseries_number_of_newcar"=>"17,19", "fseries_sales_of_newcar"=>"45000000,52500000", "fseries_profit_of_newcar"=>"9050000,9350000", "fseries_number_of_usedcar"=>"8,5", "fseries_sales_of_usedcar"=>"2360000,3450000", "fseries_profit_of_usedcar"=>"250000,300000", "fseries_number_of_service"=>"3,15", "fseries_sales_of_service"=>"150000,1345000", "fseries_profit_of_service"=>"50000,450000", "fseries_sales_of_all"=>"47510,57295", "fseries_profit_of_all"=>"9350,10100", "fseries_percentage_profit_of_all"=>"19.7,17.6"}
D, [2015-07-18T09:13:05.069571 #2251] DEBUG -- :   [1m[36m (0.4ms)[0m  [1mBEGIN[0m
D, [2015-07-18T09:13:05.073114 #2251] DEBUG -- :   [1m[35mSQL (0.4ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"j8XB4prsakZlHWkrj+d6ZFPKgTmpPGXTVo54q9CVmtIEwkLKLgN9PRCrEgjaIhMLfKDkKLe5//JaXH9v73k0WQ==\", \"radios_bar\"=>\"chart_newcar\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良\", \"fseries1\"=>\"10,6\", \"fseries2\"=>\"8,5\", \"fseries3\"=>\"7,4\", \"fseries_pl_newcar\"=>\"8,6\", \"fseries_newcar\"=>\"15,3\", \"fseries_percentage_newcar\"=>\"187.5,50.0\", \"fseries_registration\"=>\"6,0\", \"fseries_percentage_registration\"=>\"75.0,0.0\", \"fseries_pl_usedcar\"=>\"7,4\", \"fseries_usedcar\"=>\"1,2\", \"fseries_percentage_usedcar\"=>\"14.3,50.0\", \"fseries_pl_onemonth\"=>\"8,3\", \"fseries_onemonth\"=>\"15,15\", \"fseries_pl_sixmonth\"=>\"6,5\", \"fseries_sixmonth\"=>\"14,14\", \"fseries_pl_years\"=>\"7,4\", \"fseries_years\"=>\"13,14\", \"fseries_years_not\"=>\"0,1\", \"fseries_percentage_all_years\"=>\"185.7,300.0\", \"fseries_pl_inspection\"=>\"8,6\", \"fseries_inspection\"=>\"12,10\", \"fseries_inspection_not\"=>\"11,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7\", \"fseries_insurance_new\"=>\"0,0\", \"fseries_pl_insurance\"=>\"9,7\", \"fseries_insurance_renew\"=>\"15,12\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4\", \"fseries_number_of_newcar\"=>\"17,19\", \"fseries_sales_of_newcar\"=>\"45000000,52500000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000\", \"fseries_number_of_usedcar\"=>\"8,5\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000\", \"fseries_profit_of_usedcar\"=>\"250000,300000\", \"fseries_number_of_service\"=>\"3,15\", \"fseries_sales_of_service\"=>\"150000,1345000\", \"fseries_profit_of_service\"=>\"50000,450000\", \"fseries_sales_of_all\"=>\"47510,57295\", \"fseries_profit_of_all\"=>\"9350,10100\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-18 09:13:05.070435"], ["updated_at", "2015-07-18 09:13:05.070435"]]
D, [2015-07-18T09:13:05.078993 #2251] DEBUG -- :   [1m[36m (4.5ms)[0m  [1mCOMMIT[0m
I, [2015-07-18T09:13:05.150722 #2251]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (3.6ms)
I, [2015-07-18T09:13:05.152518 #2251]  INFO -- : Completed 200 OK in 85ms (Views: 72.2ms | ActiveRecord: 5.3ms)
I, [2015-07-18T09:13:12.948791 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437210771686" for 192.168.33.1 at 2015-07-18 09:13:12 +0000
I, [2015-07-18T09:13:13.062150 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:13:13.062664 #2251]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437210771686"}
I, [2015-07-18T09:13:13.376750 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:13:13.378097 #2251]  INFO -- : Completed 200 OK in 315ms (Views: 314.2ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:16:51.530781 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=+A%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97&_=1437210771687" for 192.168.33.1 at 2015-07-18 09:16:51 +0000
I, [2015-07-18T09:16:51.629319 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:16:51.629716 #2251]  INFO -- :   Parameters: {"action_name"=>" Aグループ", "_"=>"1437210771687"}
I, [2015-07-18T09:16:51.911079 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-18T09:16:51.912099 #2251]  INFO -- : Completed 200 OK in 282ms (Views: 281.5ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:16:51.935423 #2251]  INFO -- : Started GET "/sales?group_btn=&sale_ym_from=201503&sale_ym_to=201503" for 192.168.33.1 at 2015-07-18 09:16:51 +0000
I, [2015-07-18T09:16:52.023869 #2251]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-18T09:16:52.024312 #2251]  INFO -- :   Parameters: {"group_btn"=>"", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503"}
D, [2015-07-18T09:16:52.026302 #2251] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-18T09:16:52.027997 #2251] DEBUG -- :   [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?group_btn=&sale_ym_from=201503&sale_ym_to=201503"], ["action", " Aグループ"], ["parameters", "{\"group_btn\"=>\"\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-18 09:16:52.026792"], ["updated_at", "2015-07-18 09:16:52.026792"]]
D, [2015-07-18T09:16:52.031184 #2251] DEBUG -- :   [1m[35m (2.0ms)[0m  COMMIT
D, [2015-07-18T09:16:52.031921 #2251] DEBUG -- : 
D, [2015-07-18T09:16:52.036974 #2251] DEBUG -- :   [1m[36mPlan Load (4.3ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-18T09:16:52.040709 #2251] DEBUG -- :   [1m[35m (0.6ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')
I, [2015-07-18T09:16:52.467748 #2251]  INFO -- :   Rendered sales/index.html.erb within layouts/application (356.6ms)
I, [2015-07-18T09:16:52.470014 #2251]  INFO -- : Completed 200 OK in 445ms (Views: 428.4ms | ActiveRecord: 7.5ms)
I, [2015-07-18T09:16:55.806623 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E6%8E%A8%E7%A7%BB&_=1437211014427" for 192.168.33.1 at 2015-07-18 09:16:55 +0000
I, [2015-07-18T09:16:55.917434 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:16:55.917881 #2251]  INFO -- :   Parameters: {"action_name"=>"営業活動推移", "_"=>"1437211014427"}
I, [2015-07-18T09:16:56.225639 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:16:56.226941 #2251]  INFO -- : Completed 200 OK in 308ms (Views: 307.9ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:16:56.256496 #2251]  INFO -- : Started GET "/trends" for 192.168.33.1 at 2015-07-18 09:16:56 +0000
I, [2015-07-18T09:16:56.367895 #2251]  INFO -- : Processing by TrendsController#index as HTML
D, [2015-07-18T09:16:56.370557 #2251] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-18T09:16:56.373526 #2251] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/trends"], ["action", "営業活動推移"], ["parameters", "{\"controller\"=>\"trends\", \"action\"=>\"index\"}"], ["created_at", "2015-07-18 09:16:56.372011"], ["updated_at", "2015-07-18 09:16:56.372011"]]
D, [2015-07-18T09:16:56.375718 #2251] DEBUG -- :   [1m[36m (1.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-18T09:16:56.381007 #2251] DEBUG -- :   [1m[35mPlan Load (4.1ms)[0m  
      select
        usplre.uid as user_id, usplre.user_name, usplre.plan_ym, usplre.customer, usplre.pl_registration_possible, usplre.registration_plan, usplre.display_order, sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive, sum(pl_newcar) as pl_newcar, 
        sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, sum(wholesale) as wholesale, sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(registration_plan_update) as registration_plan_update, sum(registration_possible) as registration_possible, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel
       from 
      ((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.role, us.display_order, us.delete_flag,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as customer, pl.newcar as pl_newcar, pl.registration_possible as pl_registration_possible, pl.registration_plan as registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, sum(registration_plan_update) as registration_plan_update, sum(registration_possible) as registration_possible, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplre.uid = ins.user_id and usplre.plan_ym = ins.inspection_ym
       where usplre.plan_ym >='201502' and usplre.plan_ym <= '201507'
       group by usplre.uid, usplre.user_name, usplre.plan_ym, usplre.customer, usplre.pl_registration_possible, usplre.registration_plan, usplre.display_order order by usplre.display_order, usplre.uid, usplre.plan_ym
      
I, [2015-07-18T09:16:56.663941 #2251]  INFO -- :   Rendered trends/index.html.erb within layouts/application (183.3ms)
I, [2015-07-18T09:16:56.665829 #2251]  INFO -- : Completed 200 OK in 297ms (Views: 281.1ms | ActiveRecord: 5.7ms)
I, [2015-07-18T09:17:01.575706 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%E6%96%B0%E8%BB%8A%E5%8F%97%E6%B3%A8%E5%8F%B0%E6%95%B0&_=1437211018642" for 192.168.33.1 at 2015-07-18 09:17:01 +0000
I, [2015-07-18T09:17:01.672352 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:17:01.672763 #2251]  INFO -- :   Parameters: {"action_name"=>"新車受注台数", "_"=>"1437211018642"}
I, [2015-07-18T09:17:01.958120 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:17:01.959206 #2251]  INFO -- : Completed 200 OK in 286ms (Views: 285.2ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:17:03.515500 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A%09%09%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1437211018643" for 192.168.33.1 at 2015-07-18 09:17:03 +0000
I, [2015-07-18T09:17:03.618531 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:17:03.619589 #2251]  INFO -- :   Parameters: {"action_name"=>"\n\t\tグラフ\n\t", "_"=>"1437211018643"}
I, [2015-07-18T09:17:03.881893 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-18T09:17:03.882846 #2251]  INFO -- : Completed 200 OK in 263ms (Views: 262.2ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:17:10.649855 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437211018644" for 192.168.33.1 at 2015-07-18 09:17:10 +0000
I, [2015-07-18T09:17:10.736507 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:17:10.736990 #2251]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437211018644"}
I, [2015-07-18T09:17:10.990686 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-18T09:17:10.991806 #2251]  INFO -- : Completed 200 OK in 254ms (Views: 253.8ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:17:11.279528 #2251]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-18 09:17:11 +0000
I, [2015-07-18T09:17:11.366041 #2251]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-18T09:17:11.366760 #2251]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"Ehy5zErE9Aj7VlzzfFoj8tdtglbTEISvw3QVZ2md87SZGzrk/ivjc47gJ9Apn0qd+AfnR82VHo7PphKjVnFdPw==", "radios_line"=>"percentage_newcar", "chart_cat"=>"line", "commit"=>"OK", "check"=>"on", "check_on_customer"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true", "no14"=>"true", "no15"=>"true"}, "check_on_percentage_newcar"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true", "no14"=>"true", "no15"=>"true"}, "check_on_percentage_registration"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true", "no14"=>"true", "no15"=>"true"}, "check_on_percentage_usedcar"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true", "no14"=>"true", "no15"=>"true"}, "check_on_percentage_years"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true", "no14"=>"true", "no15"=>"true"}, "check_on_percentage_inspection"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true", "no14"=>"true", "no15"=>"true"}, "check_on_percentage_insurance_renew"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true", "no14"=>"true", "no15"=>"true"}, "subtitle"=>"2015/02～2015/07", "categories"=>"201502,201503,201504,201505,201506,201507,201502,201503,201504,201505,201506,201507,201502,201503,201504,201505,201506,201507,201502,201503,201504,201505,201506,201507,201502,201503,201504,201505,201506,201507,201502,201503,201504,201505,201506,201507", "xaxis"=>"池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平,池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平,池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平,池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平,池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平,池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries_customer_all"=>"29,30,25,25,0,0#24,25,20,20,0,0#26,27,20,0,0,0#0,0,100,0,0,0#19,19,21,0,0,0#23,25,20,0,0,0#9,13,10,0,0,0#5,5,10,0,0,0#5,8,10,0,0,0#0,0,10,0,0,0#8,7,7,0,0,0#14,12,0,0,0,0#18,20,0,0,0,0#13,13,0,0,0,0#7,6,0,0,0,0#8,6,0,0,0,0", "fseries_percentage_newcar_all"=>"9,15,10,7,0,0#7,3,0,0,0,0#9,3,0,0,0,0#0,0,0,0,0,0#10,10,3,0,0,0#6,6,0,0,0,0#13,2,0,0,0,0#3,1,0,0,0,0#5,8,0,0,0,0#0,0,0,0,0,0#6,5,0,0,0,0#7,3,0,0,0,0#7,2,0,0,0,0#3,1,0,0,0,0#6,3,0,0,0,0#4,66,0,0,0,0", "fseries_percentage_registration_all"=>"7,6,1,4,0,0#5,0,,0,0,0#10,1,,0,0,0#0,0,,0,0,0#7,4,1,0,0,0#5,1,,0,0,0#8,1,,0,0,0#3,1,,0,0,0#4,5,,0,0,0#0,0,,0,0,0#3,5,,0,0,0#6,0,0,0,0,0#7,0,0,0,0,0#0,0,0,0,0,0#3,1,0,0,0,0#4,25,0,0,0,0", "fseries_percentage_usedcar_all"=>"4,1,0,1,0,0#2,2,,1,0,0#10,2,,0,0,0#0,0,,0,0,0#2,1,1,0,0,0#5,1,,0,0,0#5,1,,0,0,0#1,0,,0,0,0#0,4,,0,0,0#0,0,,0,0,0#5,2,,0,0,0#4,0,0,0,0,0#5,1,0,0,0,0#2,0,0,0,0,0#0,1,0,0,0,0#1,24,0,0,0,0", "fseries_percentage_years_all"=>"60.0,185.7,96.4,0.0,0,0#113.3,300.0,240.0,0.0,0,0#100.0,111.1,222.2,0,0,0#0,0,0.0,0,0,0#171.4,91.7,92.9,0,0,0#266.7,60.0,157.1,0,0,0#150.0,142.9,316.7,0,0,0#266.7,240.0,109.1,0,0,0#233.3,87.5,109.1,0,0,0#0,0,0.0,0,0,0#350.0,160.0,155.6,0,0,0#366.7,128.6,0,0,0,0#225.0,150.0,0,0,0,0#100.0,87.5,0,0,0,0#233.3,200.0,0,0,0,0#300.0,225.0,0,0,0,0", "fseries_percentage_inspection_all"=>"82.4,121.1,96.9,0.0,0,0#150.0,166.7,350.0,0.0,0,0#150.0,122.2,375.0,0,0,0#0,0,0.0,0,0,0#100.0,100.0,69.2,0,0,0#125.0,75.0,181.8,0,0,0#120.0,133.3,271.4,0,0,0#200.0,25.0,58.3,0,0,0#250.0,55.6,75.0,0,0,0#0,0,0.0,0,0,0#400.0,225.0,250.0,0,0,0#175.0,200.0,0,0,0,0#350.0,142.9,0,0,0,0#150.0,60.0,0,0,0,0#125.0,128.6,0,0,0,0#300.0,150.0,0,0,0,0", "fseries_percentage_insurance_renew_all"=>"1,0,17,,0,0#0,0,5,,0,0#0,0,1,0,0,0#0,0,,0,0,0#0,9,3,0,0,0#0,0,10,0,0,0#0,1,0,0,0,0#0,0,0,0,0,0#0,0,10,0,0,0#0,0,,0,0,0#0,0,1,0,0,0#0,0,0,0,0,0#0,0,0,0,0,0#1,0,0,0,0,0#0,0,0,0,0,0#0,0,0,0,0,0"}
D, [2015-07-18T09:17:11.369284 #2251] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-18T09:17:11.371551 #2251] DEBUG -- :   [1m[35mSQL (0.5ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"Ehy5zErE9Aj7VlzzfFoj8tdtglbTEISvw3QVZ2md87SZGzrk/ivjc47gJ9Apn0qd+AfnR82VHo7PphKjVnFdPw==\", \"radios_line\"=>\"percentage_newcar\", \"chart_cat\"=>\"line\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on_customer\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\", \"no14\"=>\"true\", \"no15\"=>\"true\"}, \"check_on_percentage_newcar\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\", \"no14\"=>\"true\", \"no15\"=>\"true\"}, \"check_on_percentage_registration\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\", \"no14\"=>\"true\", \"no15\"=>\"true\"}, \"check_on_percentage_usedcar\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\", \"no14\"=>\"true\", \"no15\"=>\"true\"}, \"check_on_percentage_years\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\", \"no14\"=>\"true\", \"no15\"=>\"true\"}, \"check_on_percentage_inspection\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\", \"no14\"=>\"true\", \"no15\"=>\"true\"}, \"check_on_percentage_insurance_renew\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\", \"no14\"=>\"true\", \"no15\"=>\"true\"}, \"subtitle\"=>\"2015/02～2015/07\", \"categories\"=>\"201502,201503,201504,201505,201506,201507,201502,201503,201504,201505,201506,201507,201502,201503,201504,201505,201506,201507,201502,201503,201504,201505,201506,201507,201502,201503,201504,201505,201506,201507,201502,201503,201504,201505,201506,201507\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平,池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平,池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平,池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平,池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平,池本謙三,川上和良,田部和幸,溝口謙二,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大櫃梨衣,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries_customer_all\"=>\"29,30,25,25,0,0#24,25,20,20,0,0#26,27,20,0,0,0#0,0,100,0,0,0#19,19,21,0,0,0#23,25,20,0,0,0#9,13,10,0,0,0#5,5,10,0,0,0#5,8,10,0,0,0#0,0,10,0,0,0#8,7,7,0,0,0#14,12,0,0,0,0#18,20,0,0,0,0#13,13,0,0,0,0#7,6,0,0,0,0#8,6,0,0,0,0\", \"fseries_percentage_newcar_all\"=>\"9,15,10,7,0,0#7,3,0,0,0,0#9,3,0,0,0,0#0,0,0,0,0,0#10,10,3,0,0,0#6,6,0,0,0,0#13,2,0,0,0,0#3,1,0,0,0,0#5,8,0,0,0,0#0,0,0,0,0,0#6,5,0,0,0,0#7,3,0,0,0,0#7,2,0,0,0,0#3,1,0,0,0,0#6,3,0,0,0,0#4,66,0,0,0,0\", \"fseries_percentage_registration_all\"=>\"7,6,1,4,0,0#5,0,,0,0,0#10,1,,0,0,0#0,0,,0,0,0#7,4,1,0,0,0#5,1,,0,0,0#8,1,,0,0,0#3,1,,0,0,0#4,5,,0,0,0#0,0,,0,0,0#3,5,,0,0,0#6,0,0,0,0,0#7,0,0,0,0,0#0,0,0,0,0,0#3,1,0,0,0,0#4,25,0,0,0,0\", \"fseries_percentage_usedcar_all\"=>\"4,1,0,1,0,0#2,2,,1,0,0#10,2,,0,0,0#0,0,,0,0,0#2,1,1,0,0,0#5,1,,0,0,0#5,1,,0,0,0#1,0,,0,0,0#0,4,,0,0,0#0,0,,0,0,0#5,2,,0,0,0#4,0,0,0,0,0#5,1,0,0,0,0#2,0,0,0,0,0#0,1,0,0,0,0#1,24,0,0,0,0\", \"fseries_percentage_years_all\"=>\"60.0,185.7,96.4,0.0,0,0#113.3,300.0,240.0,0.0,0,0#100.0,111.1,222.2,0,0,0#0,0,0.0,0,0,0#171.4,91.7,92.9,0,0,0#266.7,60.0,157.1,0,0,0#150.0,142.9,316.7,0,0,0#266.7,240.0,109.1,0,0,0#233.3,87.5,109.1,0,0,0#0,0,0.0,0,0,0#350.0,160.0,155.6,0,0,0#366.7,128.6,0,0,0,0#225.0,150.0,0,0,0,0#100.0,87.5,0,0,0,0#233.3,200.0,0,0,0,0#300.0,225.0,0,0,0,0\", \"fseries_percentage_inspection_all\"=>\"82.4,121.1,96.9,0.0,0,0#150.0,166.7,350.0,0.0,0,0#150.0,122.2,375.0,0,0,0#0,0,0.0,0,0,0#100.0,100.0,69.2,0,0,0#125.0,75.0,181.8,0,0,0#120.0,133.3,271.4,0,0,0#200.0,25.0,58.3,0,0,0#250.0,55.6,75.0,0,0,0#0,0,0.0,0,0,0#400.0,225.0,250.0,0,0,0#175.0,200.0,0,0,0,0#350.0,142.9,0,0,0,0#150.0,60.0,0,0,0,0#125.0,128.6,0,0,0,0#300.0,150.0,0,0,0,0\", \"fseries_percentage_insurance_renew_all\"=>\"1,0,17,,0,0#0,0,5,,0,0#0,0,1,0,0,0#0,0,,0,0,0#0,9,3,0,0,0#0,0,10,0,0,0#0,1,0,0,0,0#0,0,0,0,0,0#0,0,10,0,0,0#0,0,,0,0,0#0,0,1,0,0,0#0,0,0,0,0,0#0,0,0,0,0,0#1,0,0,0,0,0#0,0,0,0,0,0#0,0,0,0,0,0\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-18 09:17:11.369844"], ["updated_at", "2015-07-18 09:17:11.369844"]]
D, [2015-07-18T09:17:11.375618 #2251] DEBUG -- :   [1m[36m (2.9ms)[0m  [1mCOMMIT[0m
I, [2015-07-18T09:17:11.427765 #2251]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (3.9ms)
I, [2015-07-18T09:17:11.429037 #2251]  INFO -- : Completed 200 OK in 62ms (Views: 52.0ms | ActiveRecord: 3.6ms)
I, [2015-07-18T09:17:44.929058 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437211033354" for 192.168.33.1 at 2015-07-18 09:17:44 +0000
I, [2015-07-18T09:17:45.037849 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:17:45.038328 #2251]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437211033354"}
I, [2015-07-18T09:17:45.302928 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:17:45.303852 #2251]  INFO -- : Completed 200 OK in 265ms (Views: 264.0ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:17:47.518723 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437211018645" for 192.168.33.1 at 2015-07-18 09:17:47 +0000
I, [2015-07-18T09:17:47.619219 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:17:47.619742 #2251]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437211018645"}
I, [2015-07-18T09:17:47.884842 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-18T09:17:47.885788 #2251]  INFO -- : Completed 200 OK in 266ms (Views: 264.9ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:17:50.534807 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%AE%A1%E7%90%86%E8%80%85&_=1437211018646" for 192.168.33.1 at 2015-07-18 09:17:50 +0000
I, [2015-07-18T09:17:50.631859 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:17:50.632307 #2251]  INFO -- :   Parameters: {"action_name"=>"システム管理者", "_"=>"1437211018646"}
I, [2015-07-18T09:17:50.895626 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-18T09:17:50.896786 #2251]  INFO -- : Completed 200 OK in 264ms (Views: 263.4ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:32:04.147821 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%E5%96%B6%E6%A5%AD%E6%B4%BB%E5%8B%95%E5%AE%9F%E7%B8%BE&_=1437211018647" for 192.168.33.1 at 2015-07-18 09:32:04 +0000
I, [2015-07-18T09:32:04.244042 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:32:04.244487 #2251]  INFO -- :   Parameters: {"action_name"=>"営業活動実績", "_"=>"1437211018647"}
I, [2015-07-18T09:32:04.508068 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-18T09:32:04.509046 #2251]  INFO -- : Completed 200 OK in 264ms (Views: 263.8ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:32:04.532337 #2251]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-18 09:32:04 +0000
I, [2015-07-18T09:32:04.639000 #2251]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-18T09:32:04.641878 #2251] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-18T09:32:04.643647 #2251] DEBUG -- :   [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-18 09:32:04.642330"], ["updated_at", "2015-07-18 09:32:04.642330"]]
D, [2015-07-18T09:32:04.646421 #2251] DEBUG -- :   [1m[35m (1.7ms)[0m  COMMIT
D, [2015-07-18T09:32:04.647237 #2251] DEBUG -- : 
D, [2015-07-18T09:32:04.650958 #2251] DEBUG -- :   [1m[36mPlan Load (3.0ms)[0m  [1mselect
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid[0m
D, [2015-07-18T09:32:04.653315 #2251] DEBUG -- :   [1m[35m (0.5ms)[0m  SELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')
I, [2015-07-18T09:32:04.748678 #2251]  INFO -- :   Rendered sales/index.html.erb within layouts/application (22.9ms)
I, [2015-07-18T09:32:04.750531 #2251]  INFO -- : Completed 200 OK in 111ms (Views: 96.5ms | ActiveRecord: 5.6ms)
I, [2015-07-18T09:32:07.850769 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A+++++%0A&_=1437211926256" for 192.168.33.1 at 2015-07-18 09:32:07 +0000
I, [2015-07-18T09:32:07.956141 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:32:07.956594 #2251]  INFO -- :   Parameters: {"action_name"=>"\n     \n", "_"=>"1437211926256"}
I, [2015-07-18T09:32:08.228258 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:32:08.229136 #2251]  INFO -- : Completed 200 OK in 272ms (Views: 271.6ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:32:08.255278 #2251]  INFO -- : Started GET "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button=" for 192.168.33.1 at 2015-07-18 09:32:08 +0000
I, [2015-07-18T09:32:08.344555 #2251]  INFO -- : Processing by SalesController#index as HTML
I, [2015-07-18T09:32:08.344868 #2251]  INFO -- :   Parameters: {"utf8"=>"✓", "sale_ym_from"=>"201503", "sale_ym_to"=>"201503", "button"=>""}
D, [2015-07-18T09:32:08.347568 #2251] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-18T09:32:08.349558 #2251] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales?utf8=%E2%9C%93&sale_ym_from=201503&sale_ym_to=201503&button="], ["action", "\n     \n"], ["parameters", "{\"utf8\"=>\"✓\", \"sale_ym_from\"=>\"201503\", \"sale_ym_to\"=>\"201503\", \"button\"=>\"\", \"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-18 09:32:08.348298"], ["updated_at", "2015-07-18 09:32:08.348298"]]
D, [2015-07-18T09:32:08.353140 #2251] DEBUG -- :   [1m[36m (2.5ms)[0m  [1mCOMMIT[0m
D, [2015-07-18T09:32:08.353988 #2251] DEBUG -- : 
D, [2015-07-18T09:32:08.359126 #2251] DEBUG -- :   [1m[35mPlan Load (4.5ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201503' and usplrepr.plan_ym <= '201503' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-18T09:32:08.362463 #2251] DEBUG -- :   [1m[36m (0.5ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201503' and profit_ym <= '201503')[0m
I, [2015-07-18T09:32:08.775610 #2251]  INFO -- :   Rendered sales/index.html.erb within layouts/application (340.9ms)
I, [2015-07-18T09:32:08.777671 #2251]  INFO -- : Completed 200 OK in 432ms (Views: 414.0ms | ActiveRecord: 8.0ms)
I, [2015-07-18T09:32:09.562010 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%0A++++++++++%E3%82%B0%E3%83%A9%E3%83%95%0A%09&_=1437211930283" for 192.168.33.1 at 2015-07-18 09:32:09 +0000
I, [2015-07-18T09:32:09.657187 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:32:09.657936 #2251]  INFO -- :   Parameters: {"action_name"=>"\n          グラフ\n\t", "_"=>"1437211930283"}
I, [2015-07-18T09:32:09.923372 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:32:09.924695 #2251]  INFO -- : Completed 200 OK in 266ms (Views: 265.6ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:32:12.237607 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437211930284" for 192.168.33.1 at 2015-07-18 09:32:12 +0000
I, [2015-07-18T09:32:12.340861 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:32:12.341289 #2251]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437211930284"}
I, [2015-07-18T09:32:12.602832 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-18T09:32:12.603943 #2251]  INFO -- : Completed 200 OK in 262ms (Views: 261.6ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:32:12.897815 #2251]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-18 09:32:12 +0000
I, [2015-07-18T09:32:12.994129 #2251]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-18T09:32:12.994710 #2251]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"aOX1bA5nSAISkrOyiO/d5ZOOWYxfWEAXq8BpMcFEFcTj4nZEuohfeWckyJHdKrSKvOQ8nUHd2janEm71/qi7Tw==", "radios_bar"=>"chart_newcar", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-18T09:32:12.996447 #2251] DEBUG -- :   [1m[35m (0.1ms)[0m  BEGIN
D, [2015-07-18T09:32:12.999084 #2251] DEBUG -- :   [1m[36mSQL (0.9ms)[0m  [1mINSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"[0m  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"aOX1bA5nSAISkrOyiO/d5ZOOWYxfWEAXq8BpMcFEFcTj4nZEuohfeWckyJHdKrSKvOQ8nUHd2janEm71/qi7Tw==\", \"radios_bar\"=>\"chart_newcar\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-18 09:32:12.997049"], ["updated_at", "2015-07-18 09:32:12.997049"]]
D, [2015-07-18T09:32:13.002543 #2251] DEBUG -- :   [1m[35m (2.5ms)[0m  COMMIT
I, [2015-07-18T09:32:13.060384 #2251]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (2.8ms)
I, [2015-07-18T09:32:13.061675 #2251]  INFO -- : Completed 200 OK in 67ms (Views: 57.7ms | ActiveRecord: 3.6ms)
I, [2015-07-18T09:47:43.876894 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=OK&_=1437211930285" for 192.168.33.1 at 2015-07-18 09:47:43 +0000
I, [2015-07-18T09:47:44.228840 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:47:44.229428 #2251]  INFO -- :   Parameters: {"action_name"=>"OK", "_"=>"1437211930285"}
I, [2015-07-18T09:47:44.493462 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:47:44.494760 #2251]  INFO -- : Completed 200 OK in 265ms (Views: 263.9ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:47:44.626725 #2251]  INFO -- : Started POST "/charts" for 192.168.33.1 at 2015-07-18 09:47:44 +0000
I, [2015-07-18T09:47:44.737755 #2251]  INFO -- : Processing by ChartsController#create as HTML
I, [2015-07-18T09:47:44.738432 #2251]  INFO -- :   Parameters: {"utf8"=>"✓", "authenticity_token"=>"aOX1bA5nSAISkrOyiO/d5ZOOWYxfWEAXq8BpMcFEFcTj4nZEuohfeWckyJHdKrSKvOQ8nUHd2janEm71/qi7Tw==", "radios_bar"=>"chart_newcar", "chart_cat"=>"bar", "commit"=>"OK", "check"=>"on", "check_on"=>{"no0"=>"true", "no1"=>"true", "no2"=>"true", "no3"=>"true", "no4"=>"true", "no5"=>"true", "no6"=>"true", "no7"=>"true", "no8"=>"true", "no9"=>"true", "no10"=>"true", "no11"=>"true", "no12"=>"true", "no13"=>"true"}, "subtitle"=>"2015/03～2015/03", "xaxis"=>"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平", "fseries1"=>"10,6,4,5,4,2,1,18,13,1,1,4,16,29", "fseries2"=>"8,5,3,4,3,2,1,11,5,1,1,1,7,21", "fseries3"=>"7,4,4,3,3,2,1,15,6,1,1,2,11,27", "fseries_pl_newcar"=>"8,6,7,9,5,7,3,2,3,4,5,4,3,2", "fseries_newcar"=>"15,3,3,10,6,2,1,8,5,3,2,1,3,66", "fseries_percentage_newcar"=>"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0", "fseries_registration"=>"6,0,1,4,1,1,1,5,5,0,0,0,1,25", "fseries_percentage_registration"=>"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0", "fseries_pl_usedcar"=>"7,4,8,3,7,4,2,1,1,2,2,7,1,2", "fseries_usedcar"=>"1,2,2,1,1,1,0,4,2,0,1,0,1,24", "fseries_percentage_usedcar"=>"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0", "fseries_pl_onemonth"=>"8,3,7,4,8,8,3,7,4,5,6,6,6,3", "fseries_onemonth"=>"15,15,13,3,8,10,10,5,6,12,11,9,6,7", "fseries_pl_sixmonth"=>"6,5,6,5,9,8,4,6,4,6,5,5,5,5", "fseries_sixmonth"=>"14,14,12,4,7,9,11,6,7,10,12,8,7,8", "fseries_pl_years"=>"7,4,9,6,10,7,5,8,5,7,6,8,4,4", "fseries_years"=>"13,14,10,5,6,10,12,7,8,9,9,7,8,9", "fseries_years_not"=>"0,1,0,6,0,0,0,0,0,0,0,0,0,0", "fseries_percentage_all_years"=>"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0", "fseries_pl_inspection"=>"8,6,9,7,12,6,4,9,4,5,7,10,6,6", "fseries_inspection"=>"12,10,11,7,9,8,1,5,9,10,10,6,8,9", "fseries_inspection_not"=>"11,0,0,8,0,0,0,0,0,0,0,0,1,0", "fseries_percentage_all_inspection"=>"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0", "fseries_insurance_new"=>"0,0,0,9,0,1,0,0,0,0,0,0,0,0", "fseries_pl_insurance"=>"9,7,8,8,13,9,3,5,6,8,8,9,7,4", "fseries_insurance_renew"=>"15,12,10,10,10,9,12,10,8,7,7,7,7,7", "fseries_percentage_insurance_renew"=>"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0", "fseries_number_of_newcar"=>"17,19,17,11,5,17,4,10,5,16,13,5,3,6", "fseries_sales_of_newcar"=>"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000", "fseries_profit_of_newcar"=>"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500", "fseries_number_of_usedcar"=>"8,5,4,4,8,2,3,2,2,5,5,3,1,2", "fseries_sales_of_usedcar"=>"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400", "fseries_profit_of_usedcar"=>"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000", "fseries_number_of_service"=>"3,15,13,17,8,10,8,5,9,14,13,4,6,3", "fseries_sales_of_service"=>"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000", "fseries_profit_of_service"=>"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000", "fseries_sales_of_all"=>"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882", "fseries_profit_of_all"=>"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347", "fseries_percentage_profit_of_all"=>"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2"}
D, [2015-07-18T09:47:44.767572 #2251] DEBUG -- :   [1m[36m (0.1ms)[0m  [1mBEGIN[0m
D, [2015-07-18T09:47:44.769731 #2251] DEBUG -- :   [1m[35mSQL (0.5ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/charts"], ["action", "OK"], ["parameters", "{\"utf8\"=>\"✓\", \"authenticity_token\"=>\"aOX1bA5nSAISkrOyiO/d5ZOOWYxfWEAXq8BpMcFEFcTj4nZEuohfeWckyJHdKrSKvOQ8nUHd2janEm71/qi7Tw==\", \"radios_bar\"=>\"chart_newcar\", \"chart_cat\"=>\"bar\", \"commit\"=>\"OK\", \"check\"=>\"on\", \"check_on\"=>{\"no0\"=>\"true\", \"no1\"=>\"true\", \"no2\"=>\"true\", \"no3\"=>\"true\", \"no4\"=>\"true\", \"no5\"=>\"true\", \"no6\"=>\"true\", \"no7\"=>\"true\", \"no8\"=>\"true\", \"no9\"=>\"true\", \"no10\"=>\"true\", \"no11\"=>\"true\", \"no12\"=>\"true\", \"no13\"=>\"true\"}, \"subtitle\"=>\"2015/03～2015/03\", \"xaxis\"=>\"池本謙三,川上和良,田部和幸,小村雄太,園山哲,安藤庸介,石村哲大,小笠原雅史,大崎裕豊,太田裕,大谷周平,佐貫浩大郎,須田優太,渡部修平\", \"fseries1\"=>\"10,6,4,5,4,2,1,18,13,1,1,4,16,29\", \"fseries2\"=>\"8,5,3,4,3,2,1,11,5,1,1,1,7,21\", \"fseries3\"=>\"7,4,4,3,3,2,1,15,6,1,1,2,11,27\", \"fseries_pl_newcar\"=>\"8,6,7,9,5,7,3,2,3,4,5,4,3,2\", \"fseries_newcar\"=>\"15,3,3,10,6,2,1,8,5,3,2,1,3,66\", \"fseries_percentage_newcar\"=>\"187.5,50.0,42.9,111.1,120.0,28.6,33.3,400.0,166.7,75.0,40.0,25.0,100.0,3300.0\", \"fseries_registration\"=>\"6,0,1,4,1,1,1,5,5,0,0,0,1,25\", \"fseries_percentage_registration\"=>\"75.0,0.0,14.3,44.4,20.0,14.3,33.3,250.0,166.7,0.0,0.0,0.0,33.3,1250.0\", \"fseries_pl_usedcar\"=>\"7,4,8,3,7,4,2,1,1,2,2,7,1,2\", \"fseries_usedcar\"=>\"1,2,2,1,1,1,0,4,2,0,1,0,1,24\", \"fseries_percentage_usedcar\"=>\"14.3,50.0,25.0,33.3,14.3,25.0,0.0,400.0,200.0,0.0,50.0,0.0,100.0,1200.0\", \"fseries_pl_onemonth\"=>\"8,3,7,4,8,8,3,7,4,5,6,6,6,3\", \"fseries_onemonth\"=>\"15,15,13,3,8,10,10,5,6,12,11,9,6,7\", \"fseries_pl_sixmonth\"=>\"6,5,6,5,9,8,4,6,4,6,5,5,5,5\", \"fseries_sixmonth\"=>\"14,14,12,4,7,9,11,6,7,10,12,8,7,8\", \"fseries_pl_years\"=>\"7,4,9,6,10,7,5,8,5,7,6,8,4,4\", \"fseries_years\"=>\"13,14,10,5,6,10,12,7,8,9,9,7,8,9\", \"fseries_years_not\"=>\"0,1,0,6,0,0,0,0,0,0,0,0,0,0\", \"fseries_percentage_all_years\"=>\"185.7,300.0,111.1,91.7,60.0,142.9,240.0,87.5,160.0,128.6,150.0,87.5,200.0,225.0\", \"fseries_pl_inspection\"=>\"8,6,9,7,12,6,4,9,4,5,7,10,6,6\", \"fseries_inspection\"=>\"12,10,11,7,9,8,1,5,9,10,10,6,8,9\", \"fseries_inspection_not\"=>\"11,0,0,8,0,0,0,0,0,0,0,0,1,0\", \"fseries_percentage_all_inspection\"=>\"121.1,166.7,122.2,100.0,75.0,133.3,25.0,55.6,225.0,200.0,142.9,60.0,128.6,150.0\", \"fseries_insurance_new\"=>\"0,0,0,9,0,1,0,0,0,0,0,0,0,0\", \"fseries_pl_insurance\"=>\"9,7,8,8,13,9,3,5,6,8,8,9,7,4\", \"fseries_insurance_renew\"=>\"15,12,10,10,10,9,12,10,8,7,7,7,7,7\", \"fseries_percentage_insurance_renew\"=>\"166.7,171.4,125.0,125.0,76.9,100.0,400.0,200.0,133.3,87.5,87.5,77.8,100.0,175.0\", \"fseries_number_of_newcar\"=>\"17,19,17,11,5,17,4,10,5,16,13,5,3,6\", \"fseries_sales_of_newcar\"=>\"45000000,52500000,33405000,32000002,12000000,17500000,9435000,17500000,5450000,32000000,27500000,12000000,3450000,6789000\", \"fseries_profit_of_newcar\"=>\"9050000,9350000,2500000,3500003,1250000,2005000,789000,2000000,467500,1700000,4000000,1250000,300000,987500\", \"fseries_number_of_usedcar\"=>\"8,5,4,4,8,2,3,2,2,5,5,3,1,2\", \"fseries_sales_of_usedcar\"=>\"2360000,3450000,2145000,3000005,5600000,1450000,1750000,550000,1150000,2500000,2500000,1620000,750000,1453400\", \"fseries_profit_of_usedcar\"=>\"250000,300000,200000,450006,1300000,250000,360000,100000,250000,1000000,500000,300000,100000,260000\", \"fseries_number_of_service\"=>\"3,15,13,17,8,10,8,5,9,14,13,4,6,3\", \"fseries_sales_of_service\"=>\"150000,1345000,2900000,1250008,1320000,1105000,1345000,450000,450000,1750000,690000,800000,456000,640000\", \"fseries_profit_of_service\"=>\"50000,450000,865000,506009,345000,450000,300000,130000,125400,600000,235000,175000,80000,100000\", \"fseries_sales_of_all\"=>\"47510,57295,38450,36250,18920,20055,12530,18500,7050,36250,30690,14420,4656,8882\", \"fseries_profit_of_all\"=>\"9350,10100,3565,4456,2895,2705,1449,2230,842,3300,4735,1725,480,1347\", \"fseries_percentage_profit_of_all\"=>\"19.7,17.6,9.3,12.3,15.3,13.5,11.6,12.1,12.0,9.1,15.4,12.0,10.3,15.2\", \"controller\"=>\"charts\", \"action\"=>\"create\"}"], ["created_at", "2015-07-18 09:47:44.768258"], ["updated_at", "2015-07-18 09:47:44.768258"]]
D, [2015-07-18T09:47:44.774258 #2251] DEBUG -- :   [1m[36m (2.7ms)[0m  [1mCOMMIT[0m
I, [2015-07-18T09:47:44.842659 #2251]  INFO -- :   Rendered charts/create.html.erb within layouts/charts (3.7ms)
I, [2015-07-18T09:47:44.843964 #2251]  INFO -- : Completed 200 OK in 105ms (Views: 68.4ms | ActiveRecord: 5.3ms)
I, [2015-07-18T09:47:47.989762 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437212865870" for 192.168.33.1 at 2015-07-18 09:47:47 +0000
I, [2015-07-18T09:47:48.097581 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:47:48.098055 #2251]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437212865870"}
I, [2015-07-18T09:47:48.366939 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.1ms)
I, [2015-07-18T09:47:48.367819 #2251]  INFO -- : Completed 200 OK in 269ms (Views: 268.0ms | ActiveRecord: 0.0ms)
I, [2015-07-18T09:47:49.740357 #2251]  INFO -- : Started GET "/logins/set_action_name?action_name=%E9%96%89%E3%81%98%E3%82%8B&_=1437211930286" for 192.168.33.1 at 2015-07-18 09:47:49 +0000
I, [2015-07-18T09:47:49.834157 #2251]  INFO -- : Processing by LoginsController#set_action_name as TEXT
I, [2015-07-18T09:47:49.834680 #2251]  INFO -- :   Parameters: {"action_name"=>"閉じる", "_"=>"1437211930286"}
I, [2015-07-18T09:47:50.106805 #2251]  INFO -- :   Rendered logins/set_action_name.html.erb within layouts/login (0.0ms)
I, [2015-07-18T09:47:50.107768 #2251]  INFO -- : Completed 200 OK in 273ms (Views: 272.2ms | ActiveRecord: 0.0ms)
I, [2015-07-22T01:50:05.413588 #10321]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-22 01:50:05 +0000
I, [2015-07-22T01:50:05.541784 #10321]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-22T01:50:05.597994 #10321] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-22T01:50:05.614183 #10321] DEBUG -- :   [1m[35mSQL (0.6ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-22 01:50:05.598974"], ["updated_at", "2015-07-22 01:50:05.598974"]]
D, [2015-07-22T01:50:05.618848 #10321] DEBUG -- :   [1m[36m (3.0ms)[0m  [1mCOMMIT[0m
D, [2015-07-22T01:50:05.620033 #10321] DEBUG -- : 
D, [2015-07-22T01:50:05.635382 #10321] DEBUG -- :   [1m[35mPlan Load (13.4ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
E, [2015-07-22T01:50:05.636222 #10321] ERROR -- : PG::DivisionByZero: ERROR:  division by zero
: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
I, [2015-07-22T01:50:05.637308 #10321]  INFO -- : Completed 500 Internal Server Error in 95ms
F, [2015-07-22T01:50:05.639739 #10321] FATAL -- : 
ActiveRecord::StatementInvalid (PG::DivisionByZero: ERROR:  division by zero
: select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (COALESCE(sum(pl_registration_plan),0) + COALESCE(sum(registration_plan_update),0) <> 0) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid):
  app/controllers/sales_controller.rb:151:in `index'


I, [2015-07-22T01:53:54.953599 #10321]  INFO -- : Started GET "/sales" for 192.168.33.1 at 2015-07-22 01:53:54 +0000
I, [2015-07-22T01:53:55.315101 #10321]  INFO -- : Processing by SalesController#index as HTML
D, [2015-07-22T01:53:55.368510 #10321] DEBUG -- :   [1m[36m (0.2ms)[0m  [1mBEGIN[0m
D, [2015-07-22T01:53:55.371220 #10321] DEBUG -- :   [1m[35mSQL (0.3ms)[0m  INSERT INTO "access_logs" ("ip_address", "user_id", "url", "action", "parameters", "created_at", "updated_at") VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING "id"  [["ip_address", "192.168.33.1"], ["user_id", "system"], ["url", "/sales"], ["action", "営業活動実績"], ["parameters", "{\"controller\"=>\"sales\", \"action\"=>\"index\"}"], ["created_at", "2015-07-22 01:53:55.369278"], ["updated_at", "2015-07-22 01:53:55.369278"]]
D, [2015-07-22T01:53:55.374881 #10321] DEBUG -- :   [1m[36m (2.5ms)[0m  [1mCOMMIT[0m
D, [2015-07-22T01:53:55.375890 #10321] DEBUG -- : 
D, [2015-07-22T01:53:55.410553 #10321] DEBUG -- :   [1m[35mPlan Load (3.5ms)[0m  select
        usplrepr.uid as user_id, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order, avg(pl_customer) as customer, sum(pl_newcar_balance) as newcar_balance, sum(pl_registration_possible) as pl_registration_possible, sum(pl_registration_plan) as registration_plan, 
        sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
        sum(pl_newcar) as pl_newcar, sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce,
        sum(wholesale) as wholesale,
        sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re,
        sum(inspection_pack) as inspection_pack,
        sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result, sum(pl_usedcar) as pl_usedcar, sum(usedcar) as usedcar, sum(pl_onemonth) as pl_onemonth, sum(onemonth) as onemonth, sum(pl_sixmonth) as pl_sixmonth, sum(sixmonth) as sixmonth, sum(pl_years) as pl_years, sum(years) as years,
        sum(years_not) as years_not, sum(pl_inspection) as pl_inspection, sum(inspection) as inspection, sum(inspection_not) as inspection_not, sum(insurance_new) as insurance_new, sum(pl_insurance) as pl_insurance, sum(insurance_renew) as insurance_renew,
        sum(insurance_cancel) as insurance_cancel, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
        sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
        sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
        sum(all_sales) as all_sales,
        sum(all_profit) as all_profit,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then (COALESCE(sum(newcar_new),0) + COALESCE(sum(newcar_replace),0) + COALESCE(sum(newcar_add),0) + COALESCE(sum(newcar_introduce),0) + COALESCE(sum(wholesale),0)) / sum(pl_newcar) else 0 end ) as progress_newcar,
        (case when (sum(pl_newcar) <> 0 and sum(pl_newcar) notnull) then COALESCE(sum(registration_result),0) / sum(pl_newcar) else 0 end) as progress_registration,
        (case when (sum(pl_usedcar) <> 0 and sum(pl_usedcar) notnull) then COALESCE(sum(usedcar),0) / sum(pl_usedcar) else 0 end) as progress_usedcar,
        (case when (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0) <> 0) then (COALESCE(sum(years),0) + COALESCE(sum(years_not),0)) / (COALESCE(sum(pl_years),0) + COALESCE(sum(years_not),0)) else 0 end) as progress_years,
        (case when (COALESCE(sum(pl_inspection),0)+ COALESCE(sum(inspection_not),0) <> 0) then (COALESCE(sum(inspection),0) + COALESCE(sum(inspection_not),0)) / (COALESCE(sum(pl_inspection),0) + COALESCE(sum(inspection_not),0)) else 0 end) as progress_inspection,
        (case when (sum(pl_insurance) <> 0 and sum(pl_insurance) notnull) then COALESCE(sum(insurance_renew),0) / sum(pl_insurance) else 0 end) as progress_insurance_renew,
        (case when (sum(sales_of_newcar) <> 0 and sum(sales_of_newcar) notnull) then COALESCE(sum(profit_of_newcar),0) / sum(sales_of_newcar) else 0 end) as per_profit_of_newcar,
        (case when (sum(sales_of_usedcar) <> 0 and sum(sales_of_usedcar) notnull) then COALESCE(sum(profit_of_usedcar),0) / sum(sales_of_usedcar) else 0 end) as per_profit_of_usedcar,
        (case when (sum(sales_of_service) <> 0 and sum(sales_of_service) notnull) then COALESCE(sum(profit_of_service),0) / sum(sales_of_service) else 0 end) as per_profit_of_service,
        (case when (sum(all_sales) <> 0 and sum(all_sales) notnull) then COALESCE(sum(all_profit),0) / sum(all_sales) else 0 end) as per_all_profit
       from 
      (
      (((select us.user_id as uid, us.user_password, us.user_name, us.emp_no, us.position, us.job, us.group, us.role, us.delete_flag, us.display_order,
       pl.user_id, pl.plan_ym as plan_ym, pl.customer as pl_customer, pl.newcar as pl_newcar, pl.newcar_balance as pl_newcar_balance, pl.registration_possible as pl_registration_possible, pl.registration_plan as pl_registration_plan, pl.usedcar as pl_usedcar, pl.onemonth as pl_onemonth, pl.sixmonth as pl_sixmonth, pl.years as pl_years, 
       pl.inspection as pl_inspection, pl.insurance as pl_insurance
       from users us left join plans pl on us.user_id = pl.user_id) as uspl
       full outer join 
      (select user_id, result_ym, 
       sum(negotiations) as negotiations, sum(assessment) as assessment, sum(testdrive) as testdrive,
       sum(newcar_new) as newcar_new, sum(newcar_replace) as newcar_replace, sum(newcar_add) as newcar_add, sum(newcar_introduce) as newcar_introduce, 
       sum(wholesale) as wholesale,
       sum(newcar_credit) as newcar_credit, sum(newcar_credit_re) as newcar_credit_re, 
        sum(inspection_pack) as inspection_pack,
       sum(registration_possible) as registration_possible, sum(registration_plan_update) as registration_plan_update, sum(registration_result) as registration_result,
       sum(usedcar) as usedcar
       from results group by user_id , result_ym) re
       on uspl.uid = re.user_id and uspl.plan_ym = re.result_ym) as usplre
       full outer join 
      (select user_id, profit_ym, sum(number_of_newcar) as number_of_newcar, sum(sales_of_newcar) as sales_of_newcar, sum(profit_of_newcar) as profit_of_newcar,
       sum(number_of_usedcar) as number_of_usedcar, sum(sales_of_usedcar) as sales_of_usedcar, sum(profit_of_usedcar) as profit_of_usedcar,
       sum(number_of_service) as number_of_service, sum(sales_of_service) as sales_of_service, sum(profit_of_service) as profit_of_service,
       (COALESCE(sum(sales_of_newcar),0) + COALESCE(sum(sales_of_usedcar),0) + COALESCE(sum(sales_of_service),0)) as all_sales,
       (COALESCE(sum(profit_of_newcar),0) + COALESCE(sum(profit_of_usedcar),0) + COALESCE(sum(profit_of_service),0)) as all_profit
       from profits group by user_id , profit_ym) as pr
       on usplre.uid = pr.user_id and usplre.plan_ym = pr.profit_ym) as usplrepr
       full outer join 
      (select user_id, inspection_ym, 
       sum(onemonth) as onemonth, sum(sixmonth) as sixmonth, sum(years) as years, sum(years_not) as years_not,
       sum(inspection) as inspection, sum(inspection_not) as inspection_not,
       sum(insurance_new) as insurance_new, sum(insurance_renew) as insurance_renew, sum(insurance_cancel) as insurance_cancel
       from inspections group by user_id , inspection_ym) ins
       on usplrepr.uid = ins.user_id and usplrepr.plan_ym = ins.inspection_ym
       ) where usplrepr.plan_ym >= '201507' and usplrepr.plan_ym <= '201507' group by usplrepr.uid, usplrepr.user_name, usplrepr.emp_no, usplrepr.group, usplrepr.display_order order by usplrepr.display_order, usplrepr.uid
D, [2015-07-22T01:53:55.469765 #10321] DEBUG -- :   [1m[36m (0.6ms)[0m  [1mSELECT MAX("profits"."updated_at") FROM "profits" WHERE (profit_ym >= '201507' and profit_ym <= '201507')[0m
I, [2015-07-22T01:53:55.723194 #10321]  INFO -- :   Rendered sales/index.html.erb within layouts/application (165.7ms)
I, [2015-07-22T01:53:55.727891 #10321]  INFO -- : Completed 200 OK in 398ms (Views: 257.0ms | ActiveRecord: 13.6ms)
